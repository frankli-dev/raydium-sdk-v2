{"version":3,"sources":["../../src/marshmallow/buffer-layout.ts"],"sourcesContent":["import {\n  bits as _bits,\n  BitStructure as _BitStructure,\n  blob as _blob,\n  Blob as _Blob,\n  cstr as _cstr,\n  f32 as _f32,\n  f32be as _f32be,\n  f64 as _f64,\n  f64be as _f64be,\n  greedy as _greedy,\n  Layout as _Layout,\n  ns64 as _ns64,\n  ns64be as _ns64be,\n  nu64 as _nu64,\n  nu64be as _nu64be,\n  offset as _offset,\n  s16 as _s16,\n  s16be as _s16be,\n  s24 as _s24,\n  s24be as _s24be,\n  s32 as _s32,\n  s32be as _s32be,\n  s40 as _s40,\n  s40be as _s40be,\n  s48 as _s48,\n  s48be as _s48be,\n  s8 as _s8,\n  seq as _seq,\n  struct as _struct,\n  Structure as _Structure,\n  u16 as _u16,\n  u16be as _u16be,\n  u24 as _u24,\n  u24be as _u24be,\n  u32 as _u32,\n  u32be as _u32be,\n  u40 as _u40,\n  u40be as _u40be,\n  u48 as _u48,\n  u48be as _u48be,\n  u8 as _u8,\n  UInt as _UInt,\n  union as _union,\n  Union as _Union,\n  unionLayoutDiscriminator as _unionLayoutDiscriminator,\n  utf8 as _utf8,\n} from \"@solana/buffer-layout\";\n\n//#region ------------------- Layout -------------------\nexport interface Layout<T = any, P = \"\"> {\n  span: number;\n  property?: P;\n  decode(b: Buffer, offset?: number): T;\n  encode(src: T, b: Buffer, offset?: number): number;\n  getSpan(b: Buffer, offset?: number): number;\n  replicate<AP extends string>(name: AP): Layout<T, AP>;\n}\nexport interface LayoutConstructor {\n  new <T, P>(): Layout<T, P>; // for class extends syntex\n  new <T, P>(span?: T, property?: P): Layout<T, P>;\n  readonly prototype: Layout;\n}\nexport const Layout = _Layout as unknown as LayoutConstructor;\n//#endregion\n\n//#region ------------------- Structure -------------------\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\nexport interface Structure<T = any, P = \"\", DecodeSchema extends { [key: string]: any } = any>\n  extends Layout<DecodeSchema, P> {\n  span: number;\n  decode(b: Buffer, offset?: number): DecodeSchema;\n  layoutFor<AP extends string>(property: AP): Layout<DecodeSchema[AP]>;\n  offsetOf<AP extends string>(property: AP): number;\n}\ninterface StructureConstructor {\n  new <T = any, P = \"\", DecodeSchema extends { [key: string]: any } = any>(): Structure<T, P, DecodeSchema>;\n  new <T = any, P = \"\", DecodeSchema extends { [key: string]: any } = any>(\n    fields: T,\n    property?: P,\n    decodePrefixes?: boolean,\n  ): Structure<T, P, DecodeSchema>;\n}\nexport const Structure = _Structure as unknown as StructureConstructor;\n//#endregion\n\n//#region ------------------- Union -------------------\nexport interface Union<UnionSchema extends { [key: string]: any } = any> extends Layout {\n  registry: object;\n  decode(b: Buffer, offset?: number): Partial<UnionSchema>;\n  addVariant(\n    variant: number,\n    layout: Structure<any, any, Partial<UnionSchema>> | Layout<any, keyof UnionSchema>,\n    property?: string,\n  ): any /* TEMP: code in Layout.js 1809 */;\n}\ninterface UnionConstructor {\n  new <UnionSchema extends { [key: string]: any } = any>(): Union<UnionSchema>;\n  new <UnionSchema extends { [key: string]: any } = any>(\n    discr: Layout<any, any>,\n    defaultLayout: Layout<any, any>,\n    property?: string,\n  ): Union<UnionSchema>;\n}\nexport const Union = _Union as unknown as UnionConstructor;\n//#endregion\n\n//#region ------------------- BitStructure -------------------\nexport type BitStructure<T = unknown /* TEMP */, P = \"\"> = Layout<T, P>;\ninterface BitStructureConstructor {\n  new (...params: any[]): BitStructure;\n}\nexport const BitStructure = _BitStructure as BitStructureConstructor;\n//#endregion\n\n//#region ------------------- UInt -------------------\nexport type UInt<T = any, P = \"\"> = Layout<T, P>;\ninterface UIntConstructor {\n  new <T, P>(span?: T, property?: P): UInt<T, P>;\n}\nexport const UInt = _UInt as UIntConstructor;\n//#endregion\n\n//#region ------------------- Blob -------------------\nexport type Blob<P extends string = \"\"> = Layout<Buffer, P>;\ninterface BlobConstructor {\n  new (...params: ConstructorParameters<LayoutConstructor>): Blob;\n}\nexport const Blob = _Blob as unknown as BlobConstructor;\n//#endregion\n\nexport const greedy = _greedy as <P extends string = \"\">(elementSpan?: number, property?: P) => Layout<number, P>;\nexport const u8 = _u8 as <P extends string = \"\">(property?: P) => Layout<number, P>;\nexport const u16 = _u16 as <P extends string = \"\">(property?: P) => Layout<number, P>;\nexport const u24 = _u24 as <P extends string = \"\">(property?: P) => Layout<number, P>;\nexport const u32 = _u32 as <P extends string = \"\">(property?: P) => Layout<number, P>;\nexport const u40 = _u40 as <P extends string = \"\">(property?: P) => Layout<number, P>;\nexport const u48 = _u48 as <P extends string = \"\">(property?: P) => Layout<number, P>;\nexport const nu64 = _nu64 as <P extends string = \"\">(property?: P) => Layout<number, P>;\nexport const u16be = _u16be as <P extends string = \"\">(property?: P) => Layout<number, P>;\nexport const u24be = _u24be as <P extends string = \"\">(property?: P) => Layout<number, P>;\nexport const u32be = _u32be as <P extends string = \"\">(property?: P) => Layout<number, P>;\nexport const u40be = _u40be as <P extends string = \"\">(property?: P) => Layout<number, P>;\nexport const u48be = _u48be as <P extends string = \"\">(property?: P) => Layout<number, P>;\nexport const nu64be = _nu64be as <P extends string = \"\">(property?: P) => Layout<number, P>;\nexport const s8 = _s8 as <P extends string = \"\">(property?: P) => Layout<number, P>;\nexport const s16 = _s16 as <P extends string = \"\">(property?: P) => Layout<number, P>;\nexport const s24 = _s24 as <P extends string = \"\">(property?: P) => Layout<number, P>;\nexport const s32 = _s32 as <P extends string = \"\">(property?: P) => Layout<number, P>;\nexport const s40 = _s40 as <P extends string = \"\">(property?: P) => Layout<number, P>;\nexport const s48 = _s48 as <P extends string = \"\">(property?: P) => Layout<number, P>;\nexport const ns64 = _ns64 as <P extends string = \"\">(property?: P) => Layout<number, P>;\nexport const s16be = _s16be as <P extends string = \"\">(property?: P) => Layout<number, P>;\nexport const s24be = _s24be as <P extends string = \"\">(property?: P) => Layout<number, P>;\nexport const s32be = _s32be as <P extends string = \"\">(property?: P) => Layout<number, P>;\nexport const s40be = _s40be as <P extends string = \"\">(property?: P) => Layout<number, P>;\nexport const s48be = _s48be as <P extends string = \"\">(property?: P) => Layout<number, P>;\nexport const ns64be = _ns64be as <P extends string = \"\">(property?: P) => Layout<number, P>;\nexport const f32 = _f32 as <P extends string = \"\">(property?: P) => Layout<number, P>;\nexport const f32be = _f32be as <P extends string = \"\">(property?: P) => Layout<number, P>;\nexport const f64 = _f64 as <P extends string = \"\">(property?: P) => Layout<number, P>;\nexport const f64be = _f64be as <P extends string = \"\">(property?: P) => Layout<number, P>;\n\nexport const struct = _struct as <T, P extends string = \"\">(\n  fields: T,\n  property?: P,\n  decodePrefixes?: boolean,\n) => T extends Layout<infer Value, infer Property>[]\n  ? Structure<\n      Value,\n      P,\n      {\n        [K in Exclude<Extract<Property, string>, \"\">]: Extract<T[number], Layout<any, K>> extends Layout<infer V, any>\n          ? V\n          : any;\n      }\n    >\n  : any;\n\nexport const seq = _seq as unknown as <T, P>(\n  elementLayout: Layout<T, string>,\n  count: number | Layout<number, string>,\n  property?: P,\n) => Layout<T[]>;\nexport const union = _union as <UnionSchema extends { [key: string]: any } = any>(\n  discr: Layout<any, any>,\n  defaultLayout?: any,\n  property?: string,\n) => Union<UnionSchema>;\nexport const unionLayoutDiscriminator = _unionLayoutDiscriminator as <P extends string = \"\">(\n  layout: Layout<any, P>,\n  property?: P,\n) => any;\nexport const blob = _blob as unknown as <P extends string = \"\">(\n  length: number | Layout<number, P>,\n  property?: P,\n) => Blob<P>;\nexport const cstr = _cstr as <P extends string = \"\">(property?: P) => Layout<string, P>;\nexport const utf8 = _utf8 as <P extends string = \"\">(maxSpan: number, property?: P) => Layout<string, P>;\nexport const bits = _bits as unknown as <T, P extends string = \"\">(\n  word: Layout<T>,\n  msb?: boolean,\n  property?: P,\n) => BitStructure<T, P>; // TODO: not quite sure\nexport const offset = _offset as unknown as <T, P extends string = \"\">(\n  layout: Layout<T, P>,\n  offset?: number,\n  property?: P,\n) => Layout<T, P>;\n\nexport type GetStructureSchema<T extends Structure> = T extends Structure<any, any, infer S> ? S : unknown;\n"],"mappings":"4ZAAA,IAAAA,GAAA,GAAAC,EAAAD,GAAA,kBAAAE,EAAA,SAAAC,EAAA,WAAAC,EAAA,cAAAC,EAAA,SAAAC,EAAA,UAAAC,EAAA,SAAAC,GAAA,SAAAC,GAAA,SAAAC,GAAA,QAAAC,EAAA,UAAAC,EAAA,QAAAC,EAAA,UAAAC,EAAA,WAAAC,EAAA,SAAAC,EAAA,WAAAC,EAAA,SAAAC,EAAA,WAAAC,EAAA,WAAAC,GAAA,QAAAC,EAAA,UAAAC,EAAA,QAAAC,EAAA,UAAAC,EAAA,QAAAC,EAAA,UAAAC,EAAA,QAAAC,EAAA,UAAAC,EAAA,QAAAC,EAAA,UAAAC,EAAA,OAAAC,EAAA,QAAAC,EAAA,WAAAC,EAAA,QAAAC,EAAA,UAAAC,EAAA,QAAAC,EAAA,UAAAC,EAAA,QAAAC,EAAA,UAAAC,EAAA,QAAAC,EAAA,UAAAC,EAAA,QAAAC,EAAA,UAAAC,EAAA,OAAAC,EAAA,UAAAC,EAAA,6BAAAC,EAAA,SAAAC,KAAA,eAAAC,EAAAhD,IAAA,IAAAiD,EA+CO,iCAgBMC,EAAS,EAAAC,OAoBTC,EAAY,EAAAC,UAqBZC,EAAQ,EAAAC,MAQRC,EAAe,EAAAC,aAQfC,EAAO,EAAAC,KAQPC,EAAO,EAAAC,KAGPC,EAAS,EAAAC,OACTC,EAAK,EAAAC,GACLC,EAAM,EAAAC,IACNC,EAAM,EAAAC,IACNC,EAAM,EAAAC,IACNC,EAAM,EAAAC,IACNC,EAAM,EAAAC,IACNC,EAAO,EAAAC,KACPC,EAAQ,EAAAC,MACRC,EAAQ,EAAAC,MACRC,EAAQ,EAAAC,MACRC,EAAQ,EAAAC,MACRC,EAAQ,EAAAC,MACRC,EAAS,EAAAC,OACTC,EAAK,EAAAC,GACLC,EAAM,EAAAC,IACNC,EAAM,EAAAC,IACNC,EAAM,EAAAC,IACNC,EAAM,EAAAC,IACNC,EAAM,EAAAC,IACNC,EAAO,EAAAC,KACPC,EAAQ,EAAAC,MACRC,EAAQ,EAAAC,MACRC,EAAQ,EAAAC,MACRC,EAAQ,EAAAC,MACRC,EAAQ,EAAAC,MACRC,EAAS,EAAAC,OACTC,EAAM,EAAAC,IACNC,EAAQ,EAAAC,MACRC,EAAM,EAAAC,IACNC,EAAQ,EAAAC,MAERC,EAAS,EAAAC,OAgBTC,EAAM,EAAAC,IAKNC,EAAQ,EAAAC,MAKRC,EAA2B,EAAAC,yBAI3BC,GAAO,EAAAC,KAIPC,GAAO,EAAAC,KACPC,GAAO,EAAAC,KACPC,GAAO,EAAAC,KAKPC,GAAS,EAAAC","names":["buffer_layout_exports","__export","BitStructure","Blob","Layout","Structure","UInt","Union","bits","blob","cstr","f32","f32be","f64","f64be","greedy","ns64","ns64be","nu64","nu64be","offset","s16","s16be","s24","s24be","s32","s32be","s40","s40be","s48","s48be","s8","seq","struct","u16","u16be","u24","u24be","u32","u32be","u40","u40be","u48","u48be","u8","union","unionLayoutDiscriminator","utf8","__toCommonJS","import_buffer_layout","Layout","_Layout","Structure","_Structure","Union","_Union","BitStructure","_BitStructure","UInt","_UInt","Blob","_Blob","greedy","_greedy","u8","_u8","u16","_u16","u24","_u24","u32","_u32","u40","_u40","u48","_u48","nu64","_nu64","u16be","_u16be","u24be","_u24be","u32be","_u32be","u40be","_u40be","u48be","_u48be","nu64be","_nu64be","s8","_s8","s16","_s16","s24","_s24","s32","_s32","s40","_s40","s48","_s48","ns64","_ns64","s16be","_s16be","s24be","_s24be","s32be","_s32be","s40be","_s40be","s48be","_s48be","ns64be","_ns64be","f32","_f32","f32be","_f32be","f64","_f64","f64be","_f64be","struct","_struct","seq","_seq","union","_union","unionLayoutDiscriminator","_unionLayoutDiscriminator","blob","_blob","cstr","_cstr","utf8","_utf8","bits","_bits","offset","_offset"]}