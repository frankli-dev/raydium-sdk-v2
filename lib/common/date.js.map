{"version":3,"sources":["../../src/common/date.ts"],"sourcesContent":["export type TimeStamp = string | number | Date;\n\nexport const isNumber = (val): boolean => typeof val === \"number\";\nexport type DateParam = string | number | Date | undefined;\n\nexport const getDate = (value?: DateParam): Date =>\n  value ? new Date(value) : new Date();\nexport const getTime = (value?: DateParam): number => getDate(value).getTime();\n\n/** A must be milliseconds */\nexport function isDateBefore(\n  timestampA: TimeStamp,\n  timestampB: TimeStamp,\n  options?: { unit?: \"ms\" | \"s\" }\n): boolean {\n  const realTimestampB = isNumber(timestampB)\n    ? (timestampB as number) * (options?.unit === \"s\" ? 1000 : 1)\n    : timestampB;\n  return new Date(timestampA).getTime() <= +realTimestampB;\n}\n\n/** A must be milliseconds */\nexport function isDateAfter(\n  timestampA: TimeStamp,\n  timestampB: TimeStamp,\n  options?: { unit?: \"ms\" | \"s\" }\n): boolean {\n  const realTimestampB = isNumber(timestampB)\n    ? (timestampB as number) * (options?.unit === \"s\" ? 1000 : 1)\n    : timestampB;\n  return new Date(timestampA).getTime() > +realTimestampB;\n}\n\nexport function offsetDateTime(\n  baseDate: DateParam,\n  offset: {\n    days?: number;\n    hours?: number;\n    minutes?: number;\n    seconds?: number;\n    milliseconds?: number;\n  }\n): Date {\n  const timestamp = getTime(baseDate);\n  const offsetedTimestamp =\n    timestamp +\n    (offset.days ? offset.days * 24 * 60 * 60 * 1000 : 0) +\n    (offset.hours ? offset.hours * 60 * 60 * 1000 : 0) +\n    (offset.minutes ? offset.minutes * 60 * 1000 : 0) +\n    (offset.seconds ? offset.seconds * 1000 : 0) +\n    (offset.milliseconds ? offset.milliseconds : 0);\n  return getDate(offsetedTimestamp);\n}\n"],"mappings":"4ZAAA,IAAAA,EAAA,GAAAC,EAAAD,EAAA,aAAAE,EAAA,YAAAC,EAAA,gBAAAC,EAAA,iBAAAC,EAAA,aAAAC,EAAA,mBAAAC,IAAA,eAAAC,EAAAR,GAEO,IAAMS,EAAYC,GAAiB,OAAOA,GAAQ,SAG5CC,EAAWC,GACtBA,EAAQ,IAAI,KAAKA,CAAK,EAAI,IAAI,KACnBC,EAAWD,GAA8BD,EAAQC,CAAK,EAAE,QAAQ,EAGtE,SAASE,EACdC,EACAC,EACAC,EACS,CACT,IAAMC,EAAiBT,EAASO,CAAU,EACrCA,IAAyBC,GAAA,YAAAA,EAAS,QAAS,IAAM,IAAO,GACzDD,EACJ,OAAO,IAAI,KAAKD,CAAU,EAAE,QAAQ,GAAK,CAACG,CAC5C,CAGO,SAASC,EACdJ,EACAC,EACAC,EACS,CACT,IAAMC,EAAiBT,EAASO,CAAU,EACrCA,IAAyBC,GAAA,YAAAA,EAAS,QAAS,IAAM,IAAO,GACzDD,EACJ,OAAO,IAAI,KAAKD,CAAU,EAAE,QAAQ,EAAI,CAACG,CAC3C,CAEO,SAASE,EACdC,EACAC,EAOM,CAEN,IAAMC,EADYV,EAAQQ,CAAQ,GAG/BC,EAAO,KAAOA,EAAO,KAAO,GAAK,GAAK,GAAK,IAAO,IAClDA,EAAO,MAAQA,EAAO,MAAQ,GAAK,GAAK,IAAO,IAC/CA,EAAO,QAAUA,EAAO,QAAU,GAAK,IAAO,IAC9CA,EAAO,QAAUA,EAAO,QAAU,IAAO,IACzCA,EAAO,aAAeA,EAAO,aAAe,GAC/C,OAAOX,EAAQY,CAAiB,CAClC","names":["date_exports","__export","getDate","getTime","isDateAfter","isDateBefore","isNumber","offsetDateTime","__toCommonJS","isNumber","val","getDate","value","getTime","isDateBefore","timestampA","timestampB","options","realTimestampB","isDateAfter","offsetDateTime","baseDate","offset","offsetedTimestamp"]}