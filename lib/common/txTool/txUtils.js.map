{"version":3,"sources":["../../../src/common/txTool/txUtils.ts","../../../src/common/logger.ts","../../../src/common/txTool/txType.ts"],"sourcesContent":["import {\n  Connection,\n  PublicKey,\n  ComputeBudgetProgram,\n  SimulatedTransactionResponse,\n  Transaction,\n  TransactionInstruction,\n  TransactionMessage,\n  Keypair,\n  EpochInfo,\n  VersionedTransaction,\n} from \"@solana/web3.js\";\nimport { TOKEN_PROGRAM_ID } from \"@solana/spl-token\";\n\nimport { createLogger } from \"../logger\";\nimport { InstructionType } from \"./txType\";\nimport { CacheLTA } from \"./lookupTable\";\n\nimport { ComputeBudgetConfig } from \"@/raydium/type\";\n\nconst logger = createLogger(\"Raydium_txUtil\");\n\nexport const MAX_BASE64_SIZE = 1644;\n\nexport function addComputeBudget(config: ComputeBudgetConfig): {\n  instructions: TransactionInstruction[];\n  instructionTypes: string[];\n} {\n  const ins: TransactionInstruction[] = [];\n  const insTypes: string[] = [];\n  if (config.microLamports) {\n    ins.push(ComputeBudgetProgram.setComputeUnitPrice({ microLamports: config.microLamports }));\n    insTypes.push(InstructionType.SetComputeUnitPrice);\n  }\n  if (config.units) {\n    ins.push(ComputeBudgetProgram.setComputeUnitLimit({ units: config.units }));\n    insTypes.push(InstructionType.SetComputeUnitLimit);\n  }\n\n  return {\n    instructions: ins,\n    instructionTypes: insTypes,\n  };\n}\n\nexport async function getRecentBlockHash(connection: Connection): Promise<string> {\n  try {\n    return (await connection.getLatestBlockhash?.())?.blockhash || (await connection.getRecentBlockhash()).blockhash;\n  } catch {\n    return (await connection.getRecentBlockhash()).blockhash;\n  }\n}\n\n/**\n * Forecast transaction size\n */\nexport function forecastTransactionSize(instructions: TransactionInstruction[], signers: PublicKey[]): boolean {\n  if (instructions.length < 1) logger.logWithError(`no instructions provided: ${instructions.toString()}`);\n  if (signers.length < 1) logger.logWithError(`no signers provided:, ${signers.toString()}`);\n\n  const transaction = new Transaction();\n  transaction.recentBlockhash = \"11111111111111111111111111111111\";\n  transaction.feePayer = signers[0];\n  transaction.add(...instructions);\n\n  try {\n    return Buffer.from(transaction.serialize({ verifySignatures: false })).toString(\"base64\").length < MAX_BASE64_SIZE;\n  } catch (error) {\n    return false;\n  }\n}\n\n/**\n * Simulates multiple instruction\n */\n/**\n * Simulates multiple instruction\n */\nexport async function simulateMultipleInstruction(\n  connection: Connection,\n  instructions: TransactionInstruction[],\n  keyword: string,\n  batchRequest = true,\n): Promise<string[]> {\n  const feePayer = new PublicKey(\"RaydiumSimuLateTransaction11111111111111111\");\n\n  const transactions: Transaction[] = [];\n\n  let transaction = new Transaction();\n  transaction.feePayer = feePayer;\n\n  for (const instruction of instructions) {\n    if (!forecastTransactionSize([...transaction.instructions, instruction], [feePayer])) {\n      transactions.push(transaction);\n      transaction = new Transaction();\n      transaction.feePayer = feePayer;\n    }\n    transaction.add(instruction);\n  }\n  if (transaction.instructions.length > 0) {\n    transactions.push(transaction);\n  }\n\n  let results: SimulatedTransactionResponse[] = [];\n\n  try {\n    results = await simulateTransaction(connection, transactions, batchRequest);\n    if (results.find((i) => i.err !== null)) throw Error(\"rpc simulateTransaction error\");\n  } catch (error) {\n    if (error instanceof Error) {\n      logger.logWithError(\"failed to simulate for instructions\", \"RPC_ERROR\", {\n        message: error.message,\n      });\n    }\n  }\n\n  const logs: string[] = [];\n  for (const result of results) {\n    logger.debug(\"simulate result:\", result);\n\n    if (result.logs) {\n      const filteredLog = result.logs.filter((log) => log && log.includes(keyword));\n      logger.debug(\"filteredLog:\", logs);\n      if (!filteredLog.length) logger.logWithError(\"simulate log not match keyword\", \"keyword\", keyword);\n      logs.push(...filteredLog);\n    }\n  }\n\n  return logs;\n}\n\nexport function parseSimulateLogToJson(log: string, keyword: string): any {\n  const results = log.match(/{[\"\\w:,]+}/g);\n  if (!results || results.length !== 1) {\n    return logger.logWithError(`simulate log fail to match json, keyword: ${keyword}`);\n  }\n\n  return results[0];\n}\n\nexport function parseSimulateValue(log: string, key: string): any {\n  const reg = new RegExp(`\"${key}\":(\\\\d+)`, \"g\");\n\n  const results = reg.exec(log);\n  if (!results || results.length !== 2) {\n    return logger.logWithError(`simulate log fail to match key\", key: ${key}`);\n  }\n\n  return results[1];\n}\n\nexport interface ProgramAddress {\n  publicKey: PublicKey;\n  nonce: number;\n}\nexport function findProgramAddress(\n  seeds: Array<Buffer | Uint8Array>,\n  programId: PublicKey,\n): {\n  publicKey: PublicKey;\n  nonce: number;\n} {\n  const [publicKey, nonce] = PublicKey.findProgramAddressSync(seeds, programId);\n  return { publicKey, nonce };\n}\n\nexport async function simulateTransaction(\n  connection: Connection,\n  transactions: Transaction[],\n  batchRequest?: boolean,\n): Promise<any[]> {\n  let results: any[] = [];\n  if (batchRequest) {\n    const getLatestBlockhash = await connection.getLatestBlockhash();\n\n    const encodedTransactions: string[] = [];\n    for (const transaction of transactions) {\n      transaction.recentBlockhash = getLatestBlockhash.blockhash;\n      transaction.lastValidBlockHeight = getLatestBlockhash.lastValidBlockHeight;\n\n      // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n      // @ts-ignore\n      const message = transaction._compile();\n      const signData = message.serialize();\n\n      // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n      // @ts-ignore\n      const wireTransaction = transaction._serialize(signData);\n      const encodedTransaction = wireTransaction.toString(\"base64\");\n\n      encodedTransactions.push(encodedTransaction);\n    }\n\n    const batch = encodedTransactions.map((keys) => {\n      const args = connection._buildArgs([keys], undefined, \"base64\");\n      return {\n        methodName: \"simulateTransaction\",\n        args,\n      };\n    });\n\n    const reqData: { methodName: string; args: any[] }[][] = [];\n    const itemReqIndex = 20;\n    for (let i = 0; i < Math.ceil(batch.length / itemReqIndex); i++) {\n      reqData.push(batch.slice(i * itemReqIndex, (i + 1) * itemReqIndex));\n    }\n    // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n    // @ts-ignore\n    results = await (\n      await Promise.all(\n        reqData.map(async (i) => (await (connection as any)._rpcBatchRequest(i)).map((ii) => ii.result.value)),\n      )\n    ).flat();\n  } else {\n    try {\n      results = await Promise.all(\n        transactions.map(async (transaction) => await (await connection.simulateTransaction(transaction)).value),\n      );\n    } catch (error) {\n      if (error instanceof Error) {\n        logger.logWithError(\"failed to get info for multiple accounts\", \"RPC_ERROR\", {\n          message: error.message,\n        });\n      }\n    }\n  }\n\n  return results;\n}\n\nexport function checkLegacyTxSize({\n  instructions,\n  payer,\n  signers,\n}: {\n  instructions: TransactionInstruction[];\n  payer: PublicKey;\n  signers: PublicKey[];\n}): boolean {\n  return forecastTransactionSize(instructions, [payer, ...signers]);\n}\n\nexport function checkV0TxSize({\n  instructions,\n  payer,\n  lookupTableAddressAccount,\n  recentBlockhash = Keypair.generate().publicKey.toString(),\n}: {\n  instructions: TransactionInstruction[];\n  payer: PublicKey;\n  lookupTableAddressAccount?: CacheLTA;\n  recentBlockhash?: string;\n}): boolean {\n  const transactionMessage = new TransactionMessage({\n    payerKey: payer,\n    recentBlockhash,\n    instructions,\n  });\n\n  const messageV0 = transactionMessage.compileToV0Message(Object.values(lookupTableAddressAccount ?? {}));\n  try {\n    const buildLength = Buffer.from(new VersionedTransaction(messageV0).serialize()).toString(\"base64\").length;\n    return buildLength < MAX_BASE64_SIZE;\n  } catch (error) {\n    return false;\n  }\n}\n\nlet epochInfoCache: { time: number; data?: EpochInfo } = {\n  time: 0,\n  data: undefined,\n};\n\nexport async function getEpochInfo(connection: Connection): Promise<EpochInfo> {\n  if (!epochInfoCache.data || (Date.now() - epochInfoCache.time) / 1000 > 30) {\n    const data = await connection.getEpochInfo();\n    epochInfoCache = {\n      time: Date.now(),\n      data,\n    };\n    return data;\n  } else {\n    return epochInfoCache.data;\n  }\n}\n\nexport const toBuffer = (arr: Buffer | Uint8Array | Array<number>): Buffer => {\n  if (Buffer.isBuffer(arr)) {\n    return arr;\n  } else if (arr instanceof Uint8Array) {\n    return Buffer.from(arr.buffer, arr.byteOffset, arr.byteLength);\n  } else {\n    return Buffer.from(arr);\n  }\n};\n\nexport function printSimulate(transactions: Transaction[] | VersionedTransaction[]): string[] {\n  const allBase64: string[] = [];\n  transactions.forEach((transaction) => {\n    if (transaction instanceof Transaction) {\n      if (!transaction.recentBlockhash) transaction.recentBlockhash = TOKEN_PROGRAM_ID.toBase58();\n      if (!transaction.feePayer) transaction.feePayer = Keypair.generate().publicKey;\n    }\n    let serialized = transaction.serialize({ requireAllSignatures: false, verifySignatures: false });\n    if (transaction instanceof VersionedTransaction) serialized = toBuffer(serialized);\n    const base64 = serialized.toString(\"base64\");\n    allBase64.push(base64);\n  });\n  console.log(\"simulate tx string:\", allBase64);\n\n  return allBase64;\n}\n","import { get, set } from \"lodash\";\nimport dayjs from \"dayjs\";\nimport utc from \"dayjs/plugin/utc\";\ndayjs.extend(utc);\n\nexport type ModuleName = \"Common.Api\";\n\nexport enum LogLevel {\n  Error,\n  Warning,\n  Info,\n  Debug,\n}\nexport class Logger {\n  private logLevel: LogLevel;\n  private name: string;\n  constructor(params: { name: string; logLevel?: LogLevel }) {\n    this.logLevel = params.logLevel !== undefined ? params.logLevel : LogLevel.Error;\n    this.name = params.name;\n  }\n\n  set level(logLevel: LogLevel) {\n    this.logLevel = logLevel;\n  }\n  get time(): string {\n    return dayjs().utc().format(\"YYYY/MM/DD HH:mm:ss UTC\");\n  }\n  get moduleName(): string {\n    return this.name;\n  }\n\n  private isLogLevel(level: LogLevel): boolean {\n    return level <= this.logLevel;\n  }\n\n  public error(...props): Logger {\n    if (!this.isLogLevel(LogLevel.Error)) return this;\n    console.error(this.time, this.name, \"sdk logger error\", ...props);\n    return this;\n  }\n\n  public logWithError(...props): Logger {\n    // this.error(...props)\n    const msg = props.map((arg) => (typeof arg === \"object\" ? JSON.stringify(arg) : arg)).join(\", \");\n    throw new Error(msg);\n  }\n\n  public warning(...props): Logger {\n    if (!this.isLogLevel(LogLevel.Warning)) return this;\n    console.warn(this.time, this.name, \"sdk logger warning\", ...props);\n    return this;\n  }\n\n  public info(...props): Logger {\n    if (!this.isLogLevel(LogLevel.Info)) return this;\n    console.info(this.time, this.name, \"sdk logger info\", ...props);\n    return this;\n  }\n\n  public debug(...props): Logger {\n    if (!this.isLogLevel(LogLevel.Debug)) return this;\n    console.debug(this.time, this.name, \"sdk logger debug\", ...props);\n    return this;\n  }\n}\n\nconst moduleLoggers: { [key in ModuleName]?: Logger } = {};\nconst moduleLevels: { [key in ModuleName]?: LogLevel } = {};\n\nexport function createLogger(moduleName: string): Logger {\n  let logger = get(moduleLoggers, moduleName);\n  if (!logger) {\n    // default level is error\n    const logLevel = get(moduleLevels, moduleName);\n\n    logger = new Logger({ name: moduleName, logLevel });\n    set(moduleLoggers, moduleName, logger);\n  }\n\n  return logger;\n}\n\nexport function setLoggerLevel(moduleName: string, level: LogLevel): void {\n  set(moduleLevels, moduleName, level);\n\n  const logger = get(moduleLoggers, moduleName);\n  if (logger) logger.level = level;\n}\n","export enum TxVersion {\n  \"V0\",\n  \"LEGACY\",\n}\n\nexport const InstructionType = {\n  CreateAccount: \"CreateAccount\",\n  InitAccount: \"InitAccount\",\n  CreateATA: \"CreateATA\",\n  CloseAccount: \"CloseAccount\",\n  TransferAmount: \"TransferAmount\",\n  InitMint: \"InitMint\",\n  MintTo: \"MintTo\",\n\n  InitMarket: \"InitMarket\", // create market main ins\n  Util1216OwnerClaim: \"Util1216OwnerClaim\", // owner claim token ins\n\n  SetComputeUnitPrice: \"SetComputeUnitPrice\",\n  SetComputeUnitLimit: \"SetComputeUnitLimit\",\n\n  // CLMM\n  ClmmCreatePool: \"ClmmCreatePool\",\n  ClmmOpenPosition: \"ClmmOpenPosition\",\n  ClmmIncreasePosition: \"ClmmIncreasePosition\",\n  ClmmDecreasePosition: \"ClmmDecreasePosition\",\n  ClmmClosePosition: \"ClmmClosePosition\",\n  ClmmSwapBaseIn: \"ClmmSwapBaseIn\",\n  ClmmSwapBaseOut: \"ClmmSwapBaseOut\",\n  ClmmInitReward: \"ClmmInitReward\",\n  ClmmSetReward: \"ClmmSetReward\",\n  ClmmCollectReward: \"ClmmCollectReward\",\n\n  AmmV4Swap: \"AmmV4Swap\",\n  AmmV4AddLiquidity: \"AmmV4AddLiquidity\",\n  AmmV4RemoveLiquidity: \"AmmV4RemoveLiquidity\",\n  AmmV4SimulatePoolInfo: \"AmmV4SimulatePoolInfo\",\n  AmmV4SwapBaseIn: \"AmmV4SwapBaseIn\",\n  AmmV4SwapBaseOut: \"AmmV4SwapBaseOut\",\n  AmmV4CreatePool: \"AmmV4CreatePool\",\n  AmmV4InitPool: \"AmmV4InitPool\",\n\n  AmmV5AddLiquidity: \"AmmV5AddLiquidity\",\n  AmmV5RemoveLiquidity: \"AmmV5RemoveLiquidity\",\n  AmmV5SimulatePoolInfo: \"AmmV5SimulatePoolInfo\",\n  AmmV5SwapBaseIn: \"AmmV5SwapBaseIn\",\n  AmmV5SwapBaseOut: \"AmmV5SwapBaseOut\",\n\n  RouteSwap: \"RouteSwap\",\n  RouteSwap1: \"RouteSwap1\",\n  RouteSwap2: \"RouteSwap2\",\n\n  FarmV3Deposit: \"FarmV3Deposit\",\n  FarmV3Withdraw: \"FarmV3Withdraw\",\n  FarmV3CreateLedger: \"FarmV3CreateLedger\",\n\n  FarmV5Deposit: \"FarmV5Deposit\",\n  FarmV5Withdraw: \"FarmV5Withdraw\",\n  FarmV5CreateLedger: \"FarmV5CreateLedger\",\n\n  FarmV6Deposit: \"FarmV6Deposit\",\n  FarmV6Withdraw: \"FarmV6Withdraw\",\n  FarmV6Create: \"FarmV6Create\",\n  FarmV6Restart: \"FarmV6Restart\",\n  FarmV6CreatorAddReward: \"FarmV6CreatorAddReward\",\n  FarmV6CreatorWithdraw: \"FarmV6CreatorWithdraw\",\n\n  CpmmCreatePool: \"CpmmCreatePool\",\n  CpmmAddLiquidity: \"CpmmAddLiquidity\",\n  CpmmWithdrawLiquidity: \"CpmmWithdrawLiquidity\",\n  CpmmSwapBaseIn: \"CpmmSwapBaseIn\",\n  CpmmSwapBaseOut: \"CpmmSwapBaseOut\",\n};\n"],"mappings":"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","names":["txUtils_exports","__export","MAX_BASE64_SIZE","addComputeBudget","checkLegacyTxSize","checkV0TxSize","findProgramAddress","forecastTransactionSize","getEpochInfo","getRecentBlockHash","parseSimulateLogToJson","parseSimulateValue","printSimulate","simulateMultipleInstruction","simulateTransaction","toBuffer","__toCommonJS","import_web3","import_spl_token","import_lodash","import_dayjs","import_utc","dayjs","utc","Logger","params","logLevel","dayjs","level","props","msg","arg","moduleLoggers","moduleLevels","createLogger","moduleName","logger","InstructionType","logger","createLogger","MAX_BASE64_SIZE","addComputeBudget","config","ins","insTypes","InstructionType","getRecentBlockHash","connection","_a","_b","forecastTransactionSize","instructions","signers","transaction","simulateMultipleInstruction","keyword","batchRequest","feePayer","transactions","instruction","results","simulateTransaction","i","error","logs","result","filteredLog","log","parseSimulateLogToJson","parseSimulateValue","key","findProgramAddress","seeds","programId","publicKey","nonce","getLatestBlockhash","encodedTransactions","signData","encodedTransaction","batch","keys","args","reqData","itemReqIndex","ii","checkLegacyTxSize","payer","checkV0TxSize","lookupTableAddressAccount","recentBlockhash","messageV0","epochInfoCache","getEpochInfo","data","toBuffer","arr","printSimulate","allBase64","serialized","base64"]}