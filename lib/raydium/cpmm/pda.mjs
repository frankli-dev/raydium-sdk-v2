import{PublicKey as L,ComputeBudgetProgram as z,Transaction as H,TransactionMessage as Y,Keypair as $,VersionedTransaction as J}from"@solana/web3.js";import{TOKEN_PROGRAM_ID as Z}from"@solana/spl-token";import{get as m,set as P}from"lodash";import c from"dayjs";import C from"dayjs/plugin/utc";c.extend(C);var a=class{constructor(e){this.logLevel=e.logLevel!==void 0?e.logLevel:0,this.name=e.name}set level(e){this.logLevel=e}get time(){return c().utc().format("YYYY/MM/DD HH:mm:ss UTC")}get moduleName(){return this.name}isLogLevel(e){return e<=this.logLevel}error(...e){return this.isLogLevel(0)?(console.error(this.time,this.name,"sdk logger error",...e),this):this}logWithError(...e){let r=e.map(i=>typeof i=="object"?JSON.stringify(i):i).join(", ");throw new Error(r)}warning(...e){return this.isLogLevel(1)?(console.warn(this.time,this.name,"sdk logger warning",...e),this):this}info(...e){return this.isLogLevel(2)?(console.info(this.time,this.name,"sdk logger info",...e),this):this}debug(...e){return this.isLogLevel(3)?(console.debug(this.time,this.name,"sdk logger debug",...e),this):this}},l={},w={};function f(t){let e=m(l,t);if(!e){let r=m(w,t);e=new a({name:t,logLevel:r}),P(l,t,e)}return e}var te=f("Raydium_txUtil");function o(t,e){let[r,i]=L.findProgramAddressSync(t,e);return{publicKey:r,nonce:i}}var A=Buffer.from("vault_and_lp_mint_auth_seed","utf8"),S=Buffer.from("amm_config","utf8"),B=Buffer.from("pool","utf8"),K=Buffer.from("pool_lp_mint","utf8"),V=Buffer.from("pool_vault","utf8"),I=Buffer.from("observation","utf8");function v(t){return o([A],t)}function T(t,e){return o([S,_(e)],t)}function E(t,e,r,i){return o([B,e.toBuffer(),r.toBuffer(),i.toBuffer()],t)}function R(t,e){return o([K,e.toBuffer()],t)}function g(t,e,r){return o([V,e.toBuffer(),r.toBuffer()],t)}function x(t,e){return o([I,e.toBuffer()],t)}function _(t){let e=new ArrayBuffer(2);return new DataView(e).setUint16(0,t,!1),new Uint8Array(e)}function oe({programId:t,mintA:e,mintB:r}){let i=T(t,0).publicKey,p=v(t).publicKey,n=E(t,i,e,r).publicKey,d=R(t,n).publicKey,y=g(t,n,e).publicKey,h=g(t,n,r).publicKey,b=x(t,n).publicKey;return{poolId:n,configId:i,authority:p,lpMint:d,vaultA:y,vaultB:h,observationId:b}}export{T as getCpmmPdaAmmConfigId,E as getCpmmPdaPoolId,oe as getCreatePoolKeys,R as getPdaLpMint,x as getPdaObservationId,v as getPdaPoolAuthority,g as getPdaVault};
//# sourceMappingURL=pda.mjs.map