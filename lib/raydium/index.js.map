{"version":3,"sources":["../../src/raydium/index.ts","../../src/raydium/raydium.ts","../../src/api/api.ts","../../src/common/logger.ts","../../src/common/utility.ts","../../src/module/amount.ts","../../src/common/bignumber.ts","../../node_modules/decimal.js/decimal.mjs","../../src/module/token.ts","../../src/common/pubKey.ts","../../src/raydium/token/constant.ts","../../src/module/fraction.ts","../../src/module/formatter.ts","../../src/module/price.ts","../../src/module/currency.ts","../../src/module/percent.ts","../../src/common/txTool/txTool.ts","../../src/common/txTool/txType.ts","../../src/common/txTool/txUtils.ts","../../src/common/txTool/lookupTable.ts","../../src/common/accountInfo.ts","../../src/common/owner.ts","../../src/common/lodash.ts","../../src/common/date.ts","../../src/common/programId.ts","../../src/common/pda.ts","../../src/common/transfer.ts","../../src/api/url.ts","../../src/api/utils.ts","../../src/common/error.ts","../../src/raydium/account/account.ts","../../src/raydium/moduleBase.ts","../../src/raydium/account/instruction.ts","../../src/raydium/account/util.ts","../../src/marshmallow/index.ts","../../src/marshmallow/buffer-layout.ts","../../src/raydium/account/layout.ts","../../node_modules/@noble/hashes/src/_assert.ts","../../node_modules/@noble/hashes/src/utils.ts","../../node_modules/@noble/hashes/src/_md.ts","../../node_modules/@noble/hashes/src/sha256.ts","../../src/raydium/farm/farm.ts","../../src/raydium/farm/config.ts","../../src/raydium/farm/layout.ts","../../src/raydium/farm/instruction.ts","../../src/raydium/farm/pda.ts","../../src/raydium/farm/util.ts","../../src/raydium/liquidity/liquidity.ts","../../src/raydium/token/layout.ts","../../src/raydium/token/utils.ts","../../src/raydium/liquidity/instruction.ts","../../src/raydium/liquidity/layout.ts","../../src/raydium/liquidity/stable.ts","../../src/raydium/clmm/instrument.ts","../../src/raydium/clmm/utils/tick.ts","../../src/raydium/clmm/utils/util.ts","../../src/raydium/clmm/utils/pda.ts","../../src/raydium/clmm/utils/constants.ts","../../src/raydium/clmm/utils/tickQuery.ts","../../src/raydium/clmm/utils/math.ts","../../src/raydium/clmm/utils/pool.ts","../../src/raydium/clmm/utils/tickarrayBitmap.ts","../../src/raydium/clmm/utils/position.ts","../../src/raydium/clmm/layout.ts","../../src/raydium/liquidity/utils.ts","../../src/raydium/liquidity/serum.ts","../../src/raydium/liquidity/constant.ts","../../src/raydium/clmm/clmm.ts","../../src/raydium/cpmm/cpmm.ts","../../src/raydium/cpmm/pda.ts","../../src/raydium/cpmm/instruction.ts","../../src/raydium/cpmm/layout.ts","../../src/raydium/tradeV2/trade.ts","../../src/raydium/utils1216/utils1216.ts","../../src/raydium/marketV2/createMarket.ts","../../src/raydium/marketV2/instrument.ts","../../src/raydium/marketV2/layout.ts","../../src/raydium/ido/ido.ts","../../src/raydium/ido/instruction.ts","../../src/raydium/ido/layout.ts","../../src/raydium/token/token.ts","../../src/raydium/tradeV2/instrument.ts","../../src/raydium/cpmm/curve/fee.ts","../../src/raydium/cpmm/curve/constantProduct.ts","../../src/raydium/cpmm/curve/calculator.ts","../../src/raydium/serum/id.ts","../../src/raydium/serum/layout.ts","../../src/raydium/serum/serum.ts","../../src/raydium/type.ts"],"sourcesContent":["export * from \"./raydium\";\nexport * from \"./account\";\nexport * from \"./farm\";\nexport * from \"./token\";\nexport * from \"./tradeV2\";\nexport * from \"./clmm\";\nexport * from \"./cpmm\";\nexport * from \"./serum\";\nexport * from \"./liquidity\";\nexport * from \"./utils1216\";\nexport * from \"./marketV2\";\nexport * from \"./ido\";\nexport * from \"./type\";\n","import { Connection, Keypair, PublicKey, EpochInfo } from \"@solana/web3.js\";\nimport { merge } from \"lodash\";\n\nimport {\n  Api,\n  API_URL_CONFIG,\n  ApiV3TokenRes,\n  ApiV3Token,\n  JupTokenType,\n  AvailabilityCheckAPI3,\n} from \"../api\";\nimport { EMPTY_CONNECTION, EMPTY_OWNER } from \"../common/error\";\nimport { createLogger, Logger } from \"../common/logger\";\nimport { Owner } from \"../common/owner\";\nimport { Cluster } from \"../solana\";\n\nimport Account, { TokenAccountDataProp } from \"./account/account\";\nimport Farm from \"./farm/farm\";\nimport Liquidity from \"./liquidity/liquidity\";\nimport { Clmm } from \"./clmm\";\nimport Cpmm from \"./cpmm/cpmm\";\nimport TradeV2 from \"./tradeV2/trade\";\nimport Utils1216 from \"./utils1216\";\nimport MarketV2 from \"./marketV2\";\nimport Ido from \"./ido\";\n\nimport TokenModule from \"./token/token\";\nimport { SignAllTransactions } from \"./type\";\n\nexport interface RaydiumLoadParams\n  extends TokenAccountDataProp,\n    Omit<RaydiumApiBatchRequestParams, \"api\"> {\n  /* ================= solana ================= */\n  // solana web3 connection\n  connection: Connection;\n  // solana cluster/network/env\n  cluster?: Cluster;\n  // user public key\n  owner?: PublicKey | Keypair;\n  /* ================= api ================= */\n  // api request interval in ms, -1 means never request again, 0 means always use fresh data, default is 5 mins (5 * 60 * 1000)\n  apiRequestInterval?: number;\n  // api request timeout in ms, default is 10 secs (10 * 1000)\n  apiRequestTimeout?: number;\n  apiCacheTime?: number;\n  signAllTransactions?: SignAllTransactions;\n  urlConfigs?: API_URL_CONFIG;\n  logRequests?: boolean;\n  logCount?: number;\n  jupTokenType?: JupTokenType;\n  disableFeatureCheck?: boolean;\n  disableLoadToken?: boolean;\n}\n\nexport interface RaydiumApiBatchRequestParams {\n  api: Api;\n  defaultChainTimeOffset?: number;\n  defaultChainTime?: number;\n}\n\nexport type RaydiumConstructorParams = Required<RaydiumLoadParams> &\n  RaydiumApiBatchRequestParams;\n\ninterface DataBase<T> {\n  fetched: number;\n  data: T;\n  extInfo?: Record<string, any>;\n}\ninterface ApiData {\n  tokens?: DataBase<ApiV3Token[]>;\n\n  // v3 data\n  tokenList?: DataBase<ApiV3TokenRes>;\n  jupTokenList?: {\n    [JupTokenType.ALL]?: DataBase<ApiV3Token[]>;\n    [JupTokenType.Strict]?: DataBase<ApiV3Token[]>;\n  };\n}\n\nexport class Raydium {\n  public cluster: Cluster;\n  public farm: Farm;\n  public account: Account;\n  public liquidity: Liquidity;\n  public clmm: Clmm;\n  public cpmm: Cpmm;\n  public tradeV2: TradeV2;\n  public utils1216: Utils1216;\n  public marketV2: MarketV2;\n  public ido: Ido;\n  public token: TokenModule;\n  public rawBalances: Map<string, string> = new Map();\n  public apiData: ApiData;\n  public availability: Partial<AvailabilityCheckAPI3>;\n\n  private _connection: Connection;\n  private _owner: Owner | undefined;\n  public api: Api;\n  private _apiCacheTime: number;\n  private _signAllTransactions?: SignAllTransactions;\n  private logger: Logger;\n  private _chainTime?: {\n    fetched: number;\n    value: {\n      chainTime: number;\n      offset: number;\n    };\n  };\n  private _epochInfo?: {\n    fetched: number;\n    value: EpochInfo;\n  };\n\n  constructor(config: RaydiumConstructorParams) {\n    const {\n      connection,\n      cluster,\n      owner,\n      api,\n      defaultChainTime,\n      defaultChainTimeOffset,\n      apiCacheTime,\n    } = config;\n\n    this._connection = connection;\n    this.cluster = cluster || \"mainnet\";\n    this._owner = owner ? new Owner(owner) : undefined;\n    this._signAllTransactions = config.signAllTransactions;\n\n    this.api = api;\n    this._apiCacheTime = apiCacheTime || 5 * 60 * 1000;\n    this.logger = createLogger(\"Raydium\");\n    this.farm = new Farm({ scope: this, moduleName: \"Raydium_Farm\" });\n    this.account = new Account({\n      scope: this,\n      moduleName: \"Raydium_Account\",\n      tokenAccounts: config.tokenAccounts,\n      tokenAccountRawInfos: config.tokenAccountRawInfos,\n    });\n    this.liquidity = new Liquidity({\n      scope: this,\n      moduleName: \"Raydium_LiquidityV2\",\n    });\n    this.token = new TokenModule({\n      scope: this,\n      moduleName: \"Raydium_tokenV2\",\n    });\n    this.tradeV2 = new TradeV2({ scope: this, moduleName: \"Raydium_tradeV2\" });\n    this.clmm = new Clmm({ scope: this, moduleName: \"Raydium_clmm\" });\n    this.cpmm = new Cpmm({ scope: this, moduleName: \"Raydium_cpmm\" });\n    this.utils1216 = new Utils1216({\n      scope: this,\n      moduleName: \"Raydium_utils1216\",\n    });\n    this.marketV2 = new MarketV2({\n      scope: this,\n      moduleName: \"Raydium_marketV2\",\n    });\n    this.ido = new Ido({ scope: this, moduleName: \"Raydium_ido\" });\n\n    this.availability = {};\n    const now = new Date().getTime();\n    this.apiData = {};\n\n    if (defaultChainTimeOffset)\n      this._chainTime = {\n        fetched: now,\n        value: {\n          chainTime: defaultChainTime || Date.now() - defaultChainTimeOffset,\n          offset: defaultChainTimeOffset,\n        },\n      };\n  }\n\n  static async load(config: RaydiumLoadParams): Promise<Raydium> {\n    const custom: Required<RaydiumLoadParams> = merge(\n      // default\n      {\n        cluster: \"mainnet\",\n        owner: null,\n        apiRequestInterval: 5 * 60 * 1000,\n        apiRequestTimeout: 10 * 1000,\n        apiCacheTime: 5 * 60 * 1000,\n        signAllTransactions: undefined,\n        urlConfigs: {},\n        logRequests: false,\n        logCount: 10,\n        jupTokenType: JupTokenType.Strict,\n        disableFeatureCheck: false,\n        disableLoadToken: false,\n        tokenAccounts: [],\n        tokenAccountRawInfos: [],\n        defaultChainTimeOffset: undefined,\n        defaultChainTime: undefined,\n      },\n      config\n    );\n    const { cluster, apiRequestTimeout, logCount, logRequests, urlConfigs } =\n      custom;\n\n    const api = new Api({\n      cluster,\n      timeout: apiRequestTimeout,\n      urlConfigs,\n      logCount,\n      logRequests,\n    });\n    const raydium = new Raydium({\n      ...custom,\n      api,\n    });\n\n    await raydium.fetchAvailabilityStatus(config.disableFeatureCheck ?? true);\n    if (!config.disableLoadToken)\n      await raydium.token.load({\n        type: config.jupTokenType,\n      });\n\n    return raydium;\n  }\n\n  get owner(): Owner | undefined {\n    return this._owner;\n  }\n  get ownerPubKey(): PublicKey {\n    if (!this._owner) throw new Error(EMPTY_OWNER);\n    return this._owner.publicKey;\n  }\n  public setOwner(owner?: PublicKey | Keypair): Raydium {\n    this._owner = owner ? new Owner(owner) : undefined;\n    return this;\n  }\n  get connection(): Connection {\n    if (!this._connection) throw new Error(EMPTY_CONNECTION);\n    return this._connection;\n  }\n  public setConnection(connection: Connection): Raydium {\n    this._connection = connection;\n    return this;\n  }\n  get signAllTransactions(): SignAllTransactions | undefined {\n    return this._signAllTransactions;\n  }\n  public setSignAllTransactions(\n    signAllTransactions?: SignAllTransactions\n  ): Raydium {\n    this._signAllTransactions = signAllTransactions;\n    return this;\n  }\n\n  public checkOwner(): void {\n    if (!this.owner) {\n      this.logger.error(EMPTY_OWNER);\n      throw new Error(EMPTY_OWNER);\n    }\n  }\n\n  private isCacheInvalidate(time: number): boolean {\n    return new Date().getTime() - time > this._apiCacheTime;\n  }\n\n  public async fetchChainTime(): Promise<void> {\n    try {\n      const data = await this.api.getChainTimeOffset();\n      this._chainTime = {\n        fetched: Date.now(),\n        value: {\n          chainTime: Date.now() + data.offset * 1000,\n          offset: data.offset * 1000,\n        },\n      };\n    } catch {\n      this._chainTime = undefined;\n    }\n  }\n\n  public async fetchV3TokenList(forceUpdate?: boolean): Promise<ApiV3TokenRes> {\n    if (\n      this.apiData.tokenList &&\n      !this.isCacheInvalidate(this.apiData.tokenList.fetched) &&\n      !forceUpdate\n    )\n      return this.apiData.tokenList.data;\n    const raydiumList = await this.api.getTokenList();\n    const dataObject = {\n      fetched: Date.now(),\n      data: raydiumList,\n    };\n    this.apiData.tokenList = dataObject;\n\n    return dataObject.data;\n  }\n\n  public async fetchJupTokenList(\n    type: JupTokenType,\n    forceUpdate?: boolean\n  ): Promise<ApiV3Token[]> {\n    const prevFetched = this.apiData.jupTokenList?.[type];\n    if (\n      prevFetched &&\n      !this.isCacheInvalidate(prevFetched.fetched) &&\n      !forceUpdate\n    )\n      return prevFetched.data;\n    const jupList = await this.api.getJupTokenList(type);\n    this.apiData.jupTokenList = {\n      ...this.apiData.jupTokenList,\n      [type]: {\n        fetched: Date.now(),\n        data: jupList,\n      },\n    };\n\n    return this.apiData.jupTokenList[type]!.data;\n  }\n\n  get chainTimeData(): { offset: number; chainTime: number } | undefined {\n    return this._chainTime?.value;\n  }\n\n  public async chainTimeOffset(): Promise<number> {\n    if (\n      this._chainTime &&\n      Date.now() - this._chainTime.fetched <= 1000 * 60 * 5\n    )\n      return this._chainTime.value.offset;\n    await this.fetchChainTime();\n    return this._chainTime?.value.offset || 0;\n  }\n\n  public async currentBlockChainTime(): Promise<number> {\n    if (\n      this._chainTime &&\n      Date.now() - this._chainTime.fetched <= 1000 * 60 * 5\n    )\n      return this._chainTime.value.chainTime;\n    await this.fetchChainTime();\n    return this._chainTime?.value.chainTime || Date.now();\n  }\n\n  public async fetchEpochInfo(): Promise<EpochInfo> {\n    if (this._epochInfo && Date.now() - this._epochInfo.fetched <= 1000 * 30)\n      return this._epochInfo.value;\n    this._epochInfo = {\n      fetched: Date.now(),\n      value: await this.connection.getEpochInfo(),\n    };\n    return this._epochInfo.value;\n  }\n\n  public async fetchAvailabilityStatus(\n    skipCheck?: boolean\n  ): Promise<Partial<AvailabilityCheckAPI3>> {\n    if (skipCheck) return {};\n    try {\n      const data = await this.api.fetchAvailabilityStatus();\n      const isAllDisabled = data.all === false;\n      this.availability = {\n        all: data.all,\n        swap: isAllDisabled ? false : data.swap,\n        createConcentratedPosition: isAllDisabled\n          ? false\n          : data.createConcentratedPosition,\n        addConcentratedPosition: isAllDisabled\n          ? false\n          : data.addConcentratedPosition,\n        addStandardPosition: isAllDisabled ? false : data.addStandardPosition,\n        removeConcentratedPosition: isAllDisabled\n          ? false\n          : data.removeConcentratedPosition,\n        removeStandardPosition: isAllDisabled\n          ? false\n          : data.removeStandardPosition,\n        addFarm: isAllDisabled ? false : data.addFarm,\n        removeFarm: isAllDisabled ? false : data.removeFarm,\n      };\n      return data;\n    } catch {\n      return {};\n    }\n  }\n}\n","import axios, { AxiosInstance } from \"axios\";\n\nimport { createLogger, sleep } from \"../common\";\nimport { Cluster } from \"../solana\";\n\nimport {\n  ApiClmmConfigInfo,\n  ApiV3Token,\n  FetchPoolParams,\n  PoolsApiReturn,\n  ApiV3PoolInfoItem,\n  JupTokenType,\n  PoolKeys,\n  FormatFarmInfoOut,\n  FormatFarmKeyOut,\n  AvailabilityCheckAPI3,\n  PoolFetchType,\n} from \"./type\";\nimport { API_URLS, API_URL_CONFIG } from \"./url\";\nimport { updateReqHistory } from \"./utils\";\nimport { PublicKey } from \"@solana/web3.js\";\nimport { solToWSol } from \"../common\";\n\nconst logger = createLogger(\"Raydium_Api\");\nconst poolKeysCache: Map<string, PoolKeys> = new Map();\n\nexport async function endlessRetry<T>(name: string, call: () => Promise<T>, interval = 1000): Promise<T> {\n  let result: T | undefined;\n\n  while (result == undefined) {\n    try {\n      logger.debug(`Request ${name} through endlessRetry`);\n      result = await call();\n    } catch (err) {\n      logger.error(`Request ${name} failed, retry after ${interval} ms`, err);\n      await sleep(interval);\n    }\n  }\n\n  return result;\n}\n\nexport interface ApiProps {\n  cluster: Cluster;\n  timeout: number;\n  logRequests?: boolean;\n  logCount?: number;\n  urlConfigs?: API_URL_CONFIG;\n}\n\nexport class Api {\n  public cluster: Cluster;\n\n  public api: AxiosInstance;\n  public logCount: number;\n\n  public urlConfigs: API_URL_CONFIG;\n\n  constructor({ cluster, timeout, logRequests, logCount, urlConfigs }: ApiProps) {\n    this.cluster = cluster;\n    this.urlConfigs = urlConfigs || {};\n    this.logCount = logCount || 1000;\n\n    this.api = axios.create({ baseURL: this.urlConfigs.BASE_HOST || API_URLS.BASE_HOST, timeout });\n\n    this.api.interceptors.request.use(\n      (config) => {\n        // before request\n        const { method, baseURL, url } = config;\n\n        logger.debug(`${method?.toUpperCase()} ${baseURL}${url}`);\n\n        return config;\n      },\n      (error) => {\n        // request error\n        logger.error(`Request failed`);\n\n        return Promise.reject(error);\n      },\n    );\n    this.api.interceptors.response.use(\n      (response) => {\n        // 2xx\n        const { config, data, status } = response;\n        const { method, baseURL, url } = config;\n\n        if (logRequests) {\n          updateReqHistory({\n            status,\n            url: `${baseURL}${url}`,\n            params: config.params,\n            data,\n            logCount: this.logCount,\n          });\n        }\n\n        logger.debug(`${method?.toUpperCase()} ${baseURL}${url}  ${status}`);\n\n        return data;\n      },\n      (error) => {\n        // https://axios-http.com/docs/handling_errors\n        // not 2xx\n        const { config, response = {} } = error;\n        const { status } = response;\n        const { method, baseURL, url } = config;\n\n        if (logRequests) {\n          updateReqHistory({\n            status,\n            url: `${baseURL}${url}`,\n            params: config.params,\n            data: error.message,\n            logCount: this.logCount,\n          });\n        }\n\n        logger.error(`${method.toUpperCase()} ${baseURL}${url} ${status || error.message}`);\n\n        return Promise.reject(error);\n      },\n    );\n  }\n\n  async getClmmConfigs(): Promise<ApiClmmConfigInfo[]> {\n    const res = await this.api.get(this.urlConfigs.CLMM_CONFIG || API_URLS.CLMM_CONFIG);\n    return res.data;\n  }\n\n  async getClmmPoolLines(poolId: string): Promise<{ price: string; liquidity: string }[]> {\n    const res = await this.api.get(\n      `${this.urlConfigs.POOL_LIQUIDITY_LINE || API_URLS.POOL_LIQUIDITY_LINE}?pool_id=${poolId}`,\n    );\n    return res.data;\n  }\n\n  async getBlockSlotCountForSecond(endpointUrl?: string): Promise<number> {\n    if (!endpointUrl) return 2;\n    const res: {\n      id: string;\n      jsonrpc: string;\n      result: { numSlots: number; numTransactions: number; samplePeriodSecs: number; slot: number }[];\n    } = await this.api.post(endpointUrl, {\n      id: \"getRecentPerformanceSamples\",\n      jsonrpc: \"2.0\",\n      method: \"getRecentPerformanceSamples\",\n      params: [4],\n    });\n    const slotList = res.result.map((data) => data.numSlots);\n    return slotList.reduce((a, b) => a + b, 0) / slotList.length / 60;\n  }\n\n  async getChainTimeOffset(): Promise<{ offset: number }> {\n    const res = await this.api.get(this.urlConfigs.CHAIN_TIME || API_URLS.CHAIN_TIME);\n    return res.data;\n  }\n\n  async getRpcs(): Promise<{\n    rpcs: { batch: boolean; name: string; url: string; weight: number }[];\n    strategy: string;\n  }> {\n    return this.api.get(this.urlConfigs.RPCS || API_URLS.RPCS);\n  }\n\n  async getTokenList(): Promise<{ mintList: ApiV3Token[]; blacklist: ApiV3Token[]; whiteList: string[] }> {\n    const res = await this.api.get(this.urlConfigs.TOKEN_LIST || API_URLS.TOKEN_LIST);\n    return res.data;\n  }\n\n  async getJupTokenList(type?: JupTokenType): Promise<ApiV3Token[]> {\n    return this.api.get(\"/\", {\n      baseURL: (this.urlConfigs.JUP_TOKEN_LIST || API_URLS.JUP_TOKEN_LIST).replace(\"{type}\", type || JupTokenType.ALL),\n    });\n  }\n\n  async getTokenInfo(mint: (string | PublicKey)[]): Promise<ApiV3Token[]> {\n    const res = await this.api.get(\n      (this.urlConfigs.MINT_INFO_ID || API_URLS.MINT_INFO_ID) + `?mints=${mint.map((m) => m.toString()).join(\",\")}`,\n    );\n    return res.data;\n  }\n\n  async getPoolList(props: FetchPoolParams = {}): Promise<PoolsApiReturn> {\n    const { type = \"all\", sort = \"liquidity\", order = \"desc\", page = 0, pageSize = 100 } = props;\n    const res = await this.api.get<PoolsApiReturn>(\n      (this.urlConfigs.POOL_LIST || API_URLS.POOL_LIST) +\n        `?poolType=${type}&poolSortField=${sort}&sortType=${order}&page=${page}&pageSize=${pageSize}`,\n    );\n    return res.data;\n  }\n\n  async fetchPoolById(props: { ids: string }): Promise<ApiV3PoolInfoItem[]> {\n    const { ids } = props;\n    const res = await this.api.get((this.urlConfigs.POOL_SEARCH_BY_ID || API_URLS.POOL_SEARCH_BY_ID) + `?ids=${ids}`);\n    return res.data;\n  }\n\n  async fetchPoolKeysById(props: { idList: string[] }): Promise<PoolKeys[]> {\n    const { idList } = props;\n\n    const cacheList: PoolKeys[] = [];\n\n    const readyList = idList.filter((poolId) => {\n      if (poolKeysCache.has(poolId)) {\n        cacheList.push(poolKeysCache.get(poolId)!);\n        return false;\n      }\n      return true;\n    });\n\n    let data: PoolKeys[] = [];\n    if (readyList.length) {\n      const res = await this.api.get<PoolKeys[]>(\n        (this.urlConfigs.POOL_KEY_BY_ID || API_URLS.POOL_KEY_BY_ID) + `?ids=${readyList.join(\",\")}`,\n      );\n      data = res.data.filter(Boolean);\n      data.forEach((poolKey) => {\n        poolKeysCache.set(poolKey.id, poolKey);\n      });\n    }\n\n    return cacheList.concat(data);\n  }\n\n  async fetchPoolByMints(\n    props: {\n      mint1: string | PublicKey;\n      mint2?: string | PublicKey;\n    } & Omit<FetchPoolParams, \"pageSize\">,\n  ): Promise<ApiV3PoolInfoItem[]> {\n    const {\n      mint1: propMint1,\n      mint2: propMint2,\n      type = PoolFetchType.All,\n      sort = \"default\",\n      order = \"desc\",\n      page = 1,\n    } = props;\n\n    const [mint1, mint2] = [\n      propMint1 ? solToWSol(propMint1).toBase58() : propMint1,\n      propMint2 && propMint2 !== \"undefined\" ? solToWSol(propMint2).toBase58() : \"\",\n    ];\n    const [baseMint, quoteMint] = mint2 && mint1 > mint2 ? [mint2, mint1] : [mint1, mint2];\n\n    console.log(\n      123123555,\n      `?mint1=${baseMint}&mint2=${quoteMint}&poolType=${type}&poolSortField=${sort}&sortType=${order}&pageSize=100&page=${page}`,\n    );\n\n    const res = await this.api.get(\n      (this.urlConfigs.POOL_SEARCH_MINT || API_URLS.POOL_SEARCH_MINT) +\n        `?mint1=${baseMint}&mint2=${quoteMint}&poolType=${type}&poolSortField=${sort}&sortType=${order}&pageSize=100&page=${page}`,\n    );\n    return res.data;\n  }\n\n  async fetchFarmInfoById(props: { ids: string }): Promise<FormatFarmInfoOut[]> {\n    const { ids } = props;\n\n    const res = await this.api.get<FormatFarmInfoOut[]>(\n      (this.urlConfigs.FARM_INFO || API_URLS.FARM_INFO) + `?ids=${ids}`,\n    );\n    return res.data;\n  }\n\n  async fetchFarmKeysById(props: { ids: string }): Promise<FormatFarmKeyOut[]> {\n    const { ids } = props;\n\n    const res = await this.api.get<FormatFarmKeyOut[]>(\n      (this.urlConfigs.FARM_KEYS || API_URLS.FARM_KEYS) + `?ids=${ids}`,\n    );\n    return res.data;\n  }\n\n  async fetchAvailabilityStatus(): Promise<AvailabilityCheckAPI3> {\n    const res = await this.api.get<AvailabilityCheckAPI3>(\n      this.urlConfigs.CHECK_AVAILABILITY || API_URLS.CHECK_AVAILABILITY,\n    );\n    return res.data;\n  }\n}\n","import { get, set } from \"lodash\";\nimport dayjs from \"dayjs\";\nimport utc from \"dayjs/plugin/utc\";\ndayjs.extend(utc);\n\nexport type ModuleName = \"Common.Api\";\n\nexport enum LogLevel {\n  Error,\n  Warning,\n  Info,\n  Debug,\n}\nexport class Logger {\n  private logLevel: LogLevel;\n  private name: string;\n  constructor(params: { name: string; logLevel?: LogLevel }) {\n    this.logLevel = params.logLevel !== undefined ? params.logLevel : LogLevel.Error;\n    this.name = params.name;\n  }\n\n  set level(logLevel: LogLevel) {\n    this.logLevel = logLevel;\n  }\n  get time(): string {\n    return dayjs().utc().format(\"YYYY/MM/DD HH:mm:ss UTC\");\n  }\n  get moduleName(): string {\n    return this.name;\n  }\n\n  private isLogLevel(level: LogLevel): boolean {\n    return level <= this.logLevel;\n  }\n\n  public error(...props): Logger {\n    if (!this.isLogLevel(LogLevel.Error)) return this;\n    console.error(this.time, this.name, \"sdk logger error\", ...props);\n    return this;\n  }\n\n  public logWithError(...props): Logger {\n    // this.error(...props)\n    const msg = props.map((arg) => (typeof arg === \"object\" ? JSON.stringify(arg) : arg)).join(\", \");\n    throw new Error(msg);\n  }\n\n  public warning(...props): Logger {\n    if (!this.isLogLevel(LogLevel.Warning)) return this;\n    console.warn(this.time, this.name, \"sdk logger warning\", ...props);\n    return this;\n  }\n\n  public info(...props): Logger {\n    if (!this.isLogLevel(LogLevel.Info)) return this;\n    console.info(this.time, this.name, \"sdk logger info\", ...props);\n    return this;\n  }\n\n  public debug(...props): Logger {\n    if (!this.isLogLevel(LogLevel.Debug)) return this;\n    console.debug(this.time, this.name, \"sdk logger debug\", ...props);\n    return this;\n  }\n}\n\nconst moduleLoggers: { [key in ModuleName]?: Logger } = {};\nconst moduleLevels: { [key in ModuleName]?: LogLevel } = {};\n\nexport function createLogger(moduleName: string): Logger {\n  let logger = get(moduleLoggers, moduleName);\n  if (!logger) {\n    // default level is error\n    const logLevel = get(moduleLevels, moduleName);\n\n    logger = new Logger({ name: moduleName, logLevel });\n    set(moduleLoggers, moduleName, logger);\n  }\n\n  return logger;\n}\n\nexport function setLoggerLevel(moduleName: string, level: LogLevel): void {\n  set(moduleLevels, moduleName, level);\n\n  const logger = get(moduleLoggers, moduleName);\n  if (logger) logger.level = level;\n}\n","import { PublicKey } from \"@solana/web3.js\";\nimport BN from \"bn.js\";\n\nimport { Fraction, Percent, Price, Token, TokenAmount } from \"../module\";\nimport { ReplaceType } from \"../raydium/type\";\n\nimport { tryParsePublicKey } from \"./pubKey\";\n\nexport async function sleep(ms: number): Promise<void> {\n  new Promise((resolve) => setTimeout(resolve, ms));\n}\n\nexport function getTimestamp(): number {\n  return new Date().getTime();\n}\n\nexport function notInnerObject(v: unknown): v is Record<string, any> {\n  return (\n    typeof v === \"object\" &&\n    v !== null &&\n    ![Token, TokenAmount, PublicKey, Fraction, BN, Price, Percent].some((o) => typeof o === \"object\" && v instanceof o)\n  );\n}\n\nexport function jsonInfo2PoolKeys<T>(jsonInfo: T): ReplaceType<T, string, PublicKey> {\n  // @ts-expect-error no need type for inner code\n  return typeof jsonInfo === \"string\"\n    ? tryParsePublicKey(jsonInfo)\n    : Array.isArray(jsonInfo)\n    ? jsonInfo.map((k) => jsonInfo2PoolKeys(k))\n    : notInnerObject(jsonInfo)\n    ? Object.fromEntries(Object.entries(jsonInfo).map(([k, v]) => [k, jsonInfo2PoolKeys(v)]))\n    : jsonInfo;\n}\n","import _Big from \"big.js\";\nimport BN from \"bn.js\";\n\nimport { BigNumberish, BN_TEN, parseBigNumberish, Rounding } from \"../common/bignumber\";\nimport { createLogger, Logger } from \"../common/logger\";\n\nimport toFormat, { WrappedBig } from \"./formatter\";\nimport { Fraction } from \"./fraction\";\nimport { Token } from \"./token\";\nimport { Currency } from \"./currency\";\n\nconst logger = createLogger(\"Raydium_amount\");\n\nconst Big = toFormat(_Big);\ntype Big = WrappedBig;\n\nexport function splitNumber(num: string, decimals: number): [string, string] {\n  let integral = \"0\";\n  let fractional = \"0\";\n\n  if (num.includes(\".\")) {\n    const splited = num.split(\".\");\n    if (splited.length === 2) {\n      [integral, fractional] = splited;\n      fractional = fractional.padEnd(decimals, \"0\");\n    } else {\n      logger.logWithError(`invalid number string, num: ${num}`);\n    }\n  } else {\n    integral = num;\n  }\n\n  // fix decimals is 0\n  return [integral, fractional.slice(0, decimals) || fractional];\n}\n\nexport class TokenAmount extends Fraction {\n  public readonly token: Token;\n  protected logger: Logger;\n\n  public constructor(token: Token, amount: BigNumberish, isRaw = true, name?: string) {\n    let parsedAmount = new BN(0);\n    const multiplier = BN_TEN.pow(new BN(token.decimals));\n\n    if (isRaw) {\n      parsedAmount = parseBigNumberish(amount);\n    } else {\n      let integralAmount = new BN(0);\n      let fractionalAmount = new BN(0);\n\n      // parse fractional string\n      if (typeof amount === \"string\" || typeof amount === \"number\" || typeof amount === \"bigint\") {\n        const [integral, fractional] = splitNumber(amount.toString(), token.decimals);\n        integralAmount = parseBigNumberish(integral);\n        fractionalAmount = parseBigNumberish(fractional);\n      }\n\n      integralAmount = integralAmount.mul(multiplier);\n      parsedAmount = integralAmount.add(fractionalAmount);\n    }\n\n    super(parsedAmount, multiplier);\n    this.logger = createLogger(name || \"TokenAmount\");\n    this.token = token;\n  }\n\n  public get raw(): BN {\n    return this.numerator;\n  }\n  public isZero(): boolean {\n    return this.raw.isZero();\n  }\n  public gt(other: TokenAmount): boolean {\n    if (!this.token.equals(other.token)) this.logger.logWithError(\"gt token not equals\");\n    return this.raw.gt(other.raw);\n  }\n\n  /**\n   * a less than b\n   */\n  public lt(other: TokenAmount): boolean {\n    if (!this.token.equals(other.token)) this.logger.logWithError(\"lt token not equals\");\n    return this.raw.lt(other.raw);\n  }\n\n  public add(other: TokenAmount): TokenAmount {\n    if (!this.token.equals(other.token)) this.logger.logWithError(\"add token not equals\");\n    return new TokenAmount(this.token, this.raw.add(other.raw));\n  }\n\n  public subtract(other: TokenAmount): TokenAmount {\n    if (!this.token.equals(other.token)) this.logger.logWithError(\"sub token not equals\");\n    return new TokenAmount(this.token, this.raw.sub(other.raw));\n  }\n\n  public toSignificant(\n    significantDigits = this.token.decimals,\n    format?: object,\n    rounding: Rounding = Rounding.ROUND_DOWN,\n  ): string {\n    return super.toSignificant(significantDigits, format, rounding);\n  }\n\n  /**\n   * To fixed\n   *\n   * @example\n   * ```\n   * 1 -> 1.000000000\n   * 1.234 -> 1.234000000\n   * 1.123456789876543 -> 1.123456789\n   * ```\n   */\n  public toFixed(\n    decimalPlaces = this.token.decimals,\n    format?: object,\n    rounding: Rounding = Rounding.ROUND_DOWN,\n  ): string {\n    if (decimalPlaces > this.token.decimals) this.logger.logWithError(\"decimals overflow\");\n    return super.toFixed(decimalPlaces, format, rounding);\n  }\n\n  /**\n   * To exact\n   *\n   * @example\n   * ```\n   * 1 -> 1\n   * 1.234 -> 1.234\n   * 1.123456789876543 -> 1.123456789\n   * ```\n   */\n  public toExact(format: object = { groupSeparator: \"\" }): string {\n    Big.DP = this.token.decimals;\n    return new Big(this.numerator.toString()).div(this.denominator.toString()).toFormat(format);\n  }\n}\n\nexport class CurrencyAmount extends Fraction {\n  public readonly currency: Currency;\n  protected logger: Logger;\n\n  public constructor(currency: Currency, amount: BigNumberish, isRaw = true, name?: string) {\n    let parsedAmount = new BN(0);\n    const multiplier = BN_TEN.pow(new BN(currency.decimals));\n\n    if (isRaw) {\n      parsedAmount = parseBigNumberish(amount);\n    } else {\n      let integralAmount = new BN(0);\n      let fractionalAmount = new BN(0);\n\n      // parse fractional string\n      if (typeof amount === \"string\" || typeof amount === \"number\" || typeof amount === \"bigint\") {\n        const [integral, fractional] = splitNumber(amount.toString(), currency.decimals);\n        integralAmount = parseBigNumberish(integral);\n        fractionalAmount = parseBigNumberish(fractional);\n      }\n\n      integralAmount = integralAmount.mul(multiplier);\n      parsedAmount = integralAmount.add(fractionalAmount);\n    }\n\n    super(parsedAmount, multiplier);\n    this.logger = createLogger(name || \"TokenAmount\");\n    this.currency = currency;\n  }\n\n  public get raw(): BN {\n    return this.numerator;\n  }\n\n  public isZero(): boolean {\n    return this.raw.isZero();\n  }\n\n  /**\n   * a greater than b\n   */\n  public gt(other: CurrencyAmount): boolean {\n    if (!this.currency.equals(other.currency)) this.logger.logWithError(\"gt currency not equals\");\n    return this.raw.gt(other.raw);\n  }\n\n  /**\n   * a less than b\n   */\n  public lt(other: CurrencyAmount): boolean {\n    if (!this.currency.equals(other.currency)) this.logger.logWithError(\"lt currency not equals\");\n    return this.raw.lt(other.raw);\n  }\n\n  public add(other: CurrencyAmount): CurrencyAmount {\n    if (!this.currency.equals(other.currency)) this.logger.logWithError(\"add currency not equals\");\n    return new CurrencyAmount(this.currency, this.raw.add(other.raw));\n  }\n\n  public sub(other: CurrencyAmount): CurrencyAmount {\n    if (!this.currency.equals(other.currency)) this.logger.logWithError(\"sub currency not equals\");\n    return new CurrencyAmount(this.currency, this.raw.sub(other.raw));\n  }\n\n  public toSignificant(\n    significantDigits = this.currency.decimals,\n    format?: object,\n    rounding: Rounding = Rounding.ROUND_DOWN,\n  ): string {\n    return super.toSignificant(significantDigits, format, rounding);\n  }\n\n  /**\n   * To fixed\n   *\n   * @example\n   * ```\n   * 1 -> 1.000000000\n   * 1.234 -> 1.234000000\n   * 1.123456789876543 -> 1.123456789\n   * ```\n   */\n  public toFixed(\n    decimalPlaces = this.currency.decimals,\n    format?: object,\n    rounding: Rounding = Rounding.ROUND_DOWN,\n  ): string {\n    if (decimalPlaces > this.currency.decimals) this.logger.logWithError(\"decimals overflow\");\n\n    return super.toFixed(decimalPlaces, format, rounding);\n  }\n\n  /**\n   * To exact\n   *\n   * @example\n   * ```\n   * 1 -> 1\n   * 1.234 -> 1.234\n   * 1.123456789876543 -> 1.123456789\n   * ```\n   */\n  public toExact(format: object = { groupSeparator: \"\" }): string {\n    Big.DP = this.currency.decimals;\n    return new Big(this.numerator.toString()).div(this.denominator.toString()).toFormat(format);\n  }\n}\n","import BN from \"bn.js\";\nimport Decimal from \"decimal.js\";\nimport { Token } from \"../module/token\";\nimport { Price } from \"../module/price\";\nimport { Currency } from \"../module/currency\";\nimport { TokenAmount, CurrencyAmount } from \"../module/amount\";\nimport { Fraction } from \"../module/fraction\";\nimport { Percent } from \"../module/percent\";\nimport { SplToken, TokenJson } from \"../raydium/token/type\";\nimport { ReplaceType } from \"../raydium/type\";\nimport { createLogger } from \"./logger\";\nimport { mul } from \"./fractionUtil\";\nimport { notInnerObject } from \"./utility\";\n\nexport enum Rounding {\n  ROUND_DOWN,\n  ROUND_HALF_UP,\n  ROUND_UP,\n}\n\nexport const BN_ZERO = new BN(0);\nexport const BN_ONE = new BN(1);\nexport const BN_TWO = new BN(2);\nexport const BN_THREE = new BN(3);\nexport const BN_FIVE = new BN(5);\nexport const BN_TEN = new BN(10);\nexport const BN_100 = new BN(100);\nexport const BN_1000 = new BN(1000);\nexport const BN_10000 = new BN(10000);\nexport type BigNumberish = BN | string | number | bigint;\nexport type Numberish = number | string | bigint | Fraction | BN;\n\nconst MAX_SAFE = 0x1fffffffffffff;\n\nexport function parseBigNumberish(value: BigNumberish): BN {\n  const logger = createLogger(\"Raydium_parseBigNumberish\");\n  // BN\n  if (value instanceof BN) {\n    return value;\n  }\n\n  if (typeof value === \"string\") {\n    if (value.match(/^-?[0-9]+$/)) {\n      return new BN(value);\n    }\n    logger.logWithError(`invalid BigNumberish string: ${value}`);\n  }\n\n  if (typeof value === \"number\") {\n    if (value % 1) {\n      logger.logWithError(`BigNumberish number underflow: ${value}`);\n    }\n\n    if (value >= MAX_SAFE || value <= -MAX_SAFE) {\n      logger.logWithError(`BigNumberish number overflow: ${value}`);\n    }\n\n    return new BN(String(value));\n  }\n\n  if (typeof value === \"bigint\") {\n    return new BN(value.toString());\n  }\n  logger.error(`invalid BigNumberish value: ${value}`);\n  return new BN(0); // never reach, because logWithError will throw error\n}\n\nexport function tenExponential(shift: BigNumberish): BN {\n  return BN_TEN.pow(parseBigNumberish(shift));\n}\n\n/**\n *\n * @example\n * getIntInfo(0.34) => { numerator: '34', denominator: '100'}\n * getIntInfo('0.34') //=> { numerator: '34', denominator: '100'}\n */\nexport function parseNumberInfo(n: Numberish | undefined): {\n  denominator: string;\n  numerator: string;\n  sign?: string;\n  int?: string;\n  dec?: string;\n} {\n  if (n === undefined) return { denominator: \"1\", numerator: \"0\" };\n  if (n instanceof BN) {\n    return { numerator: n.toString(), denominator: \"1\" };\n  }\n\n  if (n instanceof Fraction) {\n    return { denominator: n.denominator.toString(), numerator: n.numerator.toString() };\n  }\n\n  const s = String(n);\n  const [, sign = \"\", int = \"\", dec = \"\"] = s.replace(\",\", \"\").match(/(-?)(\\d*)\\.?(\\d*)/) ?? [];\n  const denominator = \"1\" + \"0\".repeat(dec.length);\n  const numerator = sign + (int === \"0\" ? \"\" : int) + dec || \"0\";\n  return { denominator, numerator, sign, int, dec };\n}\n\n// round up\nexport function divCeil(a: BN, b: BN): BN {\n  // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n  // @ts-ignore\n  const dm = a.divmod(b);\n\n  // Fast case - exact division\n  if (dm.mod.isZero()) return dm.div;\n\n  // Round up\n  return dm.div.isNeg() ? dm.div.isubn(1) : dm.div.iaddn(1);\n}\n\nexport function shakeFractionDecimal(n: Fraction): string {\n  const [, sign = \"\", int = \"\"] = n.toFixed(2).match(/(-?)(\\d*)\\.?(\\d*)/) ?? [];\n  return `${sign}${int}`;\n}\n\nexport function toBN(n: Numberish, decimal: BigNumberish = 0): BN {\n  if (n instanceof BN) return n;\n  return new BN(shakeFractionDecimal(toFraction(n).mul(BN_TEN.pow(new BN(String(decimal))))));\n}\n\nexport function toFraction(value: Numberish): Fraction {\n  //  to complete math format(may have decimal), not int\n  if (value instanceof Percent) return new Fraction(value.numerator, value.denominator);\n\n  if (value instanceof Price) return value.adjusted;\n\n  // to complete math format(may have decimal), not BN\n  if (value instanceof TokenAmount)\n    try {\n      return toFraction(value.toExact());\n    } catch {\n      return new Fraction(BN_ZERO);\n    }\n\n  // do not ideal with other fraction value\n  if (value instanceof Fraction) return value;\n\n  // wrap to Fraction\n  const n = String(value);\n  const details = parseNumberInfo(n);\n  return new Fraction(details.numerator, details.denominator);\n}\n\n/**\n * @example\n * toPercent(3.14) // => Percent { 314.00% }\n * toPercent(3.14, { alreadyDecimaled: true }) // => Percent {3.14%}\n */\nexport function toPercent(\n  n: Numberish,\n  options?: { /* usually used for backend data */ alreadyDecimaled?: boolean },\n): Percent {\n  const { numerator, denominator } = parseNumberInfo(n);\n  return new Percent(new BN(numerator), new BN(denominator).mul(options?.alreadyDecimaled ? new BN(100) : new BN(1)));\n}\n\nexport function toTokenPrice(params: {\n  token: TokenJson | Token | SplToken;\n  numberPrice: Numberish;\n  decimalDone?: boolean;\n}): Price {\n  const { token, numberPrice, decimalDone } = params;\n  const usdCurrency = new Token({ mint: \"\", decimals: 6, symbol: \"usd\", name: \"usd\", skipMint: true });\n  const { numerator, denominator } = parseNumberInfo(numberPrice);\n  const parsedNumerator = decimalDone ? new BN(numerator).mul(BN_TEN.pow(new BN(token.decimals))) : numerator;\n  const parsedDenominator = new BN(denominator).mul(BN_TEN.pow(new BN(usdCurrency.decimals)));\n\n  return new Price({\n    baseToken: usdCurrency,\n    denominator: parsedDenominator.toString(),\n    quoteToken: new Token({ ...token, skipMint: true, mint: \"\" }),\n    numerator: parsedNumerator.toString(),\n  });\n}\n\nexport function toUsdCurrency(amount: Numberish): CurrencyAmount {\n  const usdCurrency = new Currency({ decimals: 6, symbol: \"usd\", name: \"usd\" });\n  const amountBigNumber = toBN(mul(amount, 10 ** usdCurrency.decimals)!);\n  return new CurrencyAmount(usdCurrency, amountBigNumber);\n}\n\nexport function toTotalPrice(amount: Numberish | undefined, price: Price | undefined): CurrencyAmount {\n  if (!price || !amount) return toUsdCurrency(0);\n  return toUsdCurrency(mul(amount, price)!);\n}\n\nexport function decimalToFraction(n: Decimal | undefined): Fraction | undefined {\n  if (n == null) return undefined;\n  const { numerator, denominator } = parseNumberInfo(n.toString());\n  return new Fraction(numerator, denominator);\n}\n\nexport function isDecimal(val: unknown): boolean {\n  return val instanceof Decimal;\n}\n\nexport function recursivelyDecimalToFraction<T>(info: T): ReplaceType<T, Decimal, Fraction> {\n  // @ts-expect-error no need type for inner code\n  return isDecimal(info)\n    ? decimalToFraction(info as any)\n    : Array.isArray(info)\n    ? info.map((k) => recursivelyDecimalToFraction(k))\n    : notInnerObject(info)\n    ? Object.fromEntries(Object.entries(info as any).map(([k, v]) => [k, recursivelyDecimalToFraction(v)]))\n    : info;\n}\n","/*!\r\n *  decimal.js v10.4.3\r\n *  An arbitrary-precision Decimal type for JavaScript.\r\n *  https://github.com/MikeMcl/decimal.js\r\n *  Copyright (c) 2022 Michael Mclaughlin <M8ch88l@gmail.com>\r\n *  MIT Licence\r\n */\r\n\r\n\r\n// -----------------------------------  EDITABLE DEFAULTS  ------------------------------------ //\r\n\r\n\r\n  // The maximum exponent magnitude.\r\n  // The limit on the value of `toExpNeg`, `toExpPos`, `minE` and `maxE`.\r\nvar EXP_LIMIT = 9e15,                      // 0 to 9e15\r\n\r\n  // The limit on the value of `precision`, and on the value of the first argument to\r\n  // `toDecimalPlaces`, `toExponential`, `toFixed`, `toPrecision` and `toSignificantDigits`.\r\n  MAX_DIGITS = 1e9,                        // 0 to 1e9\r\n\r\n  // Base conversion alphabet.\r\n  NUMERALS = '0123456789abcdef',\r\n\r\n  // The natural logarithm of 10 (1025 digits).\r\n  LN10 = '2.3025850929940456840179914546843642076011014886287729760333279009675726096773524802359972050895982983419677840422862486334095254650828067566662873690987816894829072083255546808437998948262331985283935053089653777326288461633662222876982198867465436674744042432743651550489343149393914796194044002221051017141748003688084012647080685567743216228355220114804663715659121373450747856947683463616792101806445070648000277502684916746550586856935673420670581136429224554405758925724208241314695689016758940256776311356919292033376587141660230105703089634572075440370847469940168269282808481184289314848524948644871927809676271275775397027668605952496716674183485704422507197965004714951050492214776567636938662976979522110718264549734772662425709429322582798502585509785265383207606726317164309505995087807523710333101197857547331541421808427543863591778117054309827482385045648019095610299291824318237525357709750539565187697510374970888692180205189339507238539205144634197265287286965110862571492198849978748873771345686209167058',\r\n\r\n  // Pi (1025 digits).\r\n  PI = '3.1415926535897932384626433832795028841971693993751058209749445923078164062862089986280348253421170679821480865132823066470938446095505822317253594081284811174502841027019385211055596446229489549303819644288109756659334461284756482337867831652712019091456485669234603486104543266482133936072602491412737245870066063155881748815209209628292540917153643678925903600113305305488204665213841469519415116094330572703657595919530921861173819326117931051185480744623799627495673518857527248912279381830119491298336733624406566430860213949463952247371907021798609437027705392171762931767523846748184676694051320005681271452635608277857713427577896091736371787214684409012249534301465495853710507922796892589235420199561121290219608640344181598136297747713099605187072113499999983729780499510597317328160963185950244594553469083026425223082533446850352619311881710100031378387528865875332083814206171776691473035982534904287554687311595628638823537875937519577818577805321712268066130019278766111959092164201989380952572010654858632789',\r\n\r\n\r\n  // The initial configuration properties of the Decimal constructor.\r\n  DEFAULTS = {\r\n\r\n    // These values must be integers within the stated ranges (inclusive).\r\n    // Most of these values can be changed at run-time using the `Decimal.config` method.\r\n\r\n    // The maximum number of significant digits of the result of a calculation or base conversion.\r\n    // E.g. `Decimal.config({ precision: 20 });`\r\n    precision: 20,                         // 1 to MAX_DIGITS\r\n\r\n    // The rounding mode used when rounding to `precision`.\r\n    //\r\n    // ROUND_UP         0 Away from zero.\r\n    // ROUND_DOWN       1 Towards zero.\r\n    // ROUND_CEIL       2 Towards +Infinity.\r\n    // ROUND_FLOOR      3 Towards -Infinity.\r\n    // ROUND_HALF_UP    4 Towards nearest neighbour. If equidistant, up.\r\n    // ROUND_HALF_DOWN  5 Towards nearest neighbour. If equidistant, down.\r\n    // ROUND_HALF_EVEN  6 Towards nearest neighbour. If equidistant, towards even neighbour.\r\n    // ROUND_HALF_CEIL  7 Towards nearest neighbour. If equidistant, towards +Infinity.\r\n    // ROUND_HALF_FLOOR 8 Towards nearest neighbour. If equidistant, towards -Infinity.\r\n    //\r\n    // E.g.\r\n    // `Decimal.rounding = 4;`\r\n    // `Decimal.rounding = Decimal.ROUND_HALF_UP;`\r\n    rounding: 4,                           // 0 to 8\r\n\r\n    // The modulo mode used when calculating the modulus: a mod n.\r\n    // The quotient (q = a / n) is calculated according to the corresponding rounding mode.\r\n    // The remainder (r) is calculated as: r = a - n * q.\r\n    //\r\n    // UP         0 The remainder is positive if the dividend is negative, else is negative.\r\n    // DOWN       1 The remainder has the same sign as the dividend (JavaScript %).\r\n    // FLOOR      3 The remainder has the same sign as the divisor (Python %).\r\n    // HALF_EVEN  6 The IEEE 754 remainder function.\r\n    // EUCLID     9 Euclidian division. q = sign(n) * floor(a / abs(n)). Always positive.\r\n    //\r\n    // Truncated division (1), floored division (3), the IEEE 754 remainder (6), and Euclidian\r\n    // division (9) are commonly used for the modulus operation. The other rounding modes can also\r\n    // be used, but they may not give useful results.\r\n    modulo: 1,                             // 0 to 9\r\n\r\n    // The exponent value at and beneath which `toString` returns exponential notation.\r\n    // JavaScript numbers: -7\r\n    toExpNeg: -7,                          // 0 to -EXP_LIMIT\r\n\r\n    // The exponent value at and above which `toString` returns exponential notation.\r\n    // JavaScript numbers: 21\r\n    toExpPos:  21,                         // 0 to EXP_LIMIT\r\n\r\n    // The minimum exponent value, beneath which underflow to zero occurs.\r\n    // JavaScript numbers: -324  (5e-324)\r\n    minE: -EXP_LIMIT,                      // -1 to -EXP_LIMIT\r\n\r\n    // The maximum exponent value, above which overflow to Infinity occurs.\r\n    // JavaScript numbers: 308  (1.7976931348623157e+308)\r\n    maxE: EXP_LIMIT,                       // 1 to EXP_LIMIT\r\n\r\n    // Whether to use cryptographically-secure random number generation, if available.\r\n    crypto: false                          // true/false\r\n  },\r\n\r\n\r\n// ----------------------------------- END OF EDITABLE DEFAULTS ------------------------------- //\r\n\r\n\r\n  inexact, quadrant,\r\n  external = true,\r\n\r\n  decimalError = '[DecimalError] ',\r\n  invalidArgument = decimalError + 'Invalid argument: ',\r\n  precisionLimitExceeded = decimalError + 'Precision limit exceeded',\r\n  cryptoUnavailable = decimalError + 'crypto unavailable',\r\n  tag = '[object Decimal]',\r\n\r\n  mathfloor = Math.floor,\r\n  mathpow = Math.pow,\r\n\r\n  isBinary = /^0b([01]+(\\.[01]*)?|\\.[01]+)(p[+-]?\\d+)?$/i,\r\n  isHex = /^0x([0-9a-f]+(\\.[0-9a-f]*)?|\\.[0-9a-f]+)(p[+-]?\\d+)?$/i,\r\n  isOctal = /^0o([0-7]+(\\.[0-7]*)?|\\.[0-7]+)(p[+-]?\\d+)?$/i,\r\n  isDecimal = /^(\\d+(\\.\\d*)?|\\.\\d+)(e[+-]?\\d+)?$/i,\r\n\r\n  BASE = 1e7,\r\n  LOG_BASE = 7,\r\n  MAX_SAFE_INTEGER = 9007199254740991,\r\n\r\n  LN10_PRECISION = LN10.length - 1,\r\n  PI_PRECISION = PI.length - 1,\r\n\r\n  // Decimal.prototype object\r\n  P = { toStringTag: tag };\r\n\r\n\r\n// Decimal prototype methods\r\n\r\n\r\n/*\r\n *  absoluteValue             abs\r\n *  ceil\r\n *  clampedTo                 clamp\r\n *  comparedTo                cmp\r\n *  cosine                    cos\r\n *  cubeRoot                  cbrt\r\n *  decimalPlaces             dp\r\n *  dividedBy                 div\r\n *  dividedToIntegerBy        divToInt\r\n *  equals                    eq\r\n *  floor\r\n *  greaterThan               gt\r\n *  greaterThanOrEqualTo      gte\r\n *  hyperbolicCosine          cosh\r\n *  hyperbolicSine            sinh\r\n *  hyperbolicTangent         tanh\r\n *  inverseCosine             acos\r\n *  inverseHyperbolicCosine   acosh\r\n *  inverseHyperbolicSine     asinh\r\n *  inverseHyperbolicTangent  atanh\r\n *  inverseSine               asin\r\n *  inverseTangent            atan\r\n *  isFinite\r\n *  isInteger                 isInt\r\n *  isNaN\r\n *  isNegative                isNeg\r\n *  isPositive                isPos\r\n *  isZero\r\n *  lessThan                  lt\r\n *  lessThanOrEqualTo         lte\r\n *  logarithm                 log\r\n *  [maximum]                 [max]\r\n *  [minimum]                 [min]\r\n *  minus                     sub\r\n *  modulo                    mod\r\n *  naturalExponential        exp\r\n *  naturalLogarithm          ln\r\n *  negated                   neg\r\n *  plus                      add\r\n *  precision                 sd\r\n *  round\r\n *  sine                      sin\r\n *  squareRoot                sqrt\r\n *  tangent                   tan\r\n *  times                     mul\r\n *  toBinary\r\n *  toDecimalPlaces           toDP\r\n *  toExponential\r\n *  toFixed\r\n *  toFraction\r\n *  toHexadecimal             toHex\r\n *  toNearest\r\n *  toNumber\r\n *  toOctal\r\n *  toPower                   pow\r\n *  toPrecision\r\n *  toSignificantDigits       toSD\r\n *  toString\r\n *  truncated                 trunc\r\n *  valueOf                   toJSON\r\n */\r\n\r\n\r\n/*\r\n * Return a new Decimal whose value is the absolute value of this Decimal.\r\n *\r\n */\r\nP.absoluteValue = P.abs = function () {\r\n  var x = new this.constructor(this);\r\n  if (x.s < 0) x.s = 1;\r\n  return finalise(x);\r\n};\r\n\r\n\r\n/*\r\n * Return a new Decimal whose value is the value of this Decimal rounded to a whole number in the\r\n * direction of positive Infinity.\r\n *\r\n */\r\nP.ceil = function () {\r\n  return finalise(new this.constructor(this), this.e + 1, 2);\r\n};\r\n\r\n\r\n/*\r\n * Return a new Decimal whose value is the value of this Decimal clamped to the range\r\n * delineated by `min` and `max`.\r\n *\r\n * min {number|string|Decimal}\r\n * max {number|string|Decimal}\r\n *\r\n */\r\nP.clampedTo = P.clamp = function (min, max) {\r\n  var k,\r\n    x = this,\r\n    Ctor = x.constructor;\r\n  min = new Ctor(min);\r\n  max = new Ctor(max);\r\n  if (!min.s || !max.s) return new Ctor(NaN);\r\n  if (min.gt(max)) throw Error(invalidArgument + max);\r\n  k = x.cmp(min);\r\n  return k < 0 ? min : x.cmp(max) > 0 ? max : new Ctor(x);\r\n};\r\n\r\n\r\n/*\r\n * Return\r\n *   1    if the value of this Decimal is greater than the value of `y`,\r\n *  -1    if the value of this Decimal is less than the value of `y`,\r\n *   0    if they have the same value,\r\n *   NaN  if the value of either Decimal is NaN.\r\n *\r\n */\r\nP.comparedTo = P.cmp = function (y) {\r\n  var i, j, xdL, ydL,\r\n    x = this,\r\n    xd = x.d,\r\n    yd = (y = new x.constructor(y)).d,\r\n    xs = x.s,\r\n    ys = y.s;\r\n\r\n  // Either NaN or ±Infinity?\r\n  if (!xd || !yd) {\r\n    return !xs || !ys ? NaN : xs !== ys ? xs : xd === yd ? 0 : !xd ^ xs < 0 ? 1 : -1;\r\n  }\r\n\r\n  // Either zero?\r\n  if (!xd[0] || !yd[0]) return xd[0] ? xs : yd[0] ? -ys : 0;\r\n\r\n  // Signs differ?\r\n  if (xs !== ys) return xs;\r\n\r\n  // Compare exponents.\r\n  if (x.e !== y.e) return x.e > y.e ^ xs < 0 ? 1 : -1;\r\n\r\n  xdL = xd.length;\r\n  ydL = yd.length;\r\n\r\n  // Compare digit by digit.\r\n  for (i = 0, j = xdL < ydL ? xdL : ydL; i < j; ++i) {\r\n    if (xd[i] !== yd[i]) return xd[i] > yd[i] ^ xs < 0 ? 1 : -1;\r\n  }\r\n\r\n  // Compare lengths.\r\n  return xdL === ydL ? 0 : xdL > ydL ^ xs < 0 ? 1 : -1;\r\n};\r\n\r\n\r\n/*\r\n * Return a new Decimal whose value is the cosine of the value in radians of this Decimal.\r\n *\r\n * Domain: [-Infinity, Infinity]\r\n * Range: [-1, 1]\r\n *\r\n * cos(0)         = 1\r\n * cos(-0)        = 1\r\n * cos(Infinity)  = NaN\r\n * cos(-Infinity) = NaN\r\n * cos(NaN)       = NaN\r\n *\r\n */\r\nP.cosine = P.cos = function () {\r\n  var pr, rm,\r\n    x = this,\r\n    Ctor = x.constructor;\r\n\r\n  if (!x.d) return new Ctor(NaN);\r\n\r\n  // cos(0) = cos(-0) = 1\r\n  if (!x.d[0]) return new Ctor(1);\r\n\r\n  pr = Ctor.precision;\r\n  rm = Ctor.rounding;\r\n  Ctor.precision = pr + Math.max(x.e, x.sd()) + LOG_BASE;\r\n  Ctor.rounding = 1;\r\n\r\n  x = cosine(Ctor, toLessThanHalfPi(Ctor, x));\r\n\r\n  Ctor.precision = pr;\r\n  Ctor.rounding = rm;\r\n\r\n  return finalise(quadrant == 2 || quadrant == 3 ? x.neg() : x, pr, rm, true);\r\n};\r\n\r\n\r\n/*\r\n *\r\n * Return a new Decimal whose value is the cube root of the value of this Decimal, rounded to\r\n * `precision` significant digits using rounding mode `rounding`.\r\n *\r\n *  cbrt(0)  =  0\r\n *  cbrt(-0) = -0\r\n *  cbrt(1)  =  1\r\n *  cbrt(-1) = -1\r\n *  cbrt(N)  =  N\r\n *  cbrt(-I) = -I\r\n *  cbrt(I)  =  I\r\n *\r\n * Math.cbrt(x) = (x < 0 ? -Math.pow(-x, 1/3) : Math.pow(x, 1/3))\r\n *\r\n */\r\nP.cubeRoot = P.cbrt = function () {\r\n  var e, m, n, r, rep, s, sd, t, t3, t3plusx,\r\n    x = this,\r\n    Ctor = x.constructor;\r\n\r\n  if (!x.isFinite() || x.isZero()) return new Ctor(x);\r\n  external = false;\r\n\r\n  // Initial estimate.\r\n  s = x.s * mathpow(x.s * x, 1 / 3);\r\n\r\n   // Math.cbrt underflow/overflow?\r\n   // Pass x to Math.pow as integer, then adjust the exponent of the result.\r\n  if (!s || Math.abs(s) == 1 / 0) {\r\n    n = digitsToString(x.d);\r\n    e = x.e;\r\n\r\n    // Adjust n exponent so it is a multiple of 3 away from x exponent.\r\n    if (s = (e - n.length + 1) % 3) n += (s == 1 || s == -2 ? '0' : '00');\r\n    s = mathpow(n, 1 / 3);\r\n\r\n    // Rarely, e may be one less than the result exponent value.\r\n    e = mathfloor((e + 1) / 3) - (e % 3 == (e < 0 ? -1 : 2));\r\n\r\n    if (s == 1 / 0) {\r\n      n = '5e' + e;\r\n    } else {\r\n      n = s.toExponential();\r\n      n = n.slice(0, n.indexOf('e') + 1) + e;\r\n    }\r\n\r\n    r = new Ctor(n);\r\n    r.s = x.s;\r\n  } else {\r\n    r = new Ctor(s.toString());\r\n  }\r\n\r\n  sd = (e = Ctor.precision) + 3;\r\n\r\n  // Halley's method.\r\n  // TODO? Compare Newton's method.\r\n  for (;;) {\r\n    t = r;\r\n    t3 = t.times(t).times(t);\r\n    t3plusx = t3.plus(x);\r\n    r = divide(t3plusx.plus(x).times(t), t3plusx.plus(t3), sd + 2, 1);\r\n\r\n    // TODO? Replace with for-loop and checkRoundingDigits.\r\n    if (digitsToString(t.d).slice(0, sd) === (n = digitsToString(r.d)).slice(0, sd)) {\r\n      n = n.slice(sd - 3, sd + 1);\r\n\r\n      // The 4th rounding digit may be in error by -1 so if the 4 rounding digits are 9999 or 4999\r\n      // , i.e. approaching a rounding boundary, continue the iteration.\r\n      if (n == '9999' || !rep && n == '4999') {\r\n\r\n        // On the first iteration only, check to see if rounding up gives the exact result as the\r\n        // nines may infinitely repeat.\r\n        if (!rep) {\r\n          finalise(t, e + 1, 0);\r\n\r\n          if (t.times(t).times(t).eq(x)) {\r\n            r = t;\r\n            break;\r\n          }\r\n        }\r\n\r\n        sd += 4;\r\n        rep = 1;\r\n      } else {\r\n\r\n        // If the rounding digits are null, 0{0,4} or 50{0,3}, check for an exact result.\r\n        // If not, then there are further digits and m will be truthy.\r\n        if (!+n || !+n.slice(1) && n.charAt(0) == '5') {\r\n\r\n          // Truncate to the first rounding digit.\r\n          finalise(r, e + 1, 1);\r\n          m = !r.times(r).times(r).eq(x);\r\n        }\r\n\r\n        break;\r\n      }\r\n    }\r\n  }\r\n\r\n  external = true;\r\n\r\n  return finalise(r, e, Ctor.rounding, m);\r\n};\r\n\r\n\r\n/*\r\n * Return the number of decimal places of the value of this Decimal.\r\n *\r\n */\r\nP.decimalPlaces = P.dp = function () {\r\n  var w,\r\n    d = this.d,\r\n    n = NaN;\r\n\r\n  if (d) {\r\n    w = d.length - 1;\r\n    n = (w - mathfloor(this.e / LOG_BASE)) * LOG_BASE;\r\n\r\n    // Subtract the number of trailing zeros of the last word.\r\n    w = d[w];\r\n    if (w) for (; w % 10 == 0; w /= 10) n--;\r\n    if (n < 0) n = 0;\r\n  }\r\n\r\n  return n;\r\n};\r\n\r\n\r\n/*\r\n *  n / 0 = I\r\n *  n / N = N\r\n *  n / I = 0\r\n *  0 / n = 0\r\n *  0 / 0 = N\r\n *  0 / N = N\r\n *  0 / I = 0\r\n *  N / n = N\r\n *  N / 0 = N\r\n *  N / N = N\r\n *  N / I = N\r\n *  I / n = I\r\n *  I / 0 = I\r\n *  I / N = N\r\n *  I / I = N\r\n *\r\n * Return a new Decimal whose value is the value of this Decimal divided by `y`, rounded to\r\n * `precision` significant digits using rounding mode `rounding`.\r\n *\r\n */\r\nP.dividedBy = P.div = function (y) {\r\n  return divide(this, new this.constructor(y));\r\n};\r\n\r\n\r\n/*\r\n * Return a new Decimal whose value is the integer part of dividing the value of this Decimal\r\n * by the value of `y`, rounded to `precision` significant digits using rounding mode `rounding`.\r\n *\r\n */\r\nP.dividedToIntegerBy = P.divToInt = function (y) {\r\n  var x = this,\r\n    Ctor = x.constructor;\r\n  return finalise(divide(x, new Ctor(y), 0, 1, 1), Ctor.precision, Ctor.rounding);\r\n};\r\n\r\n\r\n/*\r\n * Return true if the value of this Decimal is equal to the value of `y`, otherwise return false.\r\n *\r\n */\r\nP.equals = P.eq = function (y) {\r\n  return this.cmp(y) === 0;\r\n};\r\n\r\n\r\n/*\r\n * Return a new Decimal whose value is the value of this Decimal rounded to a whole number in the\r\n * direction of negative Infinity.\r\n *\r\n */\r\nP.floor = function () {\r\n  return finalise(new this.constructor(this), this.e + 1, 3);\r\n};\r\n\r\n\r\n/*\r\n * Return true if the value of this Decimal is greater than the value of `y`, otherwise return\r\n * false.\r\n *\r\n */\r\nP.greaterThan = P.gt = function (y) {\r\n  return this.cmp(y) > 0;\r\n};\r\n\r\n\r\n/*\r\n * Return true if the value of this Decimal is greater than or equal to the value of `y`,\r\n * otherwise return false.\r\n *\r\n */\r\nP.greaterThanOrEqualTo = P.gte = function (y) {\r\n  var k = this.cmp(y);\r\n  return k == 1 || k === 0;\r\n};\r\n\r\n\r\n/*\r\n * Return a new Decimal whose value is the hyperbolic cosine of the value in radians of this\r\n * Decimal.\r\n *\r\n * Domain: [-Infinity, Infinity]\r\n * Range: [1, Infinity]\r\n *\r\n * cosh(x) = 1 + x^2/2! + x^4/4! + x^6/6! + ...\r\n *\r\n * cosh(0)         = 1\r\n * cosh(-0)        = 1\r\n * cosh(Infinity)  = Infinity\r\n * cosh(-Infinity) = Infinity\r\n * cosh(NaN)       = NaN\r\n *\r\n *  x        time taken (ms)   result\r\n * 1000      9                 9.8503555700852349694e+433\r\n * 10000     25                4.4034091128314607936e+4342\r\n * 100000    171               1.4033316802130615897e+43429\r\n * 1000000   3817              1.5166076984010437725e+434294\r\n * 10000000  abandoned after 2 minute wait\r\n *\r\n * TODO? Compare performance of cosh(x) = 0.5 * (exp(x) + exp(-x))\r\n *\r\n */\r\nP.hyperbolicCosine = P.cosh = function () {\r\n  var k, n, pr, rm, len,\r\n    x = this,\r\n    Ctor = x.constructor,\r\n    one = new Ctor(1);\r\n\r\n  if (!x.isFinite()) return new Ctor(x.s ? 1 / 0 : NaN);\r\n  if (x.isZero()) return one;\r\n\r\n  pr = Ctor.precision;\r\n  rm = Ctor.rounding;\r\n  Ctor.precision = pr + Math.max(x.e, x.sd()) + 4;\r\n  Ctor.rounding = 1;\r\n  len = x.d.length;\r\n\r\n  // Argument reduction: cos(4x) = 1 - 8cos^2(x) + 8cos^4(x) + 1\r\n  // i.e. cos(x) = 1 - cos^2(x/4)(8 - 8cos^2(x/4))\r\n\r\n  // Estimate the optimum number of times to use the argument reduction.\r\n  // TODO? Estimation reused from cosine() and may not be optimal here.\r\n  if (len < 32) {\r\n    k = Math.ceil(len / 3);\r\n    n = (1 / tinyPow(4, k)).toString();\r\n  } else {\r\n    k = 16;\r\n    n = '2.3283064365386962890625e-10';\r\n  }\r\n\r\n  x = taylorSeries(Ctor, 1, x.times(n), new Ctor(1), true);\r\n\r\n  // Reverse argument reduction\r\n  var cosh2_x,\r\n    i = k,\r\n    d8 = new Ctor(8);\r\n  for (; i--;) {\r\n    cosh2_x = x.times(x);\r\n    x = one.minus(cosh2_x.times(d8.minus(cosh2_x.times(d8))));\r\n  }\r\n\r\n  return finalise(x, Ctor.precision = pr, Ctor.rounding = rm, true);\r\n};\r\n\r\n\r\n/*\r\n * Return a new Decimal whose value is the hyperbolic sine of the value in radians of this\r\n * Decimal.\r\n *\r\n * Domain: [-Infinity, Infinity]\r\n * Range: [-Infinity, Infinity]\r\n *\r\n * sinh(x) = x + x^3/3! + x^5/5! + x^7/7! + ...\r\n *\r\n * sinh(0)         = 0\r\n * sinh(-0)        = -0\r\n * sinh(Infinity)  = Infinity\r\n * sinh(-Infinity) = -Infinity\r\n * sinh(NaN)       = NaN\r\n *\r\n * x        time taken (ms)\r\n * 10       2 ms\r\n * 100      5 ms\r\n * 1000     14 ms\r\n * 10000    82 ms\r\n * 100000   886 ms            1.4033316802130615897e+43429\r\n * 200000   2613 ms\r\n * 300000   5407 ms\r\n * 400000   8824 ms\r\n * 500000   13026 ms          8.7080643612718084129e+217146\r\n * 1000000  48543 ms\r\n *\r\n * TODO? Compare performance of sinh(x) = 0.5 * (exp(x) - exp(-x))\r\n *\r\n */\r\nP.hyperbolicSine = P.sinh = function () {\r\n  var k, pr, rm, len,\r\n    x = this,\r\n    Ctor = x.constructor;\r\n\r\n  if (!x.isFinite() || x.isZero()) return new Ctor(x);\r\n\r\n  pr = Ctor.precision;\r\n  rm = Ctor.rounding;\r\n  Ctor.precision = pr + Math.max(x.e, x.sd()) + 4;\r\n  Ctor.rounding = 1;\r\n  len = x.d.length;\r\n\r\n  if (len < 3) {\r\n    x = taylorSeries(Ctor, 2, x, x, true);\r\n  } else {\r\n\r\n    // Alternative argument reduction: sinh(3x) = sinh(x)(3 + 4sinh^2(x))\r\n    // i.e. sinh(x) = sinh(x/3)(3 + 4sinh^2(x/3))\r\n    // 3 multiplications and 1 addition\r\n\r\n    // Argument reduction: sinh(5x) = sinh(x)(5 + sinh^2(x)(20 + 16sinh^2(x)))\r\n    // i.e. sinh(x) = sinh(x/5)(5 + sinh^2(x/5)(20 + 16sinh^2(x/5)))\r\n    // 4 multiplications and 2 additions\r\n\r\n    // Estimate the optimum number of times to use the argument reduction.\r\n    k = 1.4 * Math.sqrt(len);\r\n    k = k > 16 ? 16 : k | 0;\r\n\r\n    x = x.times(1 / tinyPow(5, k));\r\n    x = taylorSeries(Ctor, 2, x, x, true);\r\n\r\n    // Reverse argument reduction\r\n    var sinh2_x,\r\n      d5 = new Ctor(5),\r\n      d16 = new Ctor(16),\r\n      d20 = new Ctor(20);\r\n    for (; k--;) {\r\n      sinh2_x = x.times(x);\r\n      x = x.times(d5.plus(sinh2_x.times(d16.times(sinh2_x).plus(d20))));\r\n    }\r\n  }\r\n\r\n  Ctor.precision = pr;\r\n  Ctor.rounding = rm;\r\n\r\n  return finalise(x, pr, rm, true);\r\n};\r\n\r\n\r\n/*\r\n * Return a new Decimal whose value is the hyperbolic tangent of the value in radians of this\r\n * Decimal.\r\n *\r\n * Domain: [-Infinity, Infinity]\r\n * Range: [-1, 1]\r\n *\r\n * tanh(x) = sinh(x) / cosh(x)\r\n *\r\n * tanh(0)         = 0\r\n * tanh(-0)        = -0\r\n * tanh(Infinity)  = 1\r\n * tanh(-Infinity) = -1\r\n * tanh(NaN)       = NaN\r\n *\r\n */\r\nP.hyperbolicTangent = P.tanh = function () {\r\n  var pr, rm,\r\n    x = this,\r\n    Ctor = x.constructor;\r\n\r\n  if (!x.isFinite()) return new Ctor(x.s);\r\n  if (x.isZero()) return new Ctor(x);\r\n\r\n  pr = Ctor.precision;\r\n  rm = Ctor.rounding;\r\n  Ctor.precision = pr + 7;\r\n  Ctor.rounding = 1;\r\n\r\n  return divide(x.sinh(), x.cosh(), Ctor.precision = pr, Ctor.rounding = rm);\r\n};\r\n\r\n\r\n/*\r\n * Return a new Decimal whose value is the arccosine (inverse cosine) in radians of the value of\r\n * this Decimal.\r\n *\r\n * Domain: [-1, 1]\r\n * Range: [0, pi]\r\n *\r\n * acos(x) = pi/2 - asin(x)\r\n *\r\n * acos(0)       = pi/2\r\n * acos(-0)      = pi/2\r\n * acos(1)       = 0\r\n * acos(-1)      = pi\r\n * acos(1/2)     = pi/3\r\n * acos(-1/2)    = 2*pi/3\r\n * acos(|x| > 1) = NaN\r\n * acos(NaN)     = NaN\r\n *\r\n */\r\nP.inverseCosine = P.acos = function () {\r\n  var halfPi,\r\n    x = this,\r\n    Ctor = x.constructor,\r\n    k = x.abs().cmp(1),\r\n    pr = Ctor.precision,\r\n    rm = Ctor.rounding;\r\n\r\n  if (k !== -1) {\r\n    return k === 0\r\n      // |x| is 1\r\n      ? x.isNeg() ? getPi(Ctor, pr, rm) : new Ctor(0)\r\n      // |x| > 1 or x is NaN\r\n      : new Ctor(NaN);\r\n  }\r\n\r\n  if (x.isZero()) return getPi(Ctor, pr + 4, rm).times(0.5);\r\n\r\n  // TODO? Special case acos(0.5) = pi/3 and acos(-0.5) = 2*pi/3\r\n\r\n  Ctor.precision = pr + 6;\r\n  Ctor.rounding = 1;\r\n\r\n  x = x.asin();\r\n  halfPi = getPi(Ctor, pr + 4, rm).times(0.5);\r\n\r\n  Ctor.precision = pr;\r\n  Ctor.rounding = rm;\r\n\r\n  return halfPi.minus(x);\r\n};\r\n\r\n\r\n/*\r\n * Return a new Decimal whose value is the inverse of the hyperbolic cosine in radians of the\r\n * value of this Decimal.\r\n *\r\n * Domain: [1, Infinity]\r\n * Range: [0, Infinity]\r\n *\r\n * acosh(x) = ln(x + sqrt(x^2 - 1))\r\n *\r\n * acosh(x < 1)     = NaN\r\n * acosh(NaN)       = NaN\r\n * acosh(Infinity)  = Infinity\r\n * acosh(-Infinity) = NaN\r\n * acosh(0)         = NaN\r\n * acosh(-0)        = NaN\r\n * acosh(1)         = 0\r\n * acosh(-1)        = NaN\r\n *\r\n */\r\nP.inverseHyperbolicCosine = P.acosh = function () {\r\n  var pr, rm,\r\n    x = this,\r\n    Ctor = x.constructor;\r\n\r\n  if (x.lte(1)) return new Ctor(x.eq(1) ? 0 : NaN);\r\n  if (!x.isFinite()) return new Ctor(x);\r\n\r\n  pr = Ctor.precision;\r\n  rm = Ctor.rounding;\r\n  Ctor.precision = pr + Math.max(Math.abs(x.e), x.sd()) + 4;\r\n  Ctor.rounding = 1;\r\n  external = false;\r\n\r\n  x = x.times(x).minus(1).sqrt().plus(x);\r\n\r\n  external = true;\r\n  Ctor.precision = pr;\r\n  Ctor.rounding = rm;\r\n\r\n  return x.ln();\r\n};\r\n\r\n\r\n/*\r\n * Return a new Decimal whose value is the inverse of the hyperbolic sine in radians of the value\r\n * of this Decimal.\r\n *\r\n * Domain: [-Infinity, Infinity]\r\n * Range: [-Infinity, Infinity]\r\n *\r\n * asinh(x) = ln(x + sqrt(x^2 + 1))\r\n *\r\n * asinh(NaN)       = NaN\r\n * asinh(Infinity)  = Infinity\r\n * asinh(-Infinity) = -Infinity\r\n * asinh(0)         = 0\r\n * asinh(-0)        = -0\r\n *\r\n */\r\nP.inverseHyperbolicSine = P.asinh = function () {\r\n  var pr, rm,\r\n    x = this,\r\n    Ctor = x.constructor;\r\n\r\n  if (!x.isFinite() || x.isZero()) return new Ctor(x);\r\n\r\n  pr = Ctor.precision;\r\n  rm = Ctor.rounding;\r\n  Ctor.precision = pr + 2 * Math.max(Math.abs(x.e), x.sd()) + 6;\r\n  Ctor.rounding = 1;\r\n  external = false;\r\n\r\n  x = x.times(x).plus(1).sqrt().plus(x);\r\n\r\n  external = true;\r\n  Ctor.precision = pr;\r\n  Ctor.rounding = rm;\r\n\r\n  return x.ln();\r\n};\r\n\r\n\r\n/*\r\n * Return a new Decimal whose value is the inverse of the hyperbolic tangent in radians of the\r\n * value of this Decimal.\r\n *\r\n * Domain: [-1, 1]\r\n * Range: [-Infinity, Infinity]\r\n *\r\n * atanh(x) = 0.5 * ln((1 + x) / (1 - x))\r\n *\r\n * atanh(|x| > 1)   = NaN\r\n * atanh(NaN)       = NaN\r\n * atanh(Infinity)  = NaN\r\n * atanh(-Infinity) = NaN\r\n * atanh(0)         = 0\r\n * atanh(-0)        = -0\r\n * atanh(1)         = Infinity\r\n * atanh(-1)        = -Infinity\r\n *\r\n */\r\nP.inverseHyperbolicTangent = P.atanh = function () {\r\n  var pr, rm, wpr, xsd,\r\n    x = this,\r\n    Ctor = x.constructor;\r\n\r\n  if (!x.isFinite()) return new Ctor(NaN);\r\n  if (x.e >= 0) return new Ctor(x.abs().eq(1) ? x.s / 0 : x.isZero() ? x : NaN);\r\n\r\n  pr = Ctor.precision;\r\n  rm = Ctor.rounding;\r\n  xsd = x.sd();\r\n\r\n  if (Math.max(xsd, pr) < 2 * -x.e - 1) return finalise(new Ctor(x), pr, rm, true);\r\n\r\n  Ctor.precision = wpr = xsd - x.e;\r\n\r\n  x = divide(x.plus(1), new Ctor(1).minus(x), wpr + pr, 1);\r\n\r\n  Ctor.precision = pr + 4;\r\n  Ctor.rounding = 1;\r\n\r\n  x = x.ln();\r\n\r\n  Ctor.precision = pr;\r\n  Ctor.rounding = rm;\r\n\r\n  return x.times(0.5);\r\n};\r\n\r\n\r\n/*\r\n * Return a new Decimal whose value is the arcsine (inverse sine) in radians of the value of this\r\n * Decimal.\r\n *\r\n * Domain: [-Infinity, Infinity]\r\n * Range: [-pi/2, pi/2]\r\n *\r\n * asin(x) = 2*atan(x/(1 + sqrt(1 - x^2)))\r\n *\r\n * asin(0)       = 0\r\n * asin(-0)      = -0\r\n * asin(1/2)     = pi/6\r\n * asin(-1/2)    = -pi/6\r\n * asin(1)       = pi/2\r\n * asin(-1)      = -pi/2\r\n * asin(|x| > 1) = NaN\r\n * asin(NaN)     = NaN\r\n *\r\n * TODO? Compare performance of Taylor series.\r\n *\r\n */\r\nP.inverseSine = P.asin = function () {\r\n  var halfPi, k,\r\n    pr, rm,\r\n    x = this,\r\n    Ctor = x.constructor;\r\n\r\n  if (x.isZero()) return new Ctor(x);\r\n\r\n  k = x.abs().cmp(1);\r\n  pr = Ctor.precision;\r\n  rm = Ctor.rounding;\r\n\r\n  if (k !== -1) {\r\n\r\n    // |x| is 1\r\n    if (k === 0) {\r\n      halfPi = getPi(Ctor, pr + 4, rm).times(0.5);\r\n      halfPi.s = x.s;\r\n      return halfPi;\r\n    }\r\n\r\n    // |x| > 1 or x is NaN\r\n    return new Ctor(NaN);\r\n  }\r\n\r\n  // TODO? Special case asin(1/2) = pi/6 and asin(-1/2) = -pi/6\r\n\r\n  Ctor.precision = pr + 6;\r\n  Ctor.rounding = 1;\r\n\r\n  x = x.div(new Ctor(1).minus(x.times(x)).sqrt().plus(1)).atan();\r\n\r\n  Ctor.precision = pr;\r\n  Ctor.rounding = rm;\r\n\r\n  return x.times(2);\r\n};\r\n\r\n\r\n/*\r\n * Return a new Decimal whose value is the arctangent (inverse tangent) in radians of the value\r\n * of this Decimal.\r\n *\r\n * Domain: [-Infinity, Infinity]\r\n * Range: [-pi/2, pi/2]\r\n *\r\n * atan(x) = x - x^3/3 + x^5/5 - x^7/7 + ...\r\n *\r\n * atan(0)         = 0\r\n * atan(-0)        = -0\r\n * atan(1)         = pi/4\r\n * atan(-1)        = -pi/4\r\n * atan(Infinity)  = pi/2\r\n * atan(-Infinity) = -pi/2\r\n * atan(NaN)       = NaN\r\n *\r\n */\r\nP.inverseTangent = P.atan = function () {\r\n  var i, j, k, n, px, t, r, wpr, x2,\r\n    x = this,\r\n    Ctor = x.constructor,\r\n    pr = Ctor.precision,\r\n    rm = Ctor.rounding;\r\n\r\n  if (!x.isFinite()) {\r\n    if (!x.s) return new Ctor(NaN);\r\n    if (pr + 4 <= PI_PRECISION) {\r\n      r = getPi(Ctor, pr + 4, rm).times(0.5);\r\n      r.s = x.s;\r\n      return r;\r\n    }\r\n  } else if (x.isZero()) {\r\n    return new Ctor(x);\r\n  } else if (x.abs().eq(1) && pr + 4 <= PI_PRECISION) {\r\n    r = getPi(Ctor, pr + 4, rm).times(0.25);\r\n    r.s = x.s;\r\n    return r;\r\n  }\r\n\r\n  Ctor.precision = wpr = pr + 10;\r\n  Ctor.rounding = 1;\r\n\r\n  // TODO? if (x >= 1 && pr <= PI_PRECISION) atan(x) = halfPi * x.s - atan(1 / x);\r\n\r\n  // Argument reduction\r\n  // Ensure |x| < 0.42\r\n  // atan(x) = 2 * atan(x / (1 + sqrt(1 + x^2)))\r\n\r\n  k = Math.min(28, wpr / LOG_BASE + 2 | 0);\r\n\r\n  for (i = k; i; --i) x = x.div(x.times(x).plus(1).sqrt().plus(1));\r\n\r\n  external = false;\r\n\r\n  j = Math.ceil(wpr / LOG_BASE);\r\n  n = 1;\r\n  x2 = x.times(x);\r\n  r = new Ctor(x);\r\n  px = x;\r\n\r\n  // atan(x) = x - x^3/3 + x^5/5 - x^7/7 + ...\r\n  for (; i !== -1;) {\r\n    px = px.times(x2);\r\n    t = r.minus(px.div(n += 2));\r\n\r\n    px = px.times(x2);\r\n    r = t.plus(px.div(n += 2));\r\n\r\n    if (r.d[j] !== void 0) for (i = j; r.d[i] === t.d[i] && i--;);\r\n  }\r\n\r\n  if (k) r = r.times(2 << (k - 1));\r\n\r\n  external = true;\r\n\r\n  return finalise(r, Ctor.precision = pr, Ctor.rounding = rm, true);\r\n};\r\n\r\n\r\n/*\r\n * Return true if the value of this Decimal is a finite number, otherwise return false.\r\n *\r\n */\r\nP.isFinite = function () {\r\n  return !!this.d;\r\n};\r\n\r\n\r\n/*\r\n * Return true if the value of this Decimal is an integer, otherwise return false.\r\n *\r\n */\r\nP.isInteger = P.isInt = function () {\r\n  return !!this.d && mathfloor(this.e / LOG_BASE) > this.d.length - 2;\r\n};\r\n\r\n\r\n/*\r\n * Return true if the value of this Decimal is NaN, otherwise return false.\r\n *\r\n */\r\nP.isNaN = function () {\r\n  return !this.s;\r\n};\r\n\r\n\r\n/*\r\n * Return true if the value of this Decimal is negative, otherwise return false.\r\n *\r\n */\r\nP.isNegative = P.isNeg = function () {\r\n  return this.s < 0;\r\n};\r\n\r\n\r\n/*\r\n * Return true if the value of this Decimal is positive, otherwise return false.\r\n *\r\n */\r\nP.isPositive = P.isPos = function () {\r\n  return this.s > 0;\r\n};\r\n\r\n\r\n/*\r\n * Return true if the value of this Decimal is 0 or -0, otherwise return false.\r\n *\r\n */\r\nP.isZero = function () {\r\n  return !!this.d && this.d[0] === 0;\r\n};\r\n\r\n\r\n/*\r\n * Return true if the value of this Decimal is less than `y`, otherwise return false.\r\n *\r\n */\r\nP.lessThan = P.lt = function (y) {\r\n  return this.cmp(y) < 0;\r\n};\r\n\r\n\r\n/*\r\n * Return true if the value of this Decimal is less than or equal to `y`, otherwise return false.\r\n *\r\n */\r\nP.lessThanOrEqualTo = P.lte = function (y) {\r\n  return this.cmp(y) < 1;\r\n};\r\n\r\n\r\n/*\r\n * Return the logarithm of the value of this Decimal to the specified base, rounded to `precision`\r\n * significant digits using rounding mode `rounding`.\r\n *\r\n * If no base is specified, return log[10](arg).\r\n *\r\n * log[base](arg) = ln(arg) / ln(base)\r\n *\r\n * The result will always be correctly rounded if the base of the log is 10, and 'almost always'\r\n * otherwise:\r\n *\r\n * Depending on the rounding mode, the result may be incorrectly rounded if the first fifteen\r\n * rounding digits are [49]99999999999999 or [50]00000000000000. In that case, the maximum error\r\n * between the result and the correctly rounded result will be one ulp (unit in the last place).\r\n *\r\n * log[-b](a)       = NaN\r\n * log[0](a)        = NaN\r\n * log[1](a)        = NaN\r\n * log[NaN](a)      = NaN\r\n * log[Infinity](a) = NaN\r\n * log[b](0)        = -Infinity\r\n * log[b](-0)       = -Infinity\r\n * log[b](-a)       = NaN\r\n * log[b](1)        = 0\r\n * log[b](Infinity) = Infinity\r\n * log[b](NaN)      = NaN\r\n *\r\n * [base] {number|string|Decimal} The base of the logarithm.\r\n *\r\n */\r\nP.logarithm = P.log = function (base) {\r\n  var isBase10, d, denominator, k, inf, num, sd, r,\r\n    arg = this,\r\n    Ctor = arg.constructor,\r\n    pr = Ctor.precision,\r\n    rm = Ctor.rounding,\r\n    guard = 5;\r\n\r\n  // Default base is 10.\r\n  if (base == null) {\r\n    base = new Ctor(10);\r\n    isBase10 = true;\r\n  } else {\r\n    base = new Ctor(base);\r\n    d = base.d;\r\n\r\n    // Return NaN if base is negative, or non-finite, or is 0 or 1.\r\n    if (base.s < 0 || !d || !d[0] || base.eq(1)) return new Ctor(NaN);\r\n\r\n    isBase10 = base.eq(10);\r\n  }\r\n\r\n  d = arg.d;\r\n\r\n  // Is arg negative, non-finite, 0 or 1?\r\n  if (arg.s < 0 || !d || !d[0] || arg.eq(1)) {\r\n    return new Ctor(d && !d[0] ? -1 / 0 : arg.s != 1 ? NaN : d ? 0 : 1 / 0);\r\n  }\r\n\r\n  // The result will have a non-terminating decimal expansion if base is 10 and arg is not an\r\n  // integer power of 10.\r\n  if (isBase10) {\r\n    if (d.length > 1) {\r\n      inf = true;\r\n    } else {\r\n      for (k = d[0]; k % 10 === 0;) k /= 10;\r\n      inf = k !== 1;\r\n    }\r\n  }\r\n\r\n  external = false;\r\n  sd = pr + guard;\r\n  num = naturalLogarithm(arg, sd);\r\n  denominator = isBase10 ? getLn10(Ctor, sd + 10) : naturalLogarithm(base, sd);\r\n\r\n  // The result will have 5 rounding digits.\r\n  r = divide(num, denominator, sd, 1);\r\n\r\n  // If at a rounding boundary, i.e. the result's rounding digits are [49]9999 or [50]0000,\r\n  // calculate 10 further digits.\r\n  //\r\n  // If the result is known to have an infinite decimal expansion, repeat this until it is clear\r\n  // that the result is above or below the boundary. Otherwise, if after calculating the 10\r\n  // further digits, the last 14 are nines, round up and assume the result is exact.\r\n  // Also assume the result is exact if the last 14 are zero.\r\n  //\r\n  // Example of a result that will be incorrectly rounded:\r\n  // log[1048576](4503599627370502) = 2.60000000000000009610279511444746...\r\n  // The above result correctly rounded using ROUND_CEIL to 1 decimal place should be 2.7, but it\r\n  // will be given as 2.6 as there are 15 zeros immediately after the requested decimal place, so\r\n  // the exact result would be assumed to be 2.6, which rounded using ROUND_CEIL to 1 decimal\r\n  // place is still 2.6.\r\n  if (checkRoundingDigits(r.d, k = pr, rm)) {\r\n\r\n    do {\r\n      sd += 10;\r\n      num = naturalLogarithm(arg, sd);\r\n      denominator = isBase10 ? getLn10(Ctor, sd + 10) : naturalLogarithm(base, sd);\r\n      r = divide(num, denominator, sd, 1);\r\n\r\n      if (!inf) {\r\n\r\n        // Check for 14 nines from the 2nd rounding digit, as the first may be 4.\r\n        if (+digitsToString(r.d).slice(k + 1, k + 15) + 1 == 1e14) {\r\n          r = finalise(r, pr + 1, 0);\r\n        }\r\n\r\n        break;\r\n      }\r\n    } while (checkRoundingDigits(r.d, k += 10, rm));\r\n  }\r\n\r\n  external = true;\r\n\r\n  return finalise(r, pr, rm);\r\n};\r\n\r\n\r\n/*\r\n * Return a new Decimal whose value is the maximum of the arguments and the value of this Decimal.\r\n *\r\n * arguments {number|string|Decimal}\r\n *\r\nP.max = function () {\r\n  Array.prototype.push.call(arguments, this);\r\n  return maxOrMin(this.constructor, arguments, 'lt');\r\n};\r\n */\r\n\r\n\r\n/*\r\n * Return a new Decimal whose value is the minimum of the arguments and the value of this Decimal.\r\n *\r\n * arguments {number|string|Decimal}\r\n *\r\nP.min = function () {\r\n  Array.prototype.push.call(arguments, this);\r\n  return maxOrMin(this.constructor, arguments, 'gt');\r\n};\r\n */\r\n\r\n\r\n/*\r\n *  n - 0 = n\r\n *  n - N = N\r\n *  n - I = -I\r\n *  0 - n = -n\r\n *  0 - 0 = 0\r\n *  0 - N = N\r\n *  0 - I = -I\r\n *  N - n = N\r\n *  N - 0 = N\r\n *  N - N = N\r\n *  N - I = N\r\n *  I - n = I\r\n *  I - 0 = I\r\n *  I - N = N\r\n *  I - I = N\r\n *\r\n * Return a new Decimal whose value is the value of this Decimal minus `y`, rounded to `precision`\r\n * significant digits using rounding mode `rounding`.\r\n *\r\n */\r\nP.minus = P.sub = function (y) {\r\n  var d, e, i, j, k, len, pr, rm, xd, xe, xLTy, yd,\r\n    x = this,\r\n    Ctor = x.constructor;\r\n\r\n  y = new Ctor(y);\r\n\r\n  // If either is not finite...\r\n  if (!x.d || !y.d) {\r\n\r\n    // Return NaN if either is NaN.\r\n    if (!x.s || !y.s) y = new Ctor(NaN);\r\n\r\n    // Return y negated if x is finite and y is ±Infinity.\r\n    else if (x.d) y.s = -y.s;\r\n\r\n    // Return x if y is finite and x is ±Infinity.\r\n    // Return x if both are ±Infinity with different signs.\r\n    // Return NaN if both are ±Infinity with the same sign.\r\n    else y = new Ctor(y.d || x.s !== y.s ? x : NaN);\r\n\r\n    return y;\r\n  }\r\n\r\n  // If signs differ...\r\n  if (x.s != y.s) {\r\n    y.s = -y.s;\r\n    return x.plus(y);\r\n  }\r\n\r\n  xd = x.d;\r\n  yd = y.d;\r\n  pr = Ctor.precision;\r\n  rm = Ctor.rounding;\r\n\r\n  // If either is zero...\r\n  if (!xd[0] || !yd[0]) {\r\n\r\n    // Return y negated if x is zero and y is non-zero.\r\n    if (yd[0]) y.s = -y.s;\r\n\r\n    // Return x if y is zero and x is non-zero.\r\n    else if (xd[0]) y = new Ctor(x);\r\n\r\n    // Return zero if both are zero.\r\n    // From IEEE 754 (2008) 6.3: 0 - 0 = -0 - -0 = -0 when rounding to -Infinity.\r\n    else return new Ctor(rm === 3 ? -0 : 0);\r\n\r\n    return external ? finalise(y, pr, rm) : y;\r\n  }\r\n\r\n  // x and y are finite, non-zero numbers with the same sign.\r\n\r\n  // Calculate base 1e7 exponents.\r\n  e = mathfloor(y.e / LOG_BASE);\r\n  xe = mathfloor(x.e / LOG_BASE);\r\n\r\n  xd = xd.slice();\r\n  k = xe - e;\r\n\r\n  // If base 1e7 exponents differ...\r\n  if (k) {\r\n    xLTy = k < 0;\r\n\r\n    if (xLTy) {\r\n      d = xd;\r\n      k = -k;\r\n      len = yd.length;\r\n    } else {\r\n      d = yd;\r\n      e = xe;\r\n      len = xd.length;\r\n    }\r\n\r\n    // Numbers with massively different exponents would result in a very high number of\r\n    // zeros needing to be prepended, but this can be avoided while still ensuring correct\r\n    // rounding by limiting the number of zeros to `Math.ceil(pr / LOG_BASE) + 2`.\r\n    i = Math.max(Math.ceil(pr / LOG_BASE), len) + 2;\r\n\r\n    if (k > i) {\r\n      k = i;\r\n      d.length = 1;\r\n    }\r\n\r\n    // Prepend zeros to equalise exponents.\r\n    d.reverse();\r\n    for (i = k; i--;) d.push(0);\r\n    d.reverse();\r\n\r\n  // Base 1e7 exponents equal.\r\n  } else {\r\n\r\n    // Check digits to determine which is the bigger number.\r\n\r\n    i = xd.length;\r\n    len = yd.length;\r\n    xLTy = i < len;\r\n    if (xLTy) len = i;\r\n\r\n    for (i = 0; i < len; i++) {\r\n      if (xd[i] != yd[i]) {\r\n        xLTy = xd[i] < yd[i];\r\n        break;\r\n      }\r\n    }\r\n\r\n    k = 0;\r\n  }\r\n\r\n  if (xLTy) {\r\n    d = xd;\r\n    xd = yd;\r\n    yd = d;\r\n    y.s = -y.s;\r\n  }\r\n\r\n  len = xd.length;\r\n\r\n  // Append zeros to `xd` if shorter.\r\n  // Don't add zeros to `yd` if shorter as subtraction only needs to start at `yd` length.\r\n  for (i = yd.length - len; i > 0; --i) xd[len++] = 0;\r\n\r\n  // Subtract yd from xd.\r\n  for (i = yd.length; i > k;) {\r\n\r\n    if (xd[--i] < yd[i]) {\r\n      for (j = i; j && xd[--j] === 0;) xd[j] = BASE - 1;\r\n      --xd[j];\r\n      xd[i] += BASE;\r\n    }\r\n\r\n    xd[i] -= yd[i];\r\n  }\r\n\r\n  // Remove trailing zeros.\r\n  for (; xd[--len] === 0;) xd.pop();\r\n\r\n  // Remove leading zeros and adjust exponent accordingly.\r\n  for (; xd[0] === 0; xd.shift()) --e;\r\n\r\n  // Zero?\r\n  if (!xd[0]) return new Ctor(rm === 3 ? -0 : 0);\r\n\r\n  y.d = xd;\r\n  y.e = getBase10Exponent(xd, e);\r\n\r\n  return external ? finalise(y, pr, rm) : y;\r\n};\r\n\r\n\r\n/*\r\n *   n % 0 =  N\r\n *   n % N =  N\r\n *   n % I =  n\r\n *   0 % n =  0\r\n *  -0 % n = -0\r\n *   0 % 0 =  N\r\n *   0 % N =  N\r\n *   0 % I =  0\r\n *   N % n =  N\r\n *   N % 0 =  N\r\n *   N % N =  N\r\n *   N % I =  N\r\n *   I % n =  N\r\n *   I % 0 =  N\r\n *   I % N =  N\r\n *   I % I =  N\r\n *\r\n * Return a new Decimal whose value is the value of this Decimal modulo `y`, rounded to\r\n * `precision` significant digits using rounding mode `rounding`.\r\n *\r\n * The result depends on the modulo mode.\r\n *\r\n */\r\nP.modulo = P.mod = function (y) {\r\n  var q,\r\n    x = this,\r\n    Ctor = x.constructor;\r\n\r\n  y = new Ctor(y);\r\n\r\n  // Return NaN if x is ±Infinity or NaN, or y is NaN or ±0.\r\n  if (!x.d || !y.s || y.d && !y.d[0]) return new Ctor(NaN);\r\n\r\n  // Return x if y is ±Infinity or x is ±0.\r\n  if (!y.d || x.d && !x.d[0]) {\r\n    return finalise(new Ctor(x), Ctor.precision, Ctor.rounding);\r\n  }\r\n\r\n  // Prevent rounding of intermediate calculations.\r\n  external = false;\r\n\r\n  if (Ctor.modulo == 9) {\r\n\r\n    // Euclidian division: q = sign(y) * floor(x / abs(y))\r\n    // result = x - q * y    where  0 <= result < abs(y)\r\n    q = divide(x, y.abs(), 0, 3, 1);\r\n    q.s *= y.s;\r\n  } else {\r\n    q = divide(x, y, 0, Ctor.modulo, 1);\r\n  }\r\n\r\n  q = q.times(y);\r\n\r\n  external = true;\r\n\r\n  return x.minus(q);\r\n};\r\n\r\n\r\n/*\r\n * Return a new Decimal whose value is the natural exponential of the value of this Decimal,\r\n * i.e. the base e raised to the power the value of this Decimal, rounded to `precision`\r\n * significant digits using rounding mode `rounding`.\r\n *\r\n */\r\nP.naturalExponential = P.exp = function () {\r\n  return naturalExponential(this);\r\n};\r\n\r\n\r\n/*\r\n * Return a new Decimal whose value is the natural logarithm of the value of this Decimal,\r\n * rounded to `precision` significant digits using rounding mode `rounding`.\r\n *\r\n */\r\nP.naturalLogarithm = P.ln = function () {\r\n  return naturalLogarithm(this);\r\n};\r\n\r\n\r\n/*\r\n * Return a new Decimal whose value is the value of this Decimal negated, i.e. as if multiplied by\r\n * -1.\r\n *\r\n */\r\nP.negated = P.neg = function () {\r\n  var x = new this.constructor(this);\r\n  x.s = -x.s;\r\n  return finalise(x);\r\n};\r\n\r\n\r\n/*\r\n *  n + 0 = n\r\n *  n + N = N\r\n *  n + I = I\r\n *  0 + n = n\r\n *  0 + 0 = 0\r\n *  0 + N = N\r\n *  0 + I = I\r\n *  N + n = N\r\n *  N + 0 = N\r\n *  N + N = N\r\n *  N + I = N\r\n *  I + n = I\r\n *  I + 0 = I\r\n *  I + N = N\r\n *  I + I = I\r\n *\r\n * Return a new Decimal whose value is the value of this Decimal plus `y`, rounded to `precision`\r\n * significant digits using rounding mode `rounding`.\r\n *\r\n */\r\nP.plus = P.add = function (y) {\r\n  var carry, d, e, i, k, len, pr, rm, xd, yd,\r\n    x = this,\r\n    Ctor = x.constructor;\r\n\r\n  y = new Ctor(y);\r\n\r\n  // If either is not finite...\r\n  if (!x.d || !y.d) {\r\n\r\n    // Return NaN if either is NaN.\r\n    if (!x.s || !y.s) y = new Ctor(NaN);\r\n\r\n    // Return x if y is finite and x is ±Infinity.\r\n    // Return x if both are ±Infinity with the same sign.\r\n    // Return NaN if both are ±Infinity with different signs.\r\n    // Return y if x is finite and y is ±Infinity.\r\n    else if (!x.d) y = new Ctor(y.d || x.s === y.s ? x : NaN);\r\n\r\n    return y;\r\n  }\r\n\r\n   // If signs differ...\r\n  if (x.s != y.s) {\r\n    y.s = -y.s;\r\n    return x.minus(y);\r\n  }\r\n\r\n  xd = x.d;\r\n  yd = y.d;\r\n  pr = Ctor.precision;\r\n  rm = Ctor.rounding;\r\n\r\n  // If either is zero...\r\n  if (!xd[0] || !yd[0]) {\r\n\r\n    // Return x if y is zero.\r\n    // Return y if y is non-zero.\r\n    if (!yd[0]) y = new Ctor(x);\r\n\r\n    return external ? finalise(y, pr, rm) : y;\r\n  }\r\n\r\n  // x and y are finite, non-zero numbers with the same sign.\r\n\r\n  // Calculate base 1e7 exponents.\r\n  k = mathfloor(x.e / LOG_BASE);\r\n  e = mathfloor(y.e / LOG_BASE);\r\n\r\n  xd = xd.slice();\r\n  i = k - e;\r\n\r\n  // If base 1e7 exponents differ...\r\n  if (i) {\r\n\r\n    if (i < 0) {\r\n      d = xd;\r\n      i = -i;\r\n      len = yd.length;\r\n    } else {\r\n      d = yd;\r\n      e = k;\r\n      len = xd.length;\r\n    }\r\n\r\n    // Limit number of zeros prepended to max(ceil(pr / LOG_BASE), len) + 1.\r\n    k = Math.ceil(pr / LOG_BASE);\r\n    len = k > len ? k + 1 : len + 1;\r\n\r\n    if (i > len) {\r\n      i = len;\r\n      d.length = 1;\r\n    }\r\n\r\n    // Prepend zeros to equalise exponents. Note: Faster to use reverse then do unshifts.\r\n    d.reverse();\r\n    for (; i--;) d.push(0);\r\n    d.reverse();\r\n  }\r\n\r\n  len = xd.length;\r\n  i = yd.length;\r\n\r\n  // If yd is longer than xd, swap xd and yd so xd points to the longer array.\r\n  if (len - i < 0) {\r\n    i = len;\r\n    d = yd;\r\n    yd = xd;\r\n    xd = d;\r\n  }\r\n\r\n  // Only start adding at yd.length - 1 as the further digits of xd can be left as they are.\r\n  for (carry = 0; i;) {\r\n    carry = (xd[--i] = xd[i] + yd[i] + carry) / BASE | 0;\r\n    xd[i] %= BASE;\r\n  }\r\n\r\n  if (carry) {\r\n    xd.unshift(carry);\r\n    ++e;\r\n  }\r\n\r\n  // Remove trailing zeros.\r\n  // No need to check for zero, as +x + +y != 0 && -x + -y != 0\r\n  for (len = xd.length; xd[--len] == 0;) xd.pop();\r\n\r\n  y.d = xd;\r\n  y.e = getBase10Exponent(xd, e);\r\n\r\n  return external ? finalise(y, pr, rm) : y;\r\n};\r\n\r\n\r\n/*\r\n * Return the number of significant digits of the value of this Decimal.\r\n *\r\n * [z] {boolean|number} Whether to count integer-part trailing zeros: true, false, 1 or 0.\r\n *\r\n */\r\nP.precision = P.sd = function (z) {\r\n  var k,\r\n    x = this;\r\n\r\n  if (z !== void 0 && z !== !!z && z !== 1 && z !== 0) throw Error(invalidArgument + z);\r\n\r\n  if (x.d) {\r\n    k = getPrecision(x.d);\r\n    if (z && x.e + 1 > k) k = x.e + 1;\r\n  } else {\r\n    k = NaN;\r\n  }\r\n\r\n  return k;\r\n};\r\n\r\n\r\n/*\r\n * Return a new Decimal whose value is the value of this Decimal rounded to a whole number using\r\n * rounding mode `rounding`.\r\n *\r\n */\r\nP.round = function () {\r\n  var x = this,\r\n    Ctor = x.constructor;\r\n\r\n  return finalise(new Ctor(x), x.e + 1, Ctor.rounding);\r\n};\r\n\r\n\r\n/*\r\n * Return a new Decimal whose value is the sine of the value in radians of this Decimal.\r\n *\r\n * Domain: [-Infinity, Infinity]\r\n * Range: [-1, 1]\r\n *\r\n * sin(x) = x - x^3/3! + x^5/5! - ...\r\n *\r\n * sin(0)         = 0\r\n * sin(-0)        = -0\r\n * sin(Infinity)  = NaN\r\n * sin(-Infinity) = NaN\r\n * sin(NaN)       = NaN\r\n *\r\n */\r\nP.sine = P.sin = function () {\r\n  var pr, rm,\r\n    x = this,\r\n    Ctor = x.constructor;\r\n\r\n  if (!x.isFinite()) return new Ctor(NaN);\r\n  if (x.isZero()) return new Ctor(x);\r\n\r\n  pr = Ctor.precision;\r\n  rm = Ctor.rounding;\r\n  Ctor.precision = pr + Math.max(x.e, x.sd()) + LOG_BASE;\r\n  Ctor.rounding = 1;\r\n\r\n  x = sine(Ctor, toLessThanHalfPi(Ctor, x));\r\n\r\n  Ctor.precision = pr;\r\n  Ctor.rounding = rm;\r\n\r\n  return finalise(quadrant > 2 ? x.neg() : x, pr, rm, true);\r\n};\r\n\r\n\r\n/*\r\n * Return a new Decimal whose value is the square root of this Decimal, rounded to `precision`\r\n * significant digits using rounding mode `rounding`.\r\n *\r\n *  sqrt(-n) =  N\r\n *  sqrt(N)  =  N\r\n *  sqrt(-I) =  N\r\n *  sqrt(I)  =  I\r\n *  sqrt(0)  =  0\r\n *  sqrt(-0) = -0\r\n *\r\n */\r\nP.squareRoot = P.sqrt = function () {\r\n  var m, n, sd, r, rep, t,\r\n    x = this,\r\n    d = x.d,\r\n    e = x.e,\r\n    s = x.s,\r\n    Ctor = x.constructor;\r\n\r\n  // Negative/NaN/Infinity/zero?\r\n  if (s !== 1 || !d || !d[0]) {\r\n    return new Ctor(!s || s < 0 && (!d || d[0]) ? NaN : d ? x : 1 / 0);\r\n  }\r\n\r\n  external = false;\r\n\r\n  // Initial estimate.\r\n  s = Math.sqrt(+x);\r\n\r\n  // Math.sqrt underflow/overflow?\r\n  // Pass x to Math.sqrt as integer, then adjust the exponent of the result.\r\n  if (s == 0 || s == 1 / 0) {\r\n    n = digitsToString(d);\r\n\r\n    if ((n.length + e) % 2 == 0) n += '0';\r\n    s = Math.sqrt(n);\r\n    e = mathfloor((e + 1) / 2) - (e < 0 || e % 2);\r\n\r\n    if (s == 1 / 0) {\r\n      n = '5e' + e;\r\n    } else {\r\n      n = s.toExponential();\r\n      n = n.slice(0, n.indexOf('e') + 1) + e;\r\n    }\r\n\r\n    r = new Ctor(n);\r\n  } else {\r\n    r = new Ctor(s.toString());\r\n  }\r\n\r\n  sd = (e = Ctor.precision) + 3;\r\n\r\n  // Newton-Raphson iteration.\r\n  for (;;) {\r\n    t = r;\r\n    r = t.plus(divide(x, t, sd + 2, 1)).times(0.5);\r\n\r\n    // TODO? Replace with for-loop and checkRoundingDigits.\r\n    if (digitsToString(t.d).slice(0, sd) === (n = digitsToString(r.d)).slice(0, sd)) {\r\n      n = n.slice(sd - 3, sd + 1);\r\n\r\n      // The 4th rounding digit may be in error by -1 so if the 4 rounding digits are 9999 or\r\n      // 4999, i.e. approaching a rounding boundary, continue the iteration.\r\n      if (n == '9999' || !rep && n == '4999') {\r\n\r\n        // On the first iteration only, check to see if rounding up gives the exact result as the\r\n        // nines may infinitely repeat.\r\n        if (!rep) {\r\n          finalise(t, e + 1, 0);\r\n\r\n          if (t.times(t).eq(x)) {\r\n            r = t;\r\n            break;\r\n          }\r\n        }\r\n\r\n        sd += 4;\r\n        rep = 1;\r\n      } else {\r\n\r\n        // If the rounding digits are null, 0{0,4} or 50{0,3}, check for an exact result.\r\n        // If not, then there are further digits and m will be truthy.\r\n        if (!+n || !+n.slice(1) && n.charAt(0) == '5') {\r\n\r\n          // Truncate to the first rounding digit.\r\n          finalise(r, e + 1, 1);\r\n          m = !r.times(r).eq(x);\r\n        }\r\n\r\n        break;\r\n      }\r\n    }\r\n  }\r\n\r\n  external = true;\r\n\r\n  return finalise(r, e, Ctor.rounding, m);\r\n};\r\n\r\n\r\n/*\r\n * Return a new Decimal whose value is the tangent of the value in radians of this Decimal.\r\n *\r\n * Domain: [-Infinity, Infinity]\r\n * Range: [-Infinity, Infinity]\r\n *\r\n * tan(0)         = 0\r\n * tan(-0)        = -0\r\n * tan(Infinity)  = NaN\r\n * tan(-Infinity) = NaN\r\n * tan(NaN)       = NaN\r\n *\r\n */\r\nP.tangent = P.tan = function () {\r\n  var pr, rm,\r\n    x = this,\r\n    Ctor = x.constructor;\r\n\r\n  if (!x.isFinite()) return new Ctor(NaN);\r\n  if (x.isZero()) return new Ctor(x);\r\n\r\n  pr = Ctor.precision;\r\n  rm = Ctor.rounding;\r\n  Ctor.precision = pr + 10;\r\n  Ctor.rounding = 1;\r\n\r\n  x = x.sin();\r\n  x.s = 1;\r\n  x = divide(x, new Ctor(1).minus(x.times(x)).sqrt(), pr + 10, 0);\r\n\r\n  Ctor.precision = pr;\r\n  Ctor.rounding = rm;\r\n\r\n  return finalise(quadrant == 2 || quadrant == 4 ? x.neg() : x, pr, rm, true);\r\n};\r\n\r\n\r\n/*\r\n *  n * 0 = 0\r\n *  n * N = N\r\n *  n * I = I\r\n *  0 * n = 0\r\n *  0 * 0 = 0\r\n *  0 * N = N\r\n *  0 * I = N\r\n *  N * n = N\r\n *  N * 0 = N\r\n *  N * N = N\r\n *  N * I = N\r\n *  I * n = I\r\n *  I * 0 = N\r\n *  I * N = N\r\n *  I * I = I\r\n *\r\n * Return a new Decimal whose value is this Decimal times `y`, rounded to `precision` significant\r\n * digits using rounding mode `rounding`.\r\n *\r\n */\r\nP.times = P.mul = function (y) {\r\n  var carry, e, i, k, r, rL, t, xdL, ydL,\r\n    x = this,\r\n    Ctor = x.constructor,\r\n    xd = x.d,\r\n    yd = (y = new Ctor(y)).d;\r\n\r\n  y.s *= x.s;\r\n\r\n   // If either is NaN, ±Infinity or ±0...\r\n  if (!xd || !xd[0] || !yd || !yd[0]) {\r\n\r\n    return new Ctor(!y.s || xd && !xd[0] && !yd || yd && !yd[0] && !xd\r\n\r\n      // Return NaN if either is NaN.\r\n      // Return NaN if x is ±0 and y is ±Infinity, or y is ±0 and x is ±Infinity.\r\n      ? NaN\r\n\r\n      // Return ±Infinity if either is ±Infinity.\r\n      // Return ±0 if either is ±0.\r\n      : !xd || !yd ? y.s / 0 : y.s * 0);\r\n  }\r\n\r\n  e = mathfloor(x.e / LOG_BASE) + mathfloor(y.e / LOG_BASE);\r\n  xdL = xd.length;\r\n  ydL = yd.length;\r\n\r\n  // Ensure xd points to the longer array.\r\n  if (xdL < ydL) {\r\n    r = xd;\r\n    xd = yd;\r\n    yd = r;\r\n    rL = xdL;\r\n    xdL = ydL;\r\n    ydL = rL;\r\n  }\r\n\r\n  // Initialise the result array with zeros.\r\n  r = [];\r\n  rL = xdL + ydL;\r\n  for (i = rL; i--;) r.push(0);\r\n\r\n  // Multiply!\r\n  for (i = ydL; --i >= 0;) {\r\n    carry = 0;\r\n    for (k = xdL + i; k > i;) {\r\n      t = r[k] + yd[i] * xd[k - i - 1] + carry;\r\n      r[k--] = t % BASE | 0;\r\n      carry = t / BASE | 0;\r\n    }\r\n\r\n    r[k] = (r[k] + carry) % BASE | 0;\r\n  }\r\n\r\n  // Remove trailing zeros.\r\n  for (; !r[--rL];) r.pop();\r\n\r\n  if (carry) ++e;\r\n  else r.shift();\r\n\r\n  y.d = r;\r\n  y.e = getBase10Exponent(r, e);\r\n\r\n  return external ? finalise(y, Ctor.precision, Ctor.rounding) : y;\r\n};\r\n\r\n\r\n/*\r\n * Return a string representing the value of this Decimal in base 2, round to `sd` significant\r\n * digits using rounding mode `rm`.\r\n *\r\n * If the optional `sd` argument is present then return binary exponential notation.\r\n *\r\n * [sd] {number} Significant digits. Integer, 1 to MAX_DIGITS inclusive.\r\n * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.\r\n *\r\n */\r\nP.toBinary = function (sd, rm) {\r\n  return toStringBinary(this, 2, sd, rm);\r\n};\r\n\r\n\r\n/*\r\n * Return a new Decimal whose value is the value of this Decimal rounded to a maximum of `dp`\r\n * decimal places using rounding mode `rm` or `rounding` if `rm` is omitted.\r\n *\r\n * If `dp` is omitted, return a new Decimal whose value is the value of this Decimal.\r\n *\r\n * [dp] {number} Decimal places. Integer, 0 to MAX_DIGITS inclusive.\r\n * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.\r\n *\r\n */\r\nP.toDecimalPlaces = P.toDP = function (dp, rm) {\r\n  var x = this,\r\n    Ctor = x.constructor;\r\n\r\n  x = new Ctor(x);\r\n  if (dp === void 0) return x;\r\n\r\n  checkInt32(dp, 0, MAX_DIGITS);\r\n\r\n  if (rm === void 0) rm = Ctor.rounding;\r\n  else checkInt32(rm, 0, 8);\r\n\r\n  return finalise(x, dp + x.e + 1, rm);\r\n};\r\n\r\n\r\n/*\r\n * Return a string representing the value of this Decimal in exponential notation rounded to\r\n * `dp` fixed decimal places using rounding mode `rounding`.\r\n *\r\n * [dp] {number} Decimal places. Integer, 0 to MAX_DIGITS inclusive.\r\n * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.\r\n *\r\n */\r\nP.toExponential = function (dp, rm) {\r\n  var str,\r\n    x = this,\r\n    Ctor = x.constructor;\r\n\r\n  if (dp === void 0) {\r\n    str = finiteToString(x, true);\r\n  } else {\r\n    checkInt32(dp, 0, MAX_DIGITS);\r\n\r\n    if (rm === void 0) rm = Ctor.rounding;\r\n    else checkInt32(rm, 0, 8);\r\n\r\n    x = finalise(new Ctor(x), dp + 1, rm);\r\n    str = finiteToString(x, true, dp + 1);\r\n  }\r\n\r\n  return x.isNeg() && !x.isZero() ? '-' + str : str;\r\n};\r\n\r\n\r\n/*\r\n * Return a string representing the value of this Decimal in normal (fixed-point) notation to\r\n * `dp` fixed decimal places and rounded using rounding mode `rm` or `rounding` if `rm` is\r\n * omitted.\r\n *\r\n * As with JavaScript numbers, (-0).toFixed(0) is '0', but e.g. (-0.00001).toFixed(0) is '-0'.\r\n *\r\n * [dp] {number} Decimal places. Integer, 0 to MAX_DIGITS inclusive.\r\n * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.\r\n *\r\n * (-0).toFixed(0) is '0', but (-0.1).toFixed(0) is '-0'.\r\n * (-0).toFixed(1) is '0.0', but (-0.01).toFixed(1) is '-0.0'.\r\n * (-0).toFixed(3) is '0.000'.\r\n * (-0.5).toFixed(0) is '-0'.\r\n *\r\n */\r\nP.toFixed = function (dp, rm) {\r\n  var str, y,\r\n    x = this,\r\n    Ctor = x.constructor;\r\n\r\n  if (dp === void 0) {\r\n    str = finiteToString(x);\r\n  } else {\r\n    checkInt32(dp, 0, MAX_DIGITS);\r\n\r\n    if (rm === void 0) rm = Ctor.rounding;\r\n    else checkInt32(rm, 0, 8);\r\n\r\n    y = finalise(new Ctor(x), dp + x.e + 1, rm);\r\n    str = finiteToString(y, false, dp + y.e + 1);\r\n  }\r\n\r\n  // To determine whether to add the minus sign look at the value before it was rounded,\r\n  // i.e. look at `x` rather than `y`.\r\n  return x.isNeg() && !x.isZero() ? '-' + str : str;\r\n};\r\n\r\n\r\n/*\r\n * Return an array representing the value of this Decimal as a simple fraction with an integer\r\n * numerator and an integer denominator.\r\n *\r\n * The denominator will be a positive non-zero value less than or equal to the specified maximum\r\n * denominator. If a maximum denominator is not specified, the denominator will be the lowest\r\n * value necessary to represent the number exactly.\r\n *\r\n * [maxD] {number|string|Decimal} Maximum denominator. Integer >= 1 and < Infinity.\r\n *\r\n */\r\nP.toFraction = function (maxD) {\r\n  var d, d0, d1, d2, e, k, n, n0, n1, pr, q, r,\r\n    x = this,\r\n    xd = x.d,\r\n    Ctor = x.constructor;\r\n\r\n  if (!xd) return new Ctor(x);\r\n\r\n  n1 = d0 = new Ctor(1);\r\n  d1 = n0 = new Ctor(0);\r\n\r\n  d = new Ctor(d1);\r\n  e = d.e = getPrecision(xd) - x.e - 1;\r\n  k = e % LOG_BASE;\r\n  d.d[0] = mathpow(10, k < 0 ? LOG_BASE + k : k);\r\n\r\n  if (maxD == null) {\r\n\r\n    // d is 10**e, the minimum max-denominator needed.\r\n    maxD = e > 0 ? d : n1;\r\n  } else {\r\n    n = new Ctor(maxD);\r\n    if (!n.isInt() || n.lt(n1)) throw Error(invalidArgument + n);\r\n    maxD = n.gt(d) ? (e > 0 ? d : n1) : n;\r\n  }\r\n\r\n  external = false;\r\n  n = new Ctor(digitsToString(xd));\r\n  pr = Ctor.precision;\r\n  Ctor.precision = e = xd.length * LOG_BASE * 2;\r\n\r\n  for (;;)  {\r\n    q = divide(n, d, 0, 1, 1);\r\n    d2 = d0.plus(q.times(d1));\r\n    if (d2.cmp(maxD) == 1) break;\r\n    d0 = d1;\r\n    d1 = d2;\r\n    d2 = n1;\r\n    n1 = n0.plus(q.times(d2));\r\n    n0 = d2;\r\n    d2 = d;\r\n    d = n.minus(q.times(d2));\r\n    n = d2;\r\n  }\r\n\r\n  d2 = divide(maxD.minus(d0), d1, 0, 1, 1);\r\n  n0 = n0.plus(d2.times(n1));\r\n  d0 = d0.plus(d2.times(d1));\r\n  n0.s = n1.s = x.s;\r\n\r\n  // Determine which fraction is closer to x, n0/d0 or n1/d1?\r\n  r = divide(n1, d1, e, 1).minus(x).abs().cmp(divide(n0, d0, e, 1).minus(x).abs()) < 1\r\n      ? [n1, d1] : [n0, d0];\r\n\r\n  Ctor.precision = pr;\r\n  external = true;\r\n\r\n  return r;\r\n};\r\n\r\n\r\n/*\r\n * Return a string representing the value of this Decimal in base 16, round to `sd` significant\r\n * digits using rounding mode `rm`.\r\n *\r\n * If the optional `sd` argument is present then return binary exponential notation.\r\n *\r\n * [sd] {number} Significant digits. Integer, 1 to MAX_DIGITS inclusive.\r\n * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.\r\n *\r\n */\r\nP.toHexadecimal = P.toHex = function (sd, rm) {\r\n  return toStringBinary(this, 16, sd, rm);\r\n};\r\n\r\n\r\n/*\r\n * Returns a new Decimal whose value is the nearest multiple of `y` in the direction of rounding\r\n * mode `rm`, or `Decimal.rounding` if `rm` is omitted, to the value of this Decimal.\r\n *\r\n * The return value will always have the same sign as this Decimal, unless either this Decimal\r\n * or `y` is NaN, in which case the return value will be also be NaN.\r\n *\r\n * The return value is not affected by the value of `precision`.\r\n *\r\n * y {number|string|Decimal} The magnitude to round to a multiple of.\r\n * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.\r\n *\r\n * 'toNearest() rounding mode not an integer: {rm}'\r\n * 'toNearest() rounding mode out of range: {rm}'\r\n *\r\n */\r\nP.toNearest = function (y, rm) {\r\n  var x = this,\r\n    Ctor = x.constructor;\r\n\r\n  x = new Ctor(x);\r\n\r\n  if (y == null) {\r\n\r\n    // If x is not finite, return x.\r\n    if (!x.d) return x;\r\n\r\n    y = new Ctor(1);\r\n    rm = Ctor.rounding;\r\n  } else {\r\n    y = new Ctor(y);\r\n    if (rm === void 0) {\r\n      rm = Ctor.rounding;\r\n    } else {\r\n      checkInt32(rm, 0, 8);\r\n    }\r\n\r\n    // If x is not finite, return x if y is not NaN, else NaN.\r\n    if (!x.d) return y.s ? x : y;\r\n\r\n    // If y is not finite, return Infinity with the sign of x if y is Infinity, else NaN.\r\n    if (!y.d) {\r\n      if (y.s) y.s = x.s;\r\n      return y;\r\n    }\r\n  }\r\n\r\n  // If y is not zero, calculate the nearest multiple of y to x.\r\n  if (y.d[0]) {\r\n    external = false;\r\n    x = divide(x, y, 0, rm, 1).times(y);\r\n    external = true;\r\n    finalise(x);\r\n\r\n  // If y is zero, return zero with the sign of x.\r\n  } else {\r\n    y.s = x.s;\r\n    x = y;\r\n  }\r\n\r\n  return x;\r\n};\r\n\r\n\r\n/*\r\n * Return the value of this Decimal converted to a number primitive.\r\n * Zero keeps its sign.\r\n *\r\n */\r\nP.toNumber = function () {\r\n  return +this;\r\n};\r\n\r\n\r\n/*\r\n * Return a string representing the value of this Decimal in base 8, round to `sd` significant\r\n * digits using rounding mode `rm`.\r\n *\r\n * If the optional `sd` argument is present then return binary exponential notation.\r\n *\r\n * [sd] {number} Significant digits. Integer, 1 to MAX_DIGITS inclusive.\r\n * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.\r\n *\r\n */\r\nP.toOctal = function (sd, rm) {\r\n  return toStringBinary(this, 8, sd, rm);\r\n};\r\n\r\n\r\n/*\r\n * Return a new Decimal whose value is the value of this Decimal raised to the power `y`, rounded\r\n * to `precision` significant digits using rounding mode `rounding`.\r\n *\r\n * ECMAScript compliant.\r\n *\r\n *   pow(x, NaN)                           = NaN\r\n *   pow(x, ±0)                            = 1\r\n\r\n *   pow(NaN, non-zero)                    = NaN\r\n *   pow(abs(x) > 1, +Infinity)            = +Infinity\r\n *   pow(abs(x) > 1, -Infinity)            = +0\r\n *   pow(abs(x) == 1, ±Infinity)           = NaN\r\n *   pow(abs(x) < 1, +Infinity)            = +0\r\n *   pow(abs(x) < 1, -Infinity)            = +Infinity\r\n *   pow(+Infinity, y > 0)                 = +Infinity\r\n *   pow(+Infinity, y < 0)                 = +0\r\n *   pow(-Infinity, odd integer > 0)       = -Infinity\r\n *   pow(-Infinity, even integer > 0)      = +Infinity\r\n *   pow(-Infinity, odd integer < 0)       = -0\r\n *   pow(-Infinity, even integer < 0)      = +0\r\n *   pow(+0, y > 0)                        = +0\r\n *   pow(+0, y < 0)                        = +Infinity\r\n *   pow(-0, odd integer > 0)              = -0\r\n *   pow(-0, even integer > 0)             = +0\r\n *   pow(-0, odd integer < 0)              = -Infinity\r\n *   pow(-0, even integer < 0)             = +Infinity\r\n *   pow(finite x < 0, finite non-integer) = NaN\r\n *\r\n * For non-integer or very large exponents pow(x, y) is calculated using\r\n *\r\n *   x^y = exp(y*ln(x))\r\n *\r\n * Assuming the first 15 rounding digits are each equally likely to be any digit 0-9, the\r\n * probability of an incorrectly rounded result\r\n * P([49]9{14} | [50]0{14}) = 2 * 0.2 * 10^-14 = 4e-15 = 1/2.5e+14\r\n * i.e. 1 in 250,000,000,000,000\r\n *\r\n * If a result is incorrectly rounded the maximum error will be 1 ulp (unit in last place).\r\n *\r\n * y {number|string|Decimal} The power to which to raise this Decimal.\r\n *\r\n */\r\nP.toPower = P.pow = function (y) {\r\n  var e, k, pr, r, rm, s,\r\n    x = this,\r\n    Ctor = x.constructor,\r\n    yn = +(y = new Ctor(y));\r\n\r\n  // Either ±Infinity, NaN or ±0?\r\n  if (!x.d || !y.d || !x.d[0] || !y.d[0]) return new Ctor(mathpow(+x, yn));\r\n\r\n  x = new Ctor(x);\r\n\r\n  if (x.eq(1)) return x;\r\n\r\n  pr = Ctor.precision;\r\n  rm = Ctor.rounding;\r\n\r\n  if (y.eq(1)) return finalise(x, pr, rm);\r\n\r\n  // y exponent\r\n  e = mathfloor(y.e / LOG_BASE);\r\n\r\n  // If y is a small integer use the 'exponentiation by squaring' algorithm.\r\n  if (e >= y.d.length - 1 && (k = yn < 0 ? -yn : yn) <= MAX_SAFE_INTEGER) {\r\n    r = intPow(Ctor, x, k, pr);\r\n    return y.s < 0 ? new Ctor(1).div(r) : finalise(r, pr, rm);\r\n  }\r\n\r\n  s = x.s;\r\n\r\n  // if x is negative\r\n  if (s < 0) {\r\n\r\n    // if y is not an integer\r\n    if (e < y.d.length - 1) return new Ctor(NaN);\r\n\r\n    // Result is positive if x is negative and the last digit of integer y is even.\r\n    if ((y.d[e] & 1) == 0) s = 1;\r\n\r\n    // if x.eq(-1)\r\n    if (x.e == 0 && x.d[0] == 1 && x.d.length == 1) {\r\n      x.s = s;\r\n      return x;\r\n    }\r\n  }\r\n\r\n  // Estimate result exponent.\r\n  // x^y = 10^e,  where e = y * log10(x)\r\n  // log10(x) = log10(x_significand) + x_exponent\r\n  // log10(x_significand) = ln(x_significand) / ln(10)\r\n  k = mathpow(+x, yn);\r\n  e = k == 0 || !isFinite(k)\r\n    ? mathfloor(yn * (Math.log('0.' + digitsToString(x.d)) / Math.LN10 + x.e + 1))\r\n    : new Ctor(k + '').e;\r\n\r\n  // Exponent estimate may be incorrect e.g. x: 0.999999999999999999, y: 2.29, e: 0, r.e: -1.\r\n\r\n  // Overflow/underflow?\r\n  if (e > Ctor.maxE + 1 || e < Ctor.minE - 1) return new Ctor(e > 0 ? s / 0 : 0);\r\n\r\n  external = false;\r\n  Ctor.rounding = x.s = 1;\r\n\r\n  // Estimate the extra guard digits needed to ensure five correct rounding digits from\r\n  // naturalLogarithm(x). Example of failure without these extra digits (precision: 10):\r\n  // new Decimal(2.32456).pow('2087987436534566.46411')\r\n  // should be 1.162377823e+764914905173815, but is 1.162355823e+764914905173815\r\n  k = Math.min(12, (e + '').length);\r\n\r\n  // r = x^y = exp(y*ln(x))\r\n  r = naturalExponential(y.times(naturalLogarithm(x, pr + k)), pr);\r\n\r\n  // r may be Infinity, e.g. (0.9999999999999999).pow(-1e+40)\r\n  if (r.d) {\r\n\r\n    // Truncate to the required precision plus five rounding digits.\r\n    r = finalise(r, pr + 5, 1);\r\n\r\n    // If the rounding digits are [49]9999 or [50]0000 increase the precision by 10 and recalculate\r\n    // the result.\r\n    if (checkRoundingDigits(r.d, pr, rm)) {\r\n      e = pr + 10;\r\n\r\n      // Truncate to the increased precision plus five rounding digits.\r\n      r = finalise(naturalExponential(y.times(naturalLogarithm(x, e + k)), e), e + 5, 1);\r\n\r\n      // Check for 14 nines from the 2nd rounding digit (the first rounding digit may be 4 or 9).\r\n      if (+digitsToString(r.d).slice(pr + 1, pr + 15) + 1 == 1e14) {\r\n        r = finalise(r, pr + 1, 0);\r\n      }\r\n    }\r\n  }\r\n\r\n  r.s = s;\r\n  external = true;\r\n  Ctor.rounding = rm;\r\n\r\n  return finalise(r, pr, rm);\r\n};\r\n\r\n\r\n/*\r\n * Return a string representing the value of this Decimal rounded to `sd` significant digits\r\n * using rounding mode `rounding`.\r\n *\r\n * Return exponential notation if `sd` is less than the number of digits necessary to represent\r\n * the integer part of the value in normal notation.\r\n *\r\n * [sd] {number} Significant digits. Integer, 1 to MAX_DIGITS inclusive.\r\n * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.\r\n *\r\n */\r\nP.toPrecision = function (sd, rm) {\r\n  var str,\r\n    x = this,\r\n    Ctor = x.constructor;\r\n\r\n  if (sd === void 0) {\r\n    str = finiteToString(x, x.e <= Ctor.toExpNeg || x.e >= Ctor.toExpPos);\r\n  } else {\r\n    checkInt32(sd, 1, MAX_DIGITS);\r\n\r\n    if (rm === void 0) rm = Ctor.rounding;\r\n    else checkInt32(rm, 0, 8);\r\n\r\n    x = finalise(new Ctor(x), sd, rm);\r\n    str = finiteToString(x, sd <= x.e || x.e <= Ctor.toExpNeg, sd);\r\n  }\r\n\r\n  return x.isNeg() && !x.isZero() ? '-' + str : str;\r\n};\r\n\r\n\r\n/*\r\n * Return a new Decimal whose value is the value of this Decimal rounded to a maximum of `sd`\r\n * significant digits using rounding mode `rm`, or to `precision` and `rounding` respectively if\r\n * omitted.\r\n *\r\n * [sd] {number} Significant digits. Integer, 1 to MAX_DIGITS inclusive.\r\n * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.\r\n *\r\n * 'toSD() digits out of range: {sd}'\r\n * 'toSD() digits not an integer: {sd}'\r\n * 'toSD() rounding mode not an integer: {rm}'\r\n * 'toSD() rounding mode out of range: {rm}'\r\n *\r\n */\r\nP.toSignificantDigits = P.toSD = function (sd, rm) {\r\n  var x = this,\r\n    Ctor = x.constructor;\r\n\r\n  if (sd === void 0) {\r\n    sd = Ctor.precision;\r\n    rm = Ctor.rounding;\r\n  } else {\r\n    checkInt32(sd, 1, MAX_DIGITS);\r\n\r\n    if (rm === void 0) rm = Ctor.rounding;\r\n    else checkInt32(rm, 0, 8);\r\n  }\r\n\r\n  return finalise(new Ctor(x), sd, rm);\r\n};\r\n\r\n\r\n/*\r\n * Return a string representing the value of this Decimal.\r\n *\r\n * Return exponential notation if this Decimal has a positive exponent equal to or greater than\r\n * `toExpPos`, or a negative exponent equal to or less than `toExpNeg`.\r\n *\r\n */\r\nP.toString = function () {\r\n  var x = this,\r\n    Ctor = x.constructor,\r\n    str = finiteToString(x, x.e <= Ctor.toExpNeg || x.e >= Ctor.toExpPos);\r\n\r\n  return x.isNeg() && !x.isZero() ? '-' + str : str;\r\n};\r\n\r\n\r\n/*\r\n * Return a new Decimal whose value is the value of this Decimal truncated to a whole number.\r\n *\r\n */\r\nP.truncated = P.trunc = function () {\r\n  return finalise(new this.constructor(this), this.e + 1, 1);\r\n};\r\n\r\n\r\n/*\r\n * Return a string representing the value of this Decimal.\r\n * Unlike `toString`, negative zero will include the minus sign.\r\n *\r\n */\r\nP.valueOf = P.toJSON = function () {\r\n  var x = this,\r\n    Ctor = x.constructor,\r\n    str = finiteToString(x, x.e <= Ctor.toExpNeg || x.e >= Ctor.toExpPos);\r\n\r\n  return x.isNeg() ? '-' + str : str;\r\n};\r\n\r\n\r\n// Helper functions for Decimal.prototype (P) and/or Decimal methods, and their callers.\r\n\r\n\r\n/*\r\n *  digitsToString           P.cubeRoot, P.logarithm, P.squareRoot, P.toFraction, P.toPower,\r\n *                           finiteToString, naturalExponential, naturalLogarithm\r\n *  checkInt32               P.toDecimalPlaces, P.toExponential, P.toFixed, P.toNearest,\r\n *                           P.toPrecision, P.toSignificantDigits, toStringBinary, random\r\n *  checkRoundingDigits      P.logarithm, P.toPower, naturalExponential, naturalLogarithm\r\n *  convertBase              toStringBinary, parseOther\r\n *  cos                      P.cos\r\n *  divide                   P.atanh, P.cubeRoot, P.dividedBy, P.dividedToIntegerBy,\r\n *                           P.logarithm, P.modulo, P.squareRoot, P.tan, P.tanh, P.toFraction,\r\n *                           P.toNearest, toStringBinary, naturalExponential, naturalLogarithm,\r\n *                           taylorSeries, atan2, parseOther\r\n *  finalise                 P.absoluteValue, P.atan, P.atanh, P.ceil, P.cos, P.cosh,\r\n *                           P.cubeRoot, P.dividedToIntegerBy, P.floor, P.logarithm, P.minus,\r\n *                           P.modulo, P.negated, P.plus, P.round, P.sin, P.sinh, P.squareRoot,\r\n *                           P.tan, P.times, P.toDecimalPlaces, P.toExponential, P.toFixed,\r\n *                           P.toNearest, P.toPower, P.toPrecision, P.toSignificantDigits,\r\n *                           P.truncated, divide, getLn10, getPi, naturalExponential,\r\n *                           naturalLogarithm, ceil, floor, round, trunc\r\n *  finiteToString           P.toExponential, P.toFixed, P.toPrecision, P.toString, P.valueOf,\r\n *                           toStringBinary\r\n *  getBase10Exponent        P.minus, P.plus, P.times, parseOther\r\n *  getLn10                  P.logarithm, naturalLogarithm\r\n *  getPi                    P.acos, P.asin, P.atan, toLessThanHalfPi, atan2\r\n *  getPrecision             P.precision, P.toFraction\r\n *  getZeroString            digitsToString, finiteToString\r\n *  intPow                   P.toPower, parseOther\r\n *  isOdd                    toLessThanHalfPi\r\n *  maxOrMin                 max, min\r\n *  naturalExponential       P.naturalExponential, P.toPower\r\n *  naturalLogarithm         P.acosh, P.asinh, P.atanh, P.logarithm, P.naturalLogarithm,\r\n *                           P.toPower, naturalExponential\r\n *  nonFiniteToString        finiteToString, toStringBinary\r\n *  parseDecimal             Decimal\r\n *  parseOther               Decimal\r\n *  sin                      P.sin\r\n *  taylorSeries             P.cosh, P.sinh, cos, sin\r\n *  toLessThanHalfPi         P.cos, P.sin\r\n *  toStringBinary           P.toBinary, P.toHexadecimal, P.toOctal\r\n *  truncate                 intPow\r\n *\r\n *  Throws:                  P.logarithm, P.precision, P.toFraction, checkInt32, getLn10, getPi,\r\n *                           naturalLogarithm, config, parseOther, random, Decimal\r\n */\r\n\r\n\r\nfunction digitsToString(d) {\r\n  var i, k, ws,\r\n    indexOfLastWord = d.length - 1,\r\n    str = '',\r\n    w = d[0];\r\n\r\n  if (indexOfLastWord > 0) {\r\n    str += w;\r\n    for (i = 1; i < indexOfLastWord; i++) {\r\n      ws = d[i] + '';\r\n      k = LOG_BASE - ws.length;\r\n      if (k) str += getZeroString(k);\r\n      str += ws;\r\n    }\r\n\r\n    w = d[i];\r\n    ws = w + '';\r\n    k = LOG_BASE - ws.length;\r\n    if (k) str += getZeroString(k);\r\n  } else if (w === 0) {\r\n    return '0';\r\n  }\r\n\r\n  // Remove trailing zeros of last w.\r\n  for (; w % 10 === 0;) w /= 10;\r\n\r\n  return str + w;\r\n}\r\n\r\n\r\nfunction checkInt32(i, min, max) {\r\n  if (i !== ~~i || i < min || i > max) {\r\n    throw Error(invalidArgument + i);\r\n  }\r\n}\r\n\r\n\r\n/*\r\n * Check 5 rounding digits if `repeating` is null, 4 otherwise.\r\n * `repeating == null` if caller is `log` or `pow`,\r\n * `repeating != null` if caller is `naturalLogarithm` or `naturalExponential`.\r\n */\r\nfunction checkRoundingDigits(d, i, rm, repeating) {\r\n  var di, k, r, rd;\r\n\r\n  // Get the length of the first word of the array d.\r\n  for (k = d[0]; k >= 10; k /= 10) --i;\r\n\r\n  // Is the rounding digit in the first word of d?\r\n  if (--i < 0) {\r\n    i += LOG_BASE;\r\n    di = 0;\r\n  } else {\r\n    di = Math.ceil((i + 1) / LOG_BASE);\r\n    i %= LOG_BASE;\r\n  }\r\n\r\n  // i is the index (0 - 6) of the rounding digit.\r\n  // E.g. if within the word 3487563 the first rounding digit is 5,\r\n  // then i = 4, k = 1000, rd = 3487563 % 1000 = 563\r\n  k = mathpow(10, LOG_BASE - i);\r\n  rd = d[di] % k | 0;\r\n\r\n  if (repeating == null) {\r\n    if (i < 3) {\r\n      if (i == 0) rd = rd / 100 | 0;\r\n      else if (i == 1) rd = rd / 10 | 0;\r\n      r = rm < 4 && rd == 99999 || rm > 3 && rd == 49999 || rd == 50000 || rd == 0;\r\n    } else {\r\n      r = (rm < 4 && rd + 1 == k || rm > 3 && rd + 1 == k / 2) &&\r\n        (d[di + 1] / k / 100 | 0) == mathpow(10, i - 2) - 1 ||\r\n          (rd == k / 2 || rd == 0) && (d[di + 1] / k / 100 | 0) == 0;\r\n    }\r\n  } else {\r\n    if (i < 4) {\r\n      if (i == 0) rd = rd / 1000 | 0;\r\n      else if (i == 1) rd = rd / 100 | 0;\r\n      else if (i == 2) rd = rd / 10 | 0;\r\n      r = (repeating || rm < 4) && rd == 9999 || !repeating && rm > 3 && rd == 4999;\r\n    } else {\r\n      r = ((repeating || rm < 4) && rd + 1 == k ||\r\n      (!repeating && rm > 3) && rd + 1 == k / 2) &&\r\n        (d[di + 1] / k / 1000 | 0) == mathpow(10, i - 3) - 1;\r\n    }\r\n  }\r\n\r\n  return r;\r\n}\r\n\r\n\r\n// Convert string of `baseIn` to an array of numbers of `baseOut`.\r\n// Eg. convertBase('255', 10, 16) returns [15, 15].\r\n// Eg. convertBase('ff', 16, 10) returns [2, 5, 5].\r\nfunction convertBase(str, baseIn, baseOut) {\r\n  var j,\r\n    arr = [0],\r\n    arrL,\r\n    i = 0,\r\n    strL = str.length;\r\n\r\n  for (; i < strL;) {\r\n    for (arrL = arr.length; arrL--;) arr[arrL] *= baseIn;\r\n    arr[0] += NUMERALS.indexOf(str.charAt(i++));\r\n    for (j = 0; j < arr.length; j++) {\r\n      if (arr[j] > baseOut - 1) {\r\n        if (arr[j + 1] === void 0) arr[j + 1] = 0;\r\n        arr[j + 1] += arr[j] / baseOut | 0;\r\n        arr[j] %= baseOut;\r\n      }\r\n    }\r\n  }\r\n\r\n  return arr.reverse();\r\n}\r\n\r\n\r\n/*\r\n * cos(x) = 1 - x^2/2! + x^4/4! - ...\r\n * |x| < pi/2\r\n *\r\n */\r\nfunction cosine(Ctor, x) {\r\n  var k, len, y;\r\n\r\n  if (x.isZero()) return x;\r\n\r\n  // Argument reduction: cos(4x) = 8*(cos^4(x) - cos^2(x)) + 1\r\n  // i.e. cos(x) = 8*(cos^4(x/4) - cos^2(x/4)) + 1\r\n\r\n  // Estimate the optimum number of times to use the argument reduction.\r\n  len = x.d.length;\r\n  if (len < 32) {\r\n    k = Math.ceil(len / 3);\r\n    y = (1 / tinyPow(4, k)).toString();\r\n  } else {\r\n    k = 16;\r\n    y = '2.3283064365386962890625e-10';\r\n  }\r\n\r\n  Ctor.precision += k;\r\n\r\n  x = taylorSeries(Ctor, 1, x.times(y), new Ctor(1));\r\n\r\n  // Reverse argument reduction\r\n  for (var i = k; i--;) {\r\n    var cos2x = x.times(x);\r\n    x = cos2x.times(cos2x).minus(cos2x).times(8).plus(1);\r\n  }\r\n\r\n  Ctor.precision -= k;\r\n\r\n  return x;\r\n}\r\n\r\n\r\n/*\r\n * Perform division in the specified base.\r\n */\r\nvar divide = (function () {\r\n\r\n  // Assumes non-zero x and k, and hence non-zero result.\r\n  function multiplyInteger(x, k, base) {\r\n    var temp,\r\n      carry = 0,\r\n      i = x.length;\r\n\r\n    for (x = x.slice(); i--;) {\r\n      temp = x[i] * k + carry;\r\n      x[i] = temp % base | 0;\r\n      carry = temp / base | 0;\r\n    }\r\n\r\n    if (carry) x.unshift(carry);\r\n\r\n    return x;\r\n  }\r\n\r\n  function compare(a, b, aL, bL) {\r\n    var i, r;\r\n\r\n    if (aL != bL) {\r\n      r = aL > bL ? 1 : -1;\r\n    } else {\r\n      for (i = r = 0; i < aL; i++) {\r\n        if (a[i] != b[i]) {\r\n          r = a[i] > b[i] ? 1 : -1;\r\n          break;\r\n        }\r\n      }\r\n    }\r\n\r\n    return r;\r\n  }\r\n\r\n  function subtract(a, b, aL, base) {\r\n    var i = 0;\r\n\r\n    // Subtract b from a.\r\n    for (; aL--;) {\r\n      a[aL] -= i;\r\n      i = a[aL] < b[aL] ? 1 : 0;\r\n      a[aL] = i * base + a[aL] - b[aL];\r\n    }\r\n\r\n    // Remove leading zeros.\r\n    for (; !a[0] && a.length > 1;) a.shift();\r\n  }\r\n\r\n  return function (x, y, pr, rm, dp, base) {\r\n    var cmp, e, i, k, logBase, more, prod, prodL, q, qd, rem, remL, rem0, sd, t, xi, xL, yd0,\r\n      yL, yz,\r\n      Ctor = x.constructor,\r\n      sign = x.s == y.s ? 1 : -1,\r\n      xd = x.d,\r\n      yd = y.d;\r\n\r\n    // Either NaN, Infinity or 0?\r\n    if (!xd || !xd[0] || !yd || !yd[0]) {\r\n\r\n      return new Ctor(// Return NaN if either NaN, or both Infinity or 0.\r\n        !x.s || !y.s || (xd ? yd && xd[0] == yd[0] : !yd) ? NaN :\r\n\r\n        // Return ±0 if x is 0 or y is ±Infinity, or return ±Infinity as y is 0.\r\n        xd && xd[0] == 0 || !yd ? sign * 0 : sign / 0);\r\n    }\r\n\r\n    if (base) {\r\n      logBase = 1;\r\n      e = x.e - y.e;\r\n    } else {\r\n      base = BASE;\r\n      logBase = LOG_BASE;\r\n      e = mathfloor(x.e / logBase) - mathfloor(y.e / logBase);\r\n    }\r\n\r\n    yL = yd.length;\r\n    xL = xd.length;\r\n    q = new Ctor(sign);\r\n    qd = q.d = [];\r\n\r\n    // Result exponent may be one less than e.\r\n    // The digit array of a Decimal from toStringBinary may have trailing zeros.\r\n    for (i = 0; yd[i] == (xd[i] || 0); i++);\r\n\r\n    if (yd[i] > (xd[i] || 0)) e--;\r\n\r\n    if (pr == null) {\r\n      sd = pr = Ctor.precision;\r\n      rm = Ctor.rounding;\r\n    } else if (dp) {\r\n      sd = pr + (x.e - y.e) + 1;\r\n    } else {\r\n      sd = pr;\r\n    }\r\n\r\n    if (sd < 0) {\r\n      qd.push(1);\r\n      more = true;\r\n    } else {\r\n\r\n      // Convert precision in number of base 10 digits to base 1e7 digits.\r\n      sd = sd / logBase + 2 | 0;\r\n      i = 0;\r\n\r\n      // divisor < 1e7\r\n      if (yL == 1) {\r\n        k = 0;\r\n        yd = yd[0];\r\n        sd++;\r\n\r\n        // k is the carry.\r\n        for (; (i < xL || k) && sd--; i++) {\r\n          t = k * base + (xd[i] || 0);\r\n          qd[i] = t / yd | 0;\r\n          k = t % yd | 0;\r\n        }\r\n\r\n        more = k || i < xL;\r\n\r\n      // divisor >= 1e7\r\n      } else {\r\n\r\n        // Normalise xd and yd so highest order digit of yd is >= base/2\r\n        k = base / (yd[0] + 1) | 0;\r\n\r\n        if (k > 1) {\r\n          yd = multiplyInteger(yd, k, base);\r\n          xd = multiplyInteger(xd, k, base);\r\n          yL = yd.length;\r\n          xL = xd.length;\r\n        }\r\n\r\n        xi = yL;\r\n        rem = xd.slice(0, yL);\r\n        remL = rem.length;\r\n\r\n        // Add zeros to make remainder as long as divisor.\r\n        for (; remL < yL;) rem[remL++] = 0;\r\n\r\n        yz = yd.slice();\r\n        yz.unshift(0);\r\n        yd0 = yd[0];\r\n\r\n        if (yd[1] >= base / 2) ++yd0;\r\n\r\n        do {\r\n          k = 0;\r\n\r\n          // Compare divisor and remainder.\r\n          cmp = compare(yd, rem, yL, remL);\r\n\r\n          // If divisor < remainder.\r\n          if (cmp < 0) {\r\n\r\n            // Calculate trial digit, k.\r\n            rem0 = rem[0];\r\n            if (yL != remL) rem0 = rem0 * base + (rem[1] || 0);\r\n\r\n            // k will be how many times the divisor goes into the current remainder.\r\n            k = rem0 / yd0 | 0;\r\n\r\n            //  Algorithm:\r\n            //  1. product = divisor * trial digit (k)\r\n            //  2. if product > remainder: product -= divisor, k--\r\n            //  3. remainder -= product\r\n            //  4. if product was < remainder at 2:\r\n            //    5. compare new remainder and divisor\r\n            //    6. If remainder > divisor: remainder -= divisor, k++\r\n\r\n            if (k > 1) {\r\n              if (k >= base) k = base - 1;\r\n\r\n              // product = divisor * trial digit.\r\n              prod = multiplyInteger(yd, k, base);\r\n              prodL = prod.length;\r\n              remL = rem.length;\r\n\r\n              // Compare product and remainder.\r\n              cmp = compare(prod, rem, prodL, remL);\r\n\r\n              // product > remainder.\r\n              if (cmp == 1) {\r\n                k--;\r\n\r\n                // Subtract divisor from product.\r\n                subtract(prod, yL < prodL ? yz : yd, prodL, base);\r\n              }\r\n            } else {\r\n\r\n              // cmp is -1.\r\n              // If k is 0, there is no need to compare yd and rem again below, so change cmp to 1\r\n              // to avoid it. If k is 1 there is a need to compare yd and rem again below.\r\n              if (k == 0) cmp = k = 1;\r\n              prod = yd.slice();\r\n            }\r\n\r\n            prodL = prod.length;\r\n            if (prodL < remL) prod.unshift(0);\r\n\r\n            // Subtract product from remainder.\r\n            subtract(rem, prod, remL, base);\r\n\r\n            // If product was < previous remainder.\r\n            if (cmp == -1) {\r\n              remL = rem.length;\r\n\r\n              // Compare divisor and new remainder.\r\n              cmp = compare(yd, rem, yL, remL);\r\n\r\n              // If divisor < new remainder, subtract divisor from remainder.\r\n              if (cmp < 1) {\r\n                k++;\r\n\r\n                // Subtract divisor from remainder.\r\n                subtract(rem, yL < remL ? yz : yd, remL, base);\r\n              }\r\n            }\r\n\r\n            remL = rem.length;\r\n          } else if (cmp === 0) {\r\n            k++;\r\n            rem = [0];\r\n          }    // if cmp === 1, k will be 0\r\n\r\n          // Add the next digit, k, to the result array.\r\n          qd[i++] = k;\r\n\r\n          // Update the remainder.\r\n          if (cmp && rem[0]) {\r\n            rem[remL++] = xd[xi] || 0;\r\n          } else {\r\n            rem = [xd[xi]];\r\n            remL = 1;\r\n          }\r\n\r\n        } while ((xi++ < xL || rem[0] !== void 0) && sd--);\r\n\r\n        more = rem[0] !== void 0;\r\n      }\r\n\r\n      // Leading zero?\r\n      if (!qd[0]) qd.shift();\r\n    }\r\n\r\n    // logBase is 1 when divide is being used for base conversion.\r\n    if (logBase == 1) {\r\n      q.e = e;\r\n      inexact = more;\r\n    } else {\r\n\r\n      // To calculate q.e, first get the number of digits of qd[0].\r\n      for (i = 1, k = qd[0]; k >= 10; k /= 10) i++;\r\n      q.e = i + e * logBase - 1;\r\n\r\n      finalise(q, dp ? pr + q.e + 1 : pr, rm, more);\r\n    }\r\n\r\n    return q;\r\n  };\r\n})();\r\n\r\n\r\n/*\r\n * Round `x` to `sd` significant digits using rounding mode `rm`.\r\n * Check for over/under-flow.\r\n */\r\n function finalise(x, sd, rm, isTruncated) {\r\n  var digits, i, j, k, rd, roundUp, w, xd, xdi,\r\n    Ctor = x.constructor;\r\n\r\n  // Don't round if sd is null or undefined.\r\n  out: if (sd != null) {\r\n    xd = x.d;\r\n\r\n    // Infinity/NaN.\r\n    if (!xd) return x;\r\n\r\n    // rd: the rounding digit, i.e. the digit after the digit that may be rounded up.\r\n    // w: the word of xd containing rd, a base 1e7 number.\r\n    // xdi: the index of w within xd.\r\n    // digits: the number of digits of w.\r\n    // i: what would be the index of rd within w if all the numbers were 7 digits long (i.e. if\r\n    // they had leading zeros)\r\n    // j: if > 0, the actual index of rd within w (if < 0, rd is a leading zero).\r\n\r\n    // Get the length of the first word of the digits array xd.\r\n    for (digits = 1, k = xd[0]; k >= 10; k /= 10) digits++;\r\n    i = sd - digits;\r\n\r\n    // Is the rounding digit in the first word of xd?\r\n    if (i < 0) {\r\n      i += LOG_BASE;\r\n      j = sd;\r\n      w = xd[xdi = 0];\r\n\r\n      // Get the rounding digit at index j of w.\r\n      rd = w / mathpow(10, digits - j - 1) % 10 | 0;\r\n    } else {\r\n      xdi = Math.ceil((i + 1) / LOG_BASE);\r\n      k = xd.length;\r\n      if (xdi >= k) {\r\n        if (isTruncated) {\r\n\r\n          // Needed by `naturalExponential`, `naturalLogarithm` and `squareRoot`.\r\n          for (; k++ <= xdi;) xd.push(0);\r\n          w = rd = 0;\r\n          digits = 1;\r\n          i %= LOG_BASE;\r\n          j = i - LOG_BASE + 1;\r\n        } else {\r\n          break out;\r\n        }\r\n      } else {\r\n        w = k = xd[xdi];\r\n\r\n        // Get the number of digits of w.\r\n        for (digits = 1; k >= 10; k /= 10) digits++;\r\n\r\n        // Get the index of rd within w.\r\n        i %= LOG_BASE;\r\n\r\n        // Get the index of rd within w, adjusted for leading zeros.\r\n        // The number of leading zeros of w is given by LOG_BASE - digits.\r\n        j = i - LOG_BASE + digits;\r\n\r\n        // Get the rounding digit at index j of w.\r\n        rd = j < 0 ? 0 : w / mathpow(10, digits - j - 1) % 10 | 0;\r\n      }\r\n    }\r\n\r\n    // Are there any non-zero digits after the rounding digit?\r\n    isTruncated = isTruncated || sd < 0 ||\r\n      xd[xdi + 1] !== void 0 || (j < 0 ? w : w % mathpow(10, digits - j - 1));\r\n\r\n    // The expression `w % mathpow(10, digits - j - 1)` returns all the digits of w to the right\r\n    // of the digit at (left-to-right) index j, e.g. if w is 908714 and j is 2, the expression\r\n    // will give 714.\r\n\r\n    roundUp = rm < 4\r\n      ? (rd || isTruncated) && (rm == 0 || rm == (x.s < 0 ? 3 : 2))\r\n      : rd > 5 || rd == 5 && (rm == 4 || isTruncated || rm == 6 &&\r\n\r\n        // Check whether the digit to the left of the rounding digit is odd.\r\n        ((i > 0 ? j > 0 ? w / mathpow(10, digits - j) : 0 : xd[xdi - 1]) % 10) & 1 ||\r\n          rm == (x.s < 0 ? 8 : 7));\r\n\r\n    if (sd < 1 || !xd[0]) {\r\n      xd.length = 0;\r\n      if (roundUp) {\r\n\r\n        // Convert sd to decimal places.\r\n        sd -= x.e + 1;\r\n\r\n        // 1, 0.1, 0.01, 0.001, 0.0001 etc.\r\n        xd[0] = mathpow(10, (LOG_BASE - sd % LOG_BASE) % LOG_BASE);\r\n        x.e = -sd || 0;\r\n      } else {\r\n\r\n        // Zero.\r\n        xd[0] = x.e = 0;\r\n      }\r\n\r\n      return x;\r\n    }\r\n\r\n    // Remove excess digits.\r\n    if (i == 0) {\r\n      xd.length = xdi;\r\n      k = 1;\r\n      xdi--;\r\n    } else {\r\n      xd.length = xdi + 1;\r\n      k = mathpow(10, LOG_BASE - i);\r\n\r\n      // E.g. 56700 becomes 56000 if 7 is the rounding digit.\r\n      // j > 0 means i > number of leading zeros of w.\r\n      xd[xdi] = j > 0 ? (w / mathpow(10, digits - j) % mathpow(10, j) | 0) * k : 0;\r\n    }\r\n\r\n    if (roundUp) {\r\n      for (;;) {\r\n\r\n        // Is the digit to be rounded up in the first word of xd?\r\n        if (xdi == 0) {\r\n\r\n          // i will be the length of xd[0] before k is added.\r\n          for (i = 1, j = xd[0]; j >= 10; j /= 10) i++;\r\n          j = xd[0] += k;\r\n          for (k = 1; j >= 10; j /= 10) k++;\r\n\r\n          // if i != k the length has increased.\r\n          if (i != k) {\r\n            x.e++;\r\n            if (xd[0] == BASE) xd[0] = 1;\r\n          }\r\n\r\n          break;\r\n        } else {\r\n          xd[xdi] += k;\r\n          if (xd[xdi] != BASE) break;\r\n          xd[xdi--] = 0;\r\n          k = 1;\r\n        }\r\n      }\r\n    }\r\n\r\n    // Remove trailing zeros.\r\n    for (i = xd.length; xd[--i] === 0;) xd.pop();\r\n  }\r\n\r\n  if (external) {\r\n\r\n    // Overflow?\r\n    if (x.e > Ctor.maxE) {\r\n\r\n      // Infinity.\r\n      x.d = null;\r\n      x.e = NaN;\r\n\r\n    // Underflow?\r\n    } else if (x.e < Ctor.minE) {\r\n\r\n      // Zero.\r\n      x.e = 0;\r\n      x.d = [0];\r\n      // Ctor.underflow = true;\r\n    } // else Ctor.underflow = false;\r\n  }\r\n\r\n  return x;\r\n}\r\n\r\n\r\nfunction finiteToString(x, isExp, sd) {\r\n  if (!x.isFinite()) return nonFiniteToString(x);\r\n  var k,\r\n    e = x.e,\r\n    str = digitsToString(x.d),\r\n    len = str.length;\r\n\r\n  if (isExp) {\r\n    if (sd && (k = sd - len) > 0) {\r\n      str = str.charAt(0) + '.' + str.slice(1) + getZeroString(k);\r\n    } else if (len > 1) {\r\n      str = str.charAt(0) + '.' + str.slice(1);\r\n    }\r\n\r\n    str = str + (x.e < 0 ? 'e' : 'e+') + x.e;\r\n  } else if (e < 0) {\r\n    str = '0.' + getZeroString(-e - 1) + str;\r\n    if (sd && (k = sd - len) > 0) str += getZeroString(k);\r\n  } else if (e >= len) {\r\n    str += getZeroString(e + 1 - len);\r\n    if (sd && (k = sd - e - 1) > 0) str = str + '.' + getZeroString(k);\r\n  } else {\r\n    if ((k = e + 1) < len) str = str.slice(0, k) + '.' + str.slice(k);\r\n    if (sd && (k = sd - len) > 0) {\r\n      if (e + 1 === len) str += '.';\r\n      str += getZeroString(k);\r\n    }\r\n  }\r\n\r\n  return str;\r\n}\r\n\r\n\r\n// Calculate the base 10 exponent from the base 1e7 exponent.\r\nfunction getBase10Exponent(digits, e) {\r\n  var w = digits[0];\r\n\r\n  // Add the number of digits of the first word of the digits array.\r\n  for ( e *= LOG_BASE; w >= 10; w /= 10) e++;\r\n  return e;\r\n}\r\n\r\n\r\nfunction getLn10(Ctor, sd, pr) {\r\n  if (sd > LN10_PRECISION) {\r\n\r\n    // Reset global state in case the exception is caught.\r\n    external = true;\r\n    if (pr) Ctor.precision = pr;\r\n    throw Error(precisionLimitExceeded);\r\n  }\r\n  return finalise(new Ctor(LN10), sd, 1, true);\r\n}\r\n\r\n\r\nfunction getPi(Ctor, sd, rm) {\r\n  if (sd > PI_PRECISION) throw Error(precisionLimitExceeded);\r\n  return finalise(new Ctor(PI), sd, rm, true);\r\n}\r\n\r\n\r\nfunction getPrecision(digits) {\r\n  var w = digits.length - 1,\r\n    len = w * LOG_BASE + 1;\r\n\r\n  w = digits[w];\r\n\r\n  // If non-zero...\r\n  if (w) {\r\n\r\n    // Subtract the number of trailing zeros of the last word.\r\n    for (; w % 10 == 0; w /= 10) len--;\r\n\r\n    // Add the number of digits of the first word.\r\n    for (w = digits[0]; w >= 10; w /= 10) len++;\r\n  }\r\n\r\n  return len;\r\n}\r\n\r\n\r\nfunction getZeroString(k) {\r\n  var zs = '';\r\n  for (; k--;) zs += '0';\r\n  return zs;\r\n}\r\n\r\n\r\n/*\r\n * Return a new Decimal whose value is the value of Decimal `x` to the power `n`, where `n` is an\r\n * integer of type number.\r\n *\r\n * Implements 'exponentiation by squaring'. Called by `pow` and `parseOther`.\r\n *\r\n */\r\nfunction intPow(Ctor, x, n, pr) {\r\n  var isTruncated,\r\n    r = new Ctor(1),\r\n\r\n    // Max n of 9007199254740991 takes 53 loop iterations.\r\n    // Maximum digits array length; leaves [28, 34] guard digits.\r\n    k = Math.ceil(pr / LOG_BASE + 4);\r\n\r\n  external = false;\r\n\r\n  for (;;) {\r\n    if (n % 2) {\r\n      r = r.times(x);\r\n      if (truncate(r.d, k)) isTruncated = true;\r\n    }\r\n\r\n    n = mathfloor(n / 2);\r\n    if (n === 0) {\r\n\r\n      // To ensure correct rounding when r.d is truncated, increment the last word if it is zero.\r\n      n = r.d.length - 1;\r\n      if (isTruncated && r.d[n] === 0) ++r.d[n];\r\n      break;\r\n    }\r\n\r\n    x = x.times(x);\r\n    truncate(x.d, k);\r\n  }\r\n\r\n  external = true;\r\n\r\n  return r;\r\n}\r\n\r\n\r\nfunction isOdd(n) {\r\n  return n.d[n.d.length - 1] & 1;\r\n}\r\n\r\n\r\n/*\r\n * Handle `max` and `min`. `ltgt` is 'lt' or 'gt'.\r\n */\r\nfunction maxOrMin(Ctor, args, ltgt) {\r\n  var y,\r\n    x = new Ctor(args[0]),\r\n    i = 0;\r\n\r\n  for (; ++i < args.length;) {\r\n    y = new Ctor(args[i]);\r\n    if (!y.s) {\r\n      x = y;\r\n      break;\r\n    } else if (x[ltgt](y)) {\r\n      x = y;\r\n    }\r\n  }\r\n\r\n  return x;\r\n}\r\n\r\n\r\n/*\r\n * Return a new Decimal whose value is the natural exponential of `x` rounded to `sd` significant\r\n * digits.\r\n *\r\n * Taylor/Maclaurin series.\r\n *\r\n * exp(x) = x^0/0! + x^1/1! + x^2/2! + x^3/3! + ...\r\n *\r\n * Argument reduction:\r\n *   Repeat x = x / 32, k += 5, until |x| < 0.1\r\n *   exp(x) = exp(x / 2^k)^(2^k)\r\n *\r\n * Previously, the argument was initially reduced by\r\n * exp(x) = exp(r) * 10^k  where r = x - k * ln10, k = floor(x / ln10)\r\n * to first put r in the range [0, ln10], before dividing by 32 until |x| < 0.1, but this was\r\n * found to be slower than just dividing repeatedly by 32 as above.\r\n *\r\n * Max integer argument: exp('20723265836946413') = 6.3e+9000000000000000\r\n * Min integer argument: exp('-20723265836946411') = 1.2e-9000000000000000\r\n * (Math object integer min/max: Math.exp(709) = 8.2e+307, Math.exp(-745) = 5e-324)\r\n *\r\n *  exp(Infinity)  = Infinity\r\n *  exp(-Infinity) = 0\r\n *  exp(NaN)       = NaN\r\n *  exp(±0)        = 1\r\n *\r\n *  exp(x) is non-terminating for any finite, non-zero x.\r\n *\r\n *  The result will always be correctly rounded.\r\n *\r\n */\r\nfunction naturalExponential(x, sd) {\r\n  var denominator, guard, j, pow, sum, t, wpr,\r\n    rep = 0,\r\n    i = 0,\r\n    k = 0,\r\n    Ctor = x.constructor,\r\n    rm = Ctor.rounding,\r\n    pr = Ctor.precision;\r\n\r\n  // 0/NaN/Infinity?\r\n  if (!x.d || !x.d[0] || x.e > 17) {\r\n\r\n    return new Ctor(x.d\r\n      ? !x.d[0] ? 1 : x.s < 0 ? 0 : 1 / 0\r\n      : x.s ? x.s < 0 ? 0 : x : 0 / 0);\r\n  }\r\n\r\n  if (sd == null) {\r\n    external = false;\r\n    wpr = pr;\r\n  } else {\r\n    wpr = sd;\r\n  }\r\n\r\n  t = new Ctor(0.03125);\r\n\r\n  // while abs(x) >= 0.1\r\n  while (x.e > -2) {\r\n\r\n    // x = x / 2^5\r\n    x = x.times(t);\r\n    k += 5;\r\n  }\r\n\r\n  // Use 2 * log10(2^k) + 5 (empirically derived) to estimate the increase in precision\r\n  // necessary to ensure the first 4 rounding digits are correct.\r\n  guard = Math.log(mathpow(2, k)) / Math.LN10 * 2 + 5 | 0;\r\n  wpr += guard;\r\n  denominator = pow = sum = new Ctor(1);\r\n  Ctor.precision = wpr;\r\n\r\n  for (;;) {\r\n    pow = finalise(pow.times(x), wpr, 1);\r\n    denominator = denominator.times(++i);\r\n    t = sum.plus(divide(pow, denominator, wpr, 1));\r\n\r\n    if (digitsToString(t.d).slice(0, wpr) === digitsToString(sum.d).slice(0, wpr)) {\r\n      j = k;\r\n      while (j--) sum = finalise(sum.times(sum), wpr, 1);\r\n\r\n      // Check to see if the first 4 rounding digits are [49]999.\r\n      // If so, repeat the summation with a higher precision, otherwise\r\n      // e.g. with precision: 18, rounding: 1\r\n      // exp(18.404272462595034083567793919843761) = 98372560.1229999999 (should be 98372560.123)\r\n      // `wpr - guard` is the index of first rounding digit.\r\n      if (sd == null) {\r\n\r\n        if (rep < 3 && checkRoundingDigits(sum.d, wpr - guard, rm, rep)) {\r\n          Ctor.precision = wpr += 10;\r\n          denominator = pow = t = new Ctor(1);\r\n          i = 0;\r\n          rep++;\r\n        } else {\r\n          return finalise(sum, Ctor.precision = pr, rm, external = true);\r\n        }\r\n      } else {\r\n        Ctor.precision = pr;\r\n        return sum;\r\n      }\r\n    }\r\n\r\n    sum = t;\r\n  }\r\n}\r\n\r\n\r\n/*\r\n * Return a new Decimal whose value is the natural logarithm of `x` rounded to `sd` significant\r\n * digits.\r\n *\r\n *  ln(-n)        = NaN\r\n *  ln(0)         = -Infinity\r\n *  ln(-0)        = -Infinity\r\n *  ln(1)         = 0\r\n *  ln(Infinity)  = Infinity\r\n *  ln(-Infinity) = NaN\r\n *  ln(NaN)       = NaN\r\n *\r\n *  ln(n) (n != 1) is non-terminating.\r\n *\r\n */\r\nfunction naturalLogarithm(y, sd) {\r\n  var c, c0, denominator, e, numerator, rep, sum, t, wpr, x1, x2,\r\n    n = 1,\r\n    guard = 10,\r\n    x = y,\r\n    xd = x.d,\r\n    Ctor = x.constructor,\r\n    rm = Ctor.rounding,\r\n    pr = Ctor.precision;\r\n\r\n  // Is x negative or Infinity, NaN, 0 or 1?\r\n  if (x.s < 0 || !xd || !xd[0] || !x.e && xd[0] == 1 && xd.length == 1) {\r\n    return new Ctor(xd && !xd[0] ? -1 / 0 : x.s != 1 ? NaN : xd ? 0 : x);\r\n  }\r\n\r\n  if (sd == null) {\r\n    external = false;\r\n    wpr = pr;\r\n  } else {\r\n    wpr = sd;\r\n  }\r\n\r\n  Ctor.precision = wpr += guard;\r\n  c = digitsToString(xd);\r\n  c0 = c.charAt(0);\r\n\r\n  if (Math.abs(e = x.e) < 1.5e15) {\r\n\r\n    // Argument reduction.\r\n    // The series converges faster the closer the argument is to 1, so using\r\n    // ln(a^b) = b * ln(a),   ln(a) = ln(a^b) / b\r\n    // multiply the argument by itself until the leading digits of the significand are 7, 8, 9,\r\n    // 10, 11, 12 or 13, recording the number of multiplications so the sum of the series can\r\n    // later be divided by this number, then separate out the power of 10 using\r\n    // ln(a*10^b) = ln(a) + b*ln(10).\r\n\r\n    // max n is 21 (gives 0.9, 1.0 or 1.1) (9e15 / 21 = 4.2e14).\r\n    //while (c0 < 9 && c0 != 1 || c0 == 1 && c.charAt(1) > 1) {\r\n    // max n is 6 (gives 0.7 - 1.3)\r\n    while (c0 < 7 && c0 != 1 || c0 == 1 && c.charAt(1) > 3) {\r\n      x = x.times(y);\r\n      c = digitsToString(x.d);\r\n      c0 = c.charAt(0);\r\n      n++;\r\n    }\r\n\r\n    e = x.e;\r\n\r\n    if (c0 > 1) {\r\n      x = new Ctor('0.' + c);\r\n      e++;\r\n    } else {\r\n      x = new Ctor(c0 + '.' + c.slice(1));\r\n    }\r\n  } else {\r\n\r\n    // The argument reduction method above may result in overflow if the argument y is a massive\r\n    // number with exponent >= 1500000000000000 (9e15 / 6 = 1.5e15), so instead recall this\r\n    // function using ln(x*10^e) = ln(x) + e*ln(10).\r\n    t = getLn10(Ctor, wpr + 2, pr).times(e + '');\r\n    x = naturalLogarithm(new Ctor(c0 + '.' + c.slice(1)), wpr - guard).plus(t);\r\n    Ctor.precision = pr;\r\n\r\n    return sd == null ? finalise(x, pr, rm, external = true) : x;\r\n  }\r\n\r\n  // x1 is x reduced to a value near 1.\r\n  x1 = x;\r\n\r\n  // Taylor series.\r\n  // ln(y) = ln((1 + x)/(1 - x)) = 2(x + x^3/3 + x^5/5 + x^7/7 + ...)\r\n  // where x = (y - 1)/(y + 1)    (|x| < 1)\r\n  sum = numerator = x = divide(x.minus(1), x.plus(1), wpr, 1);\r\n  x2 = finalise(x.times(x), wpr, 1);\r\n  denominator = 3;\r\n\r\n  for (;;) {\r\n    numerator = finalise(numerator.times(x2), wpr, 1);\r\n    t = sum.plus(divide(numerator, new Ctor(denominator), wpr, 1));\r\n\r\n    if (digitsToString(t.d).slice(0, wpr) === digitsToString(sum.d).slice(0, wpr)) {\r\n      sum = sum.times(2);\r\n\r\n      // Reverse the argument reduction. Check that e is not 0 because, besides preventing an\r\n      // unnecessary calculation, -0 + 0 = +0 and to ensure correct rounding -0 needs to stay -0.\r\n      if (e !== 0) sum = sum.plus(getLn10(Ctor, wpr + 2, pr).times(e + ''));\r\n      sum = divide(sum, new Ctor(n), wpr, 1);\r\n\r\n      // Is rm > 3 and the first 4 rounding digits 4999, or rm < 4 (or the summation has\r\n      // been repeated previously) and the first 4 rounding digits 9999?\r\n      // If so, restart the summation with a higher precision, otherwise\r\n      // e.g. with precision: 12, rounding: 1\r\n      // ln(135520028.6126091714265381533) = 18.7246299999 when it should be 18.72463.\r\n      // `wpr - guard` is the index of first rounding digit.\r\n      if (sd == null) {\r\n        if (checkRoundingDigits(sum.d, wpr - guard, rm, rep)) {\r\n          Ctor.precision = wpr += guard;\r\n          t = numerator = x = divide(x1.minus(1), x1.plus(1), wpr, 1);\r\n          x2 = finalise(x.times(x), wpr, 1);\r\n          denominator = rep = 1;\r\n        } else {\r\n          return finalise(sum, Ctor.precision = pr, rm, external = true);\r\n        }\r\n      } else {\r\n        Ctor.precision = pr;\r\n        return sum;\r\n      }\r\n    }\r\n\r\n    sum = t;\r\n    denominator += 2;\r\n  }\r\n}\r\n\r\n\r\n// ±Infinity, NaN.\r\nfunction nonFiniteToString(x) {\r\n  // Unsigned.\r\n  return String(x.s * x.s / 0);\r\n}\r\n\r\n\r\n/*\r\n * Parse the value of a new Decimal `x` from string `str`.\r\n */\r\nfunction parseDecimal(x, str) {\r\n  var e, i, len;\r\n\r\n  // Decimal point?\r\n  if ((e = str.indexOf('.')) > -1) str = str.replace('.', '');\r\n\r\n  // Exponential form?\r\n  if ((i = str.search(/e/i)) > 0) {\r\n\r\n    // Determine exponent.\r\n    if (e < 0) e = i;\r\n    e += +str.slice(i + 1);\r\n    str = str.substring(0, i);\r\n  } else if (e < 0) {\r\n\r\n    // Integer.\r\n    e = str.length;\r\n  }\r\n\r\n  // Determine leading zeros.\r\n  for (i = 0; str.charCodeAt(i) === 48; i++);\r\n\r\n  // Determine trailing zeros.\r\n  for (len = str.length; str.charCodeAt(len - 1) === 48; --len);\r\n  str = str.slice(i, len);\r\n\r\n  if (str) {\r\n    len -= i;\r\n    x.e = e = e - i - 1;\r\n    x.d = [];\r\n\r\n    // Transform base\r\n\r\n    // e is the base 10 exponent.\r\n    // i is where to slice str to get the first word of the digits array.\r\n    i = (e + 1) % LOG_BASE;\r\n    if (e < 0) i += LOG_BASE;\r\n\r\n    if (i < len) {\r\n      if (i) x.d.push(+str.slice(0, i));\r\n      for (len -= LOG_BASE; i < len;) x.d.push(+str.slice(i, i += LOG_BASE));\r\n      str = str.slice(i);\r\n      i = LOG_BASE - str.length;\r\n    } else {\r\n      i -= len;\r\n    }\r\n\r\n    for (; i--;) str += '0';\r\n    x.d.push(+str);\r\n\r\n    if (external) {\r\n\r\n      // Overflow?\r\n      if (x.e > x.constructor.maxE) {\r\n\r\n        // Infinity.\r\n        x.d = null;\r\n        x.e = NaN;\r\n\r\n      // Underflow?\r\n      } else if (x.e < x.constructor.minE) {\r\n\r\n        // Zero.\r\n        x.e = 0;\r\n        x.d = [0];\r\n        // x.constructor.underflow = true;\r\n      } // else x.constructor.underflow = false;\r\n    }\r\n  } else {\r\n\r\n    // Zero.\r\n    x.e = 0;\r\n    x.d = [0];\r\n  }\r\n\r\n  return x;\r\n}\r\n\r\n\r\n/*\r\n * Parse the value of a new Decimal `x` from a string `str`, which is not a decimal value.\r\n */\r\nfunction parseOther(x, str) {\r\n  var base, Ctor, divisor, i, isFloat, len, p, xd, xe;\r\n\r\n  if (str.indexOf('_') > -1) {\r\n    str = str.replace(/(\\d)_(?=\\d)/g, '$1');\r\n    if (isDecimal.test(str)) return parseDecimal(x, str);\r\n  } else if (str === 'Infinity' || str === 'NaN') {\r\n    if (!+str) x.s = NaN;\r\n    x.e = NaN;\r\n    x.d = null;\r\n    return x;\r\n  }\r\n\r\n  if (isHex.test(str))  {\r\n    base = 16;\r\n    str = str.toLowerCase();\r\n  } else if (isBinary.test(str))  {\r\n    base = 2;\r\n  } else if (isOctal.test(str))  {\r\n    base = 8;\r\n  } else {\r\n    throw Error(invalidArgument + str);\r\n  }\r\n\r\n  // Is there a binary exponent part?\r\n  i = str.search(/p/i);\r\n\r\n  if (i > 0) {\r\n    p = +str.slice(i + 1);\r\n    str = str.substring(2, i);\r\n  } else {\r\n    str = str.slice(2);\r\n  }\r\n\r\n  // Convert `str` as an integer then divide the result by `base` raised to a power such that the\r\n  // fraction part will be restored.\r\n  i = str.indexOf('.');\r\n  isFloat = i >= 0;\r\n  Ctor = x.constructor;\r\n\r\n  if (isFloat) {\r\n    str = str.replace('.', '');\r\n    len = str.length;\r\n    i = len - i;\r\n\r\n    // log[10](16) = 1.2041... , log[10](88) = 1.9444....\r\n    divisor = intPow(Ctor, new Ctor(base), i, i * 2);\r\n  }\r\n\r\n  xd = convertBase(str, base, BASE);\r\n  xe = xd.length - 1;\r\n\r\n  // Remove trailing zeros.\r\n  for (i = xe; xd[i] === 0; --i) xd.pop();\r\n  if (i < 0) return new Ctor(x.s * 0);\r\n  x.e = getBase10Exponent(xd, xe);\r\n  x.d = xd;\r\n  external = false;\r\n\r\n  // At what precision to perform the division to ensure exact conversion?\r\n  // maxDecimalIntegerPartDigitCount = ceil(log[10](b) * otherBaseIntegerPartDigitCount)\r\n  // log[10](2) = 0.30103, log[10](8) = 0.90309, log[10](16) = 1.20412\r\n  // E.g. ceil(1.2 * 3) = 4, so up to 4 decimal digits are needed to represent 3 hex int digits.\r\n  // maxDecimalFractionPartDigitCount = {Hex:4|Oct:3|Bin:1} * otherBaseFractionPartDigitCount\r\n  // Therefore using 4 * the number of digits of str will always be enough.\r\n  if (isFloat) x = divide(x, divisor, len * 4);\r\n\r\n  // Multiply by the binary exponent part if present.\r\n  if (p) x = x.times(Math.abs(p) < 54 ? mathpow(2, p) : Decimal.pow(2, p));\r\n  external = true;\r\n\r\n  return x;\r\n}\r\n\r\n\r\n/*\r\n * sin(x) = x - x^3/3! + x^5/5! - ...\r\n * |x| < pi/2\r\n *\r\n */\r\nfunction sine(Ctor, x) {\r\n  var k,\r\n    len = x.d.length;\r\n\r\n  if (len < 3) {\r\n    return x.isZero() ? x : taylorSeries(Ctor, 2, x, x);\r\n  }\r\n\r\n  // Argument reduction: sin(5x) = 16*sin^5(x) - 20*sin^3(x) + 5*sin(x)\r\n  // i.e. sin(x) = 16*sin^5(x/5) - 20*sin^3(x/5) + 5*sin(x/5)\r\n  // and  sin(x) = sin(x/5)(5 + sin^2(x/5)(16sin^2(x/5) - 20))\r\n\r\n  // Estimate the optimum number of times to use the argument reduction.\r\n  k = 1.4 * Math.sqrt(len);\r\n  k = k > 16 ? 16 : k | 0;\r\n\r\n  x = x.times(1 / tinyPow(5, k));\r\n  x = taylorSeries(Ctor, 2, x, x);\r\n\r\n  // Reverse argument reduction\r\n  var sin2_x,\r\n    d5 = new Ctor(5),\r\n    d16 = new Ctor(16),\r\n    d20 = new Ctor(20);\r\n  for (; k--;) {\r\n    sin2_x = x.times(x);\r\n    x = x.times(d5.plus(sin2_x.times(d16.times(sin2_x).minus(d20))));\r\n  }\r\n\r\n  return x;\r\n}\r\n\r\n\r\n// Calculate Taylor series for `cos`, `cosh`, `sin` and `sinh`.\r\nfunction taylorSeries(Ctor, n, x, y, isHyperbolic) {\r\n  var j, t, u, x2,\r\n    i = 1,\r\n    pr = Ctor.precision,\r\n    k = Math.ceil(pr / LOG_BASE);\r\n\r\n  external = false;\r\n  x2 = x.times(x);\r\n  u = new Ctor(y);\r\n\r\n  for (;;) {\r\n    t = divide(u.times(x2), new Ctor(n++ * n++), pr, 1);\r\n    u = isHyperbolic ? y.plus(t) : y.minus(t);\r\n    y = divide(t.times(x2), new Ctor(n++ * n++), pr, 1);\r\n    t = u.plus(y);\r\n\r\n    if (t.d[k] !== void 0) {\r\n      for (j = k; t.d[j] === u.d[j] && j--;);\r\n      if (j == -1) break;\r\n    }\r\n\r\n    j = u;\r\n    u = y;\r\n    y = t;\r\n    t = j;\r\n    i++;\r\n  }\r\n\r\n  external = true;\r\n  t.d.length = k + 1;\r\n\r\n  return t;\r\n}\r\n\r\n\r\n// Exponent e must be positive and non-zero.\r\nfunction tinyPow(b, e) {\r\n  var n = b;\r\n  while (--e) n *= b;\r\n  return n;\r\n}\r\n\r\n\r\n// Return the absolute value of `x` reduced to less than or equal to half pi.\r\nfunction toLessThanHalfPi(Ctor, x) {\r\n  var t,\r\n    isNeg = x.s < 0,\r\n    pi = getPi(Ctor, Ctor.precision, 1),\r\n    halfPi = pi.times(0.5);\r\n\r\n  x = x.abs();\r\n\r\n  if (x.lte(halfPi)) {\r\n    quadrant = isNeg ? 4 : 1;\r\n    return x;\r\n  }\r\n\r\n  t = x.divToInt(pi);\r\n\r\n  if (t.isZero()) {\r\n    quadrant = isNeg ? 3 : 2;\r\n  } else {\r\n    x = x.minus(t.times(pi));\r\n\r\n    // 0 <= x < pi\r\n    if (x.lte(halfPi)) {\r\n      quadrant = isOdd(t) ? (isNeg ? 2 : 3) : (isNeg ? 4 : 1);\r\n      return x;\r\n    }\r\n\r\n    quadrant = isOdd(t) ? (isNeg ? 1 : 4) : (isNeg ? 3 : 2);\r\n  }\r\n\r\n  return x.minus(pi).abs();\r\n}\r\n\r\n\r\n/*\r\n * Return the value of Decimal `x` as a string in base `baseOut`.\r\n *\r\n * If the optional `sd` argument is present include a binary exponent suffix.\r\n */\r\nfunction toStringBinary(x, baseOut, sd, rm) {\r\n  var base, e, i, k, len, roundUp, str, xd, y,\r\n    Ctor = x.constructor,\r\n    isExp = sd !== void 0;\r\n\r\n  if (isExp) {\r\n    checkInt32(sd, 1, MAX_DIGITS);\r\n    if (rm === void 0) rm = Ctor.rounding;\r\n    else checkInt32(rm, 0, 8);\r\n  } else {\r\n    sd = Ctor.precision;\r\n    rm = Ctor.rounding;\r\n  }\r\n\r\n  if (!x.isFinite()) {\r\n    str = nonFiniteToString(x);\r\n  } else {\r\n    str = finiteToString(x);\r\n    i = str.indexOf('.');\r\n\r\n    // Use exponential notation according to `toExpPos` and `toExpNeg`? No, but if required:\r\n    // maxBinaryExponent = floor((decimalExponent + 1) * log[2](10))\r\n    // minBinaryExponent = floor(decimalExponent * log[2](10))\r\n    // log[2](10) = 3.321928094887362347870319429489390175864\r\n\r\n    if (isExp) {\r\n      base = 2;\r\n      if (baseOut == 16) {\r\n        sd = sd * 4 - 3;\r\n      } else if (baseOut == 8) {\r\n        sd = sd * 3 - 2;\r\n      }\r\n    } else {\r\n      base = baseOut;\r\n    }\r\n\r\n    // Convert the number as an integer then divide the result by its base raised to a power such\r\n    // that the fraction part will be restored.\r\n\r\n    // Non-integer.\r\n    if (i >= 0) {\r\n      str = str.replace('.', '');\r\n      y = new Ctor(1);\r\n      y.e = str.length - i;\r\n      y.d = convertBase(finiteToString(y), 10, base);\r\n      y.e = y.d.length;\r\n    }\r\n\r\n    xd = convertBase(str, 10, base);\r\n    e = len = xd.length;\r\n\r\n    // Remove trailing zeros.\r\n    for (; xd[--len] == 0;) xd.pop();\r\n\r\n    if (!xd[0]) {\r\n      str = isExp ? '0p+0' : '0';\r\n    } else {\r\n      if (i < 0) {\r\n        e--;\r\n      } else {\r\n        x = new Ctor(x);\r\n        x.d = xd;\r\n        x.e = e;\r\n        x = divide(x, y, sd, rm, 0, base);\r\n        xd = x.d;\r\n        e = x.e;\r\n        roundUp = inexact;\r\n      }\r\n\r\n      // The rounding digit, i.e. the digit after the digit that may be rounded up.\r\n      i = xd[sd];\r\n      k = base / 2;\r\n      roundUp = roundUp || xd[sd + 1] !== void 0;\r\n\r\n      roundUp = rm < 4\r\n        ? (i !== void 0 || roundUp) && (rm === 0 || rm === (x.s < 0 ? 3 : 2))\r\n        : i > k || i === k && (rm === 4 || roundUp || rm === 6 && xd[sd - 1] & 1 ||\r\n          rm === (x.s < 0 ? 8 : 7));\r\n\r\n      xd.length = sd;\r\n\r\n      if (roundUp) {\r\n\r\n        // Rounding up may mean the previous digit has to be rounded up and so on.\r\n        for (; ++xd[--sd] > base - 1;) {\r\n          xd[sd] = 0;\r\n          if (!sd) {\r\n            ++e;\r\n            xd.unshift(1);\r\n          }\r\n        }\r\n      }\r\n\r\n      // Determine trailing zeros.\r\n      for (len = xd.length; !xd[len - 1]; --len);\r\n\r\n      // E.g. [4, 11, 15] becomes 4bf.\r\n      for (i = 0, str = ''; i < len; i++) str += NUMERALS.charAt(xd[i]);\r\n\r\n      // Add binary exponent suffix?\r\n      if (isExp) {\r\n        if (len > 1) {\r\n          if (baseOut == 16 || baseOut == 8) {\r\n            i = baseOut == 16 ? 4 : 3;\r\n            for (--len; len % i; len++) str += '0';\r\n            xd = convertBase(str, base, baseOut);\r\n            for (len = xd.length; !xd[len - 1]; --len);\r\n\r\n            // xd[0] will always be be 1\r\n            for (i = 1, str = '1.'; i < len; i++) str += NUMERALS.charAt(xd[i]);\r\n          } else {\r\n            str = str.charAt(0) + '.' + str.slice(1);\r\n          }\r\n        }\r\n\r\n        str =  str + (e < 0 ? 'p' : 'p+') + e;\r\n      } else if (e < 0) {\r\n        for (; ++e;) str = '0' + str;\r\n        str = '0.' + str;\r\n      } else {\r\n        if (++e > len) for (e -= len; e-- ;) str += '0';\r\n        else if (e < len) str = str.slice(0, e) + '.' + str.slice(e);\r\n      }\r\n    }\r\n\r\n    str = (baseOut == 16 ? '0x' : baseOut == 2 ? '0b' : baseOut == 8 ? '0o' : '') + str;\r\n  }\r\n\r\n  return x.s < 0 ? '-' + str : str;\r\n}\r\n\r\n\r\n// Does not strip trailing zeros.\r\nfunction truncate(arr, len) {\r\n  if (arr.length > len) {\r\n    arr.length = len;\r\n    return true;\r\n  }\r\n}\r\n\r\n\r\n// Decimal methods\r\n\r\n\r\n/*\r\n *  abs\r\n *  acos\r\n *  acosh\r\n *  add\r\n *  asin\r\n *  asinh\r\n *  atan\r\n *  atanh\r\n *  atan2\r\n *  cbrt\r\n *  ceil\r\n *  clamp\r\n *  clone\r\n *  config\r\n *  cos\r\n *  cosh\r\n *  div\r\n *  exp\r\n *  floor\r\n *  hypot\r\n *  ln\r\n *  log\r\n *  log2\r\n *  log10\r\n *  max\r\n *  min\r\n *  mod\r\n *  mul\r\n *  pow\r\n *  random\r\n *  round\r\n *  set\r\n *  sign\r\n *  sin\r\n *  sinh\r\n *  sqrt\r\n *  sub\r\n *  sum\r\n *  tan\r\n *  tanh\r\n *  trunc\r\n */\r\n\r\n\r\n/*\r\n * Return a new Decimal whose value is the absolute value of `x`.\r\n *\r\n * x {number|string|Decimal}\r\n *\r\n */\r\nfunction abs(x) {\r\n  return new this(x).abs();\r\n}\r\n\r\n\r\n/*\r\n * Return a new Decimal whose value is the arccosine in radians of `x`.\r\n *\r\n * x {number|string|Decimal}\r\n *\r\n */\r\nfunction acos(x) {\r\n  return new this(x).acos();\r\n}\r\n\r\n\r\n/*\r\n * Return a new Decimal whose value is the inverse of the hyperbolic cosine of `x`, rounded to\r\n * `precision` significant digits using rounding mode `rounding`.\r\n *\r\n * x {number|string|Decimal} A value in radians.\r\n *\r\n */\r\nfunction acosh(x) {\r\n  return new this(x).acosh();\r\n}\r\n\r\n\r\n/*\r\n * Return a new Decimal whose value is the sum of `x` and `y`, rounded to `precision` significant\r\n * digits using rounding mode `rounding`.\r\n *\r\n * x {number|string|Decimal}\r\n * y {number|string|Decimal}\r\n *\r\n */\r\nfunction add(x, y) {\r\n  return new this(x).plus(y);\r\n}\r\n\r\n\r\n/*\r\n * Return a new Decimal whose value is the arcsine in radians of `x`, rounded to `precision`\r\n * significant digits using rounding mode `rounding`.\r\n *\r\n * x {number|string|Decimal}\r\n *\r\n */\r\nfunction asin(x) {\r\n  return new this(x).asin();\r\n}\r\n\r\n\r\n/*\r\n * Return a new Decimal whose value is the inverse of the hyperbolic sine of `x`, rounded to\r\n * `precision` significant digits using rounding mode `rounding`.\r\n *\r\n * x {number|string|Decimal} A value in radians.\r\n *\r\n */\r\nfunction asinh(x) {\r\n  return new this(x).asinh();\r\n}\r\n\r\n\r\n/*\r\n * Return a new Decimal whose value is the arctangent in radians of `x`, rounded to `precision`\r\n * significant digits using rounding mode `rounding`.\r\n *\r\n * x {number|string|Decimal}\r\n *\r\n */\r\nfunction atan(x) {\r\n  return new this(x).atan();\r\n}\r\n\r\n\r\n/*\r\n * Return a new Decimal whose value is the inverse of the hyperbolic tangent of `x`, rounded to\r\n * `precision` significant digits using rounding mode `rounding`.\r\n *\r\n * x {number|string|Decimal} A value in radians.\r\n *\r\n */\r\nfunction atanh(x) {\r\n  return new this(x).atanh();\r\n}\r\n\r\n\r\n/*\r\n * Return a new Decimal whose value is the arctangent in radians of `y/x` in the range -pi to pi\r\n * (inclusive), rounded to `precision` significant digits using rounding mode `rounding`.\r\n *\r\n * Domain: [-Infinity, Infinity]\r\n * Range: [-pi, pi]\r\n *\r\n * y {number|string|Decimal} The y-coordinate.\r\n * x {number|string|Decimal} The x-coordinate.\r\n *\r\n * atan2(±0, -0)               = ±pi\r\n * atan2(±0, +0)               = ±0\r\n * atan2(±0, -x)               = ±pi for x > 0\r\n * atan2(±0, x)                = ±0 for x > 0\r\n * atan2(-y, ±0)               = -pi/2 for y > 0\r\n * atan2(y, ±0)                = pi/2 for y > 0\r\n * atan2(±y, -Infinity)        = ±pi for finite y > 0\r\n * atan2(±y, +Infinity)        = ±0 for finite y > 0\r\n * atan2(±Infinity, x)         = ±pi/2 for finite x\r\n * atan2(±Infinity, -Infinity) = ±3*pi/4\r\n * atan2(±Infinity, +Infinity) = ±pi/4\r\n * atan2(NaN, x) = NaN\r\n * atan2(y, NaN) = NaN\r\n *\r\n */\r\nfunction atan2(y, x) {\r\n  y = new this(y);\r\n  x = new this(x);\r\n  var r,\r\n    pr = this.precision,\r\n    rm = this.rounding,\r\n    wpr = pr + 4;\r\n\r\n  // Either NaN\r\n  if (!y.s || !x.s) {\r\n    r = new this(NaN);\r\n\r\n  // Both ±Infinity\r\n  } else if (!y.d && !x.d) {\r\n    r = getPi(this, wpr, 1).times(x.s > 0 ? 0.25 : 0.75);\r\n    r.s = y.s;\r\n\r\n  // x is ±Infinity or y is ±0\r\n  } else if (!x.d || y.isZero()) {\r\n    r = x.s < 0 ? getPi(this, pr, rm) : new this(0);\r\n    r.s = y.s;\r\n\r\n  // y is ±Infinity or x is ±0\r\n  } else if (!y.d || x.isZero()) {\r\n    r = getPi(this, wpr, 1).times(0.5);\r\n    r.s = y.s;\r\n\r\n  // Both non-zero and finite\r\n  } else if (x.s < 0) {\r\n    this.precision = wpr;\r\n    this.rounding = 1;\r\n    r = this.atan(divide(y, x, wpr, 1));\r\n    x = getPi(this, wpr, 1);\r\n    this.precision = pr;\r\n    this.rounding = rm;\r\n    r = y.s < 0 ? r.minus(x) : r.plus(x);\r\n  } else {\r\n    r = this.atan(divide(y, x, wpr, 1));\r\n  }\r\n\r\n  return r;\r\n}\r\n\r\n\r\n/*\r\n * Return a new Decimal whose value is the cube root of `x`, rounded to `precision` significant\r\n * digits using rounding mode `rounding`.\r\n *\r\n * x {number|string|Decimal}\r\n *\r\n */\r\nfunction cbrt(x) {\r\n  return new this(x).cbrt();\r\n}\r\n\r\n\r\n/*\r\n * Return a new Decimal whose value is `x` rounded to an integer using `ROUND_CEIL`.\r\n *\r\n * x {number|string|Decimal}\r\n *\r\n */\r\nfunction ceil(x) {\r\n  return finalise(x = new this(x), x.e + 1, 2);\r\n}\r\n\r\n\r\n/*\r\n * Return a new Decimal whose value is `x` clamped to the range delineated by `min` and `max`.\r\n *\r\n * x {number|string|Decimal}\r\n * min {number|string|Decimal}\r\n * max {number|string|Decimal}\r\n *\r\n */\r\nfunction clamp(x, min, max) {\r\n  return new this(x).clamp(min, max);\r\n}\r\n\r\n\r\n/*\r\n * Configure global settings for a Decimal constructor.\r\n *\r\n * `obj` is an object with one or more of the following properties,\r\n *\r\n *   precision  {number}\r\n *   rounding   {number}\r\n *   toExpNeg   {number}\r\n *   toExpPos   {number}\r\n *   maxE       {number}\r\n *   minE       {number}\r\n *   modulo     {number}\r\n *   crypto     {boolean|number}\r\n *   defaults   {true}\r\n *\r\n * E.g. Decimal.config({ precision: 20, rounding: 4 })\r\n *\r\n */\r\nfunction config(obj) {\r\n  if (!obj || typeof obj !== 'object') throw Error(decimalError + 'Object expected');\r\n  var i, p, v,\r\n    useDefaults = obj.defaults === true,\r\n    ps = [\r\n      'precision', 1, MAX_DIGITS,\r\n      'rounding', 0, 8,\r\n      'toExpNeg', -EXP_LIMIT, 0,\r\n      'toExpPos', 0, EXP_LIMIT,\r\n      'maxE', 0, EXP_LIMIT,\r\n      'minE', -EXP_LIMIT, 0,\r\n      'modulo', 0, 9\r\n    ];\r\n\r\n  for (i = 0; i < ps.length; i += 3) {\r\n    if (p = ps[i], useDefaults) this[p] = DEFAULTS[p];\r\n    if ((v = obj[p]) !== void 0) {\r\n      if (mathfloor(v) === v && v >= ps[i + 1] && v <= ps[i + 2]) this[p] = v;\r\n      else throw Error(invalidArgument + p + ': ' + v);\r\n    }\r\n  }\r\n\r\n  if (p = 'crypto', useDefaults) this[p] = DEFAULTS[p];\r\n  if ((v = obj[p]) !== void 0) {\r\n    if (v === true || v === false || v === 0 || v === 1) {\r\n      if (v) {\r\n        if (typeof crypto != 'undefined' && crypto &&\r\n          (crypto.getRandomValues || crypto.randomBytes)) {\r\n          this[p] = true;\r\n        } else {\r\n          throw Error(cryptoUnavailable);\r\n        }\r\n      } else {\r\n        this[p] = false;\r\n      }\r\n    } else {\r\n      throw Error(invalidArgument + p + ': ' + v);\r\n    }\r\n  }\r\n\r\n  return this;\r\n}\r\n\r\n\r\n/*\r\n * Return a new Decimal whose value is the cosine of `x`, rounded to `precision` significant\r\n * digits using rounding mode `rounding`.\r\n *\r\n * x {number|string|Decimal} A value in radians.\r\n *\r\n */\r\nfunction cos(x) {\r\n  return new this(x).cos();\r\n}\r\n\r\n\r\n/*\r\n * Return a new Decimal whose value is the hyperbolic cosine of `x`, rounded to precision\r\n * significant digits using rounding mode `rounding`.\r\n *\r\n * x {number|string|Decimal} A value in radians.\r\n *\r\n */\r\nfunction cosh(x) {\r\n  return new this(x).cosh();\r\n}\r\n\r\n\r\n/*\r\n * Create and return a Decimal constructor with the same configuration properties as this Decimal\r\n * constructor.\r\n *\r\n */\r\nfunction clone(obj) {\r\n  var i, p, ps;\r\n\r\n  /*\r\n   * The Decimal constructor and exported function.\r\n   * Return a new Decimal instance.\r\n   *\r\n   * v {number|string|Decimal} A numeric value.\r\n   *\r\n   */\r\n  function Decimal(v) {\r\n    var e, i, t,\r\n      x = this;\r\n\r\n    // Decimal called without new.\r\n    if (!(x instanceof Decimal)) return new Decimal(v);\r\n\r\n    // Retain a reference to this Decimal constructor, and shadow Decimal.prototype.constructor\r\n    // which points to Object.\r\n    x.constructor = Decimal;\r\n\r\n    // Duplicate.\r\n    if (isDecimalInstance(v)) {\r\n      x.s = v.s;\r\n\r\n      if (external) {\r\n        if (!v.d || v.e > Decimal.maxE) {\r\n\r\n          // Infinity.\r\n          x.e = NaN;\r\n          x.d = null;\r\n        } else if (v.e < Decimal.minE) {\r\n\r\n          // Zero.\r\n          x.e = 0;\r\n          x.d = [0];\r\n        } else {\r\n          x.e = v.e;\r\n          x.d = v.d.slice();\r\n        }\r\n      } else {\r\n        x.e = v.e;\r\n        x.d = v.d ? v.d.slice() : v.d;\r\n      }\r\n\r\n      return;\r\n    }\r\n\r\n    t = typeof v;\r\n\r\n    if (t === 'number') {\r\n      if (v === 0) {\r\n        x.s = 1 / v < 0 ? -1 : 1;\r\n        x.e = 0;\r\n        x.d = [0];\r\n        return;\r\n      }\r\n\r\n      if (v < 0) {\r\n        v = -v;\r\n        x.s = -1;\r\n      } else {\r\n        x.s = 1;\r\n      }\r\n\r\n      // Fast path for small integers.\r\n      if (v === ~~v && v < 1e7) {\r\n        for (e = 0, i = v; i >= 10; i /= 10) e++;\r\n\r\n        if (external) {\r\n          if (e > Decimal.maxE) {\r\n            x.e = NaN;\r\n            x.d = null;\r\n          } else if (e < Decimal.minE) {\r\n            x.e = 0;\r\n            x.d = [0];\r\n          } else {\r\n            x.e = e;\r\n            x.d = [v];\r\n          }\r\n        } else {\r\n          x.e = e;\r\n          x.d = [v];\r\n        }\r\n\r\n        return;\r\n\r\n      // Infinity, NaN.\r\n      } else if (v * 0 !== 0) {\r\n        if (!v) x.s = NaN;\r\n        x.e = NaN;\r\n        x.d = null;\r\n        return;\r\n      }\r\n\r\n      return parseDecimal(x, v.toString());\r\n\r\n    } else if (t !== 'string') {\r\n      throw Error(invalidArgument + v);\r\n    }\r\n\r\n    // Minus sign?\r\n    if ((i = v.charCodeAt(0)) === 45) {\r\n      v = v.slice(1);\r\n      x.s = -1;\r\n    } else {\r\n      // Plus sign?\r\n      if (i === 43) v = v.slice(1);\r\n      x.s = 1;\r\n    }\r\n\r\n    return isDecimal.test(v) ? parseDecimal(x, v) : parseOther(x, v);\r\n  }\r\n\r\n  Decimal.prototype = P;\r\n\r\n  Decimal.ROUND_UP = 0;\r\n  Decimal.ROUND_DOWN = 1;\r\n  Decimal.ROUND_CEIL = 2;\r\n  Decimal.ROUND_FLOOR = 3;\r\n  Decimal.ROUND_HALF_UP = 4;\r\n  Decimal.ROUND_HALF_DOWN = 5;\r\n  Decimal.ROUND_HALF_EVEN = 6;\r\n  Decimal.ROUND_HALF_CEIL = 7;\r\n  Decimal.ROUND_HALF_FLOOR = 8;\r\n  Decimal.EUCLID = 9;\r\n\r\n  Decimal.config = Decimal.set = config;\r\n  Decimal.clone = clone;\r\n  Decimal.isDecimal = isDecimalInstance;\r\n\r\n  Decimal.abs = abs;\r\n  Decimal.acos = acos;\r\n  Decimal.acosh = acosh;        // ES6\r\n  Decimal.add = add;\r\n  Decimal.asin = asin;\r\n  Decimal.asinh = asinh;        // ES6\r\n  Decimal.atan = atan;\r\n  Decimal.atanh = atanh;        // ES6\r\n  Decimal.atan2 = atan2;\r\n  Decimal.cbrt = cbrt;          // ES6\r\n  Decimal.ceil = ceil;\r\n  Decimal.clamp = clamp;\r\n  Decimal.cos = cos;\r\n  Decimal.cosh = cosh;          // ES6\r\n  Decimal.div = div;\r\n  Decimal.exp = exp;\r\n  Decimal.floor = floor;\r\n  Decimal.hypot = hypot;        // ES6\r\n  Decimal.ln = ln;\r\n  Decimal.log = log;\r\n  Decimal.log10 = log10;        // ES6\r\n  Decimal.log2 = log2;          // ES6\r\n  Decimal.max = max;\r\n  Decimal.min = min;\r\n  Decimal.mod = mod;\r\n  Decimal.mul = mul;\r\n  Decimal.pow = pow;\r\n  Decimal.random = random;\r\n  Decimal.round = round;\r\n  Decimal.sign = sign;          // ES6\r\n  Decimal.sin = sin;\r\n  Decimal.sinh = sinh;          // ES6\r\n  Decimal.sqrt = sqrt;\r\n  Decimal.sub = sub;\r\n  Decimal.sum = sum;\r\n  Decimal.tan = tan;\r\n  Decimal.tanh = tanh;          // ES6\r\n  Decimal.trunc = trunc;        // ES6\r\n\r\n  if (obj === void 0) obj = {};\r\n  if (obj) {\r\n    if (obj.defaults !== true) {\r\n      ps = ['precision', 'rounding', 'toExpNeg', 'toExpPos', 'maxE', 'minE', 'modulo', 'crypto'];\r\n      for (i = 0; i < ps.length;) if (!obj.hasOwnProperty(p = ps[i++])) obj[p] = this[p];\r\n    }\r\n  }\r\n\r\n  Decimal.config(obj);\r\n\r\n  return Decimal;\r\n}\r\n\r\n\r\n/*\r\n * Return a new Decimal whose value is `x` divided by `y`, rounded to `precision` significant\r\n * digits using rounding mode `rounding`.\r\n *\r\n * x {number|string|Decimal}\r\n * y {number|string|Decimal}\r\n *\r\n */\r\nfunction div(x, y) {\r\n  return new this(x).div(y);\r\n}\r\n\r\n\r\n/*\r\n * Return a new Decimal whose value is the natural exponential of `x`, rounded to `precision`\r\n * significant digits using rounding mode `rounding`.\r\n *\r\n * x {number|string|Decimal} The power to which to raise the base of the natural log.\r\n *\r\n */\r\nfunction exp(x) {\r\n  return new this(x).exp();\r\n}\r\n\r\n\r\n/*\r\n * Return a new Decimal whose value is `x` round to an integer using `ROUND_FLOOR`.\r\n *\r\n * x {number|string|Decimal}\r\n *\r\n */\r\nfunction floor(x) {\r\n  return finalise(x = new this(x), x.e + 1, 3);\r\n}\r\n\r\n\r\n/*\r\n * Return a new Decimal whose value is the square root of the sum of the squares of the arguments,\r\n * rounded to `precision` significant digits using rounding mode `rounding`.\r\n *\r\n * hypot(a, b, ...) = sqrt(a^2 + b^2 + ...)\r\n *\r\n * arguments {number|string|Decimal}\r\n *\r\n */\r\nfunction hypot() {\r\n  var i, n,\r\n    t = new this(0);\r\n\r\n  external = false;\r\n\r\n  for (i = 0; i < arguments.length;) {\r\n    n = new this(arguments[i++]);\r\n    if (!n.d) {\r\n      if (n.s) {\r\n        external = true;\r\n        return new this(1 / 0);\r\n      }\r\n      t = n;\r\n    } else if (t.d) {\r\n      t = t.plus(n.times(n));\r\n    }\r\n  }\r\n\r\n  external = true;\r\n\r\n  return t.sqrt();\r\n}\r\n\r\n\r\n/*\r\n * Return true if object is a Decimal instance (where Decimal is any Decimal constructor),\r\n * otherwise return false.\r\n *\r\n */\r\nfunction isDecimalInstance(obj) {\r\n  return obj instanceof Decimal || obj && obj.toStringTag === tag || false;\r\n}\r\n\r\n\r\n/*\r\n * Return a new Decimal whose value is the natural logarithm of `x`, rounded to `precision`\r\n * significant digits using rounding mode `rounding`.\r\n *\r\n * x {number|string|Decimal}\r\n *\r\n */\r\nfunction ln(x) {\r\n  return new this(x).ln();\r\n}\r\n\r\n\r\n/*\r\n * Return a new Decimal whose value is the log of `x` to the base `y`, or to base 10 if no base\r\n * is specified, rounded to `precision` significant digits using rounding mode `rounding`.\r\n *\r\n * log[y](x)\r\n *\r\n * x {number|string|Decimal} The argument of the logarithm.\r\n * y {number|string|Decimal} The base of the logarithm.\r\n *\r\n */\r\nfunction log(x, y) {\r\n  return new this(x).log(y);\r\n}\r\n\r\n\r\n/*\r\n * Return a new Decimal whose value is the base 2 logarithm of `x`, rounded to `precision`\r\n * significant digits using rounding mode `rounding`.\r\n *\r\n * x {number|string|Decimal}\r\n *\r\n */\r\nfunction log2(x) {\r\n  return new this(x).log(2);\r\n}\r\n\r\n\r\n/*\r\n * Return a new Decimal whose value is the base 10 logarithm of `x`, rounded to `precision`\r\n * significant digits using rounding mode `rounding`.\r\n *\r\n * x {number|string|Decimal}\r\n *\r\n */\r\nfunction log10(x) {\r\n  return new this(x).log(10);\r\n}\r\n\r\n\r\n/*\r\n * Return a new Decimal whose value is the maximum of the arguments.\r\n *\r\n * arguments {number|string|Decimal}\r\n *\r\n */\r\nfunction max() {\r\n  return maxOrMin(this, arguments, 'lt');\r\n}\r\n\r\n\r\n/*\r\n * Return a new Decimal whose value is the minimum of the arguments.\r\n *\r\n * arguments {number|string|Decimal}\r\n *\r\n */\r\nfunction min() {\r\n  return maxOrMin(this, arguments, 'gt');\r\n}\r\n\r\n\r\n/*\r\n * Return a new Decimal whose value is `x` modulo `y`, rounded to `precision` significant digits\r\n * using rounding mode `rounding`.\r\n *\r\n * x {number|string|Decimal}\r\n * y {number|string|Decimal}\r\n *\r\n */\r\nfunction mod(x, y) {\r\n  return new this(x).mod(y);\r\n}\r\n\r\n\r\n/*\r\n * Return a new Decimal whose value is `x` multiplied by `y`, rounded to `precision` significant\r\n * digits using rounding mode `rounding`.\r\n *\r\n * x {number|string|Decimal}\r\n * y {number|string|Decimal}\r\n *\r\n */\r\nfunction mul(x, y) {\r\n  return new this(x).mul(y);\r\n}\r\n\r\n\r\n/*\r\n * Return a new Decimal whose value is `x` raised to the power `y`, rounded to precision\r\n * significant digits using rounding mode `rounding`.\r\n *\r\n * x {number|string|Decimal} The base.\r\n * y {number|string|Decimal} The exponent.\r\n *\r\n */\r\nfunction pow(x, y) {\r\n  return new this(x).pow(y);\r\n}\r\n\r\n\r\n/*\r\n * Returns a new Decimal with a random value equal to or greater than 0 and less than 1, and with\r\n * `sd`, or `Decimal.precision` if `sd` is omitted, significant digits (or less if trailing zeros\r\n * are produced).\r\n *\r\n * [sd] {number} Significant digits. Integer, 0 to MAX_DIGITS inclusive.\r\n *\r\n */\r\nfunction random(sd) {\r\n  var d, e, k, n,\r\n    i = 0,\r\n    r = new this(1),\r\n    rd = [];\r\n\r\n  if (sd === void 0) sd = this.precision;\r\n  else checkInt32(sd, 1, MAX_DIGITS);\r\n\r\n  k = Math.ceil(sd / LOG_BASE);\r\n\r\n  if (!this.crypto) {\r\n    for (; i < k;) rd[i++] = Math.random() * 1e7 | 0;\r\n\r\n  // Browsers supporting crypto.getRandomValues.\r\n  } else if (crypto.getRandomValues) {\r\n    d = crypto.getRandomValues(new Uint32Array(k));\r\n\r\n    for (; i < k;) {\r\n      n = d[i];\r\n\r\n      // 0 <= n < 4294967296\r\n      // Probability n >= 4.29e9, is 4967296 / 4294967296 = 0.00116 (1 in 865).\r\n      if (n >= 4.29e9) {\r\n        d[i] = crypto.getRandomValues(new Uint32Array(1))[0];\r\n      } else {\r\n\r\n        // 0 <= n <= 4289999999\r\n        // 0 <= (n % 1e7) <= 9999999\r\n        rd[i++] = n % 1e7;\r\n      }\r\n    }\r\n\r\n  // Node.js supporting crypto.randomBytes.\r\n  } else if (crypto.randomBytes) {\r\n\r\n    // buffer\r\n    d = crypto.randomBytes(k *= 4);\r\n\r\n    for (; i < k;) {\r\n\r\n      // 0 <= n < 2147483648\r\n      n = d[i] + (d[i + 1] << 8) + (d[i + 2] << 16) + ((d[i + 3] & 0x7f) << 24);\r\n\r\n      // Probability n >= 2.14e9, is 7483648 / 2147483648 = 0.0035 (1 in 286).\r\n      if (n >= 2.14e9) {\r\n        crypto.randomBytes(4).copy(d, i);\r\n      } else {\r\n\r\n        // 0 <= n <= 2139999999\r\n        // 0 <= (n % 1e7) <= 9999999\r\n        rd.push(n % 1e7);\r\n        i += 4;\r\n      }\r\n    }\r\n\r\n    i = k / 4;\r\n  } else {\r\n    throw Error(cryptoUnavailable);\r\n  }\r\n\r\n  k = rd[--i];\r\n  sd %= LOG_BASE;\r\n\r\n  // Convert trailing digits to zeros according to sd.\r\n  if (k && sd) {\r\n    n = mathpow(10, LOG_BASE - sd);\r\n    rd[i] = (k / n | 0) * n;\r\n  }\r\n\r\n  // Remove trailing words which are zero.\r\n  for (; rd[i] === 0; i--) rd.pop();\r\n\r\n  // Zero?\r\n  if (i < 0) {\r\n    e = 0;\r\n    rd = [0];\r\n  } else {\r\n    e = -1;\r\n\r\n    // Remove leading words which are zero and adjust exponent accordingly.\r\n    for (; rd[0] === 0; e -= LOG_BASE) rd.shift();\r\n\r\n    // Count the digits of the first word of rd to determine leading zeros.\r\n    for (k = 1, n = rd[0]; n >= 10; n /= 10) k++;\r\n\r\n    // Adjust the exponent for leading zeros of the first word of rd.\r\n    if (k < LOG_BASE) e -= LOG_BASE - k;\r\n  }\r\n\r\n  r.e = e;\r\n  r.d = rd;\r\n\r\n  return r;\r\n}\r\n\r\n\r\n/*\r\n * Return a new Decimal whose value is `x` rounded to an integer using rounding mode `rounding`.\r\n *\r\n * To emulate `Math.round`, set rounding to 7 (ROUND_HALF_CEIL).\r\n *\r\n * x {number|string|Decimal}\r\n *\r\n */\r\nfunction round(x) {\r\n  return finalise(x = new this(x), x.e + 1, this.rounding);\r\n}\r\n\r\n\r\n/*\r\n * Return\r\n *   1    if x > 0,\r\n *  -1    if x < 0,\r\n *   0    if x is 0,\r\n *  -0    if x is -0,\r\n *   NaN  otherwise\r\n *\r\n * x {number|string|Decimal}\r\n *\r\n */\r\nfunction sign(x) {\r\n  x = new this(x);\r\n  return x.d ? (x.d[0] ? x.s : 0 * x.s) : x.s || NaN;\r\n}\r\n\r\n\r\n/*\r\n * Return a new Decimal whose value is the sine of `x`, rounded to `precision` significant digits\r\n * using rounding mode `rounding`.\r\n *\r\n * x {number|string|Decimal} A value in radians.\r\n *\r\n */\r\nfunction sin(x) {\r\n  return new this(x).sin();\r\n}\r\n\r\n\r\n/*\r\n * Return a new Decimal whose value is the hyperbolic sine of `x`, rounded to `precision`\r\n * significant digits using rounding mode `rounding`.\r\n *\r\n * x {number|string|Decimal} A value in radians.\r\n *\r\n */\r\nfunction sinh(x) {\r\n  return new this(x).sinh();\r\n}\r\n\r\n\r\n/*\r\n * Return a new Decimal whose value is the square root of `x`, rounded to `precision` significant\r\n * digits using rounding mode `rounding`.\r\n *\r\n * x {number|string|Decimal}\r\n *\r\n */\r\nfunction sqrt(x) {\r\n  return new this(x).sqrt();\r\n}\r\n\r\n\r\n/*\r\n * Return a new Decimal whose value is `x` minus `y`, rounded to `precision` significant digits\r\n * using rounding mode `rounding`.\r\n *\r\n * x {number|string|Decimal}\r\n * y {number|string|Decimal}\r\n *\r\n */\r\nfunction sub(x, y) {\r\n  return new this(x).sub(y);\r\n}\r\n\r\n\r\n/*\r\n * Return a new Decimal whose value is the sum of the arguments, rounded to `precision`\r\n * significant digits using rounding mode `rounding`.\r\n *\r\n * Only the result is rounded, not the intermediate calculations.\r\n *\r\n * arguments {number|string|Decimal}\r\n *\r\n */\r\nfunction sum() {\r\n  var i = 0,\r\n    args = arguments,\r\n    x = new this(args[i]);\r\n\r\n  external = false;\r\n  for (; x.s && ++i < args.length;) x = x.plus(args[i]);\r\n  external = true;\r\n\r\n  return finalise(x, this.precision, this.rounding);\r\n}\r\n\r\n\r\n/*\r\n * Return a new Decimal whose value is the tangent of `x`, rounded to `precision` significant\r\n * digits using rounding mode `rounding`.\r\n *\r\n * x {number|string|Decimal} A value in radians.\r\n *\r\n */\r\nfunction tan(x) {\r\n  return new this(x).tan();\r\n}\r\n\r\n\r\n/*\r\n * Return a new Decimal whose value is the hyperbolic tangent of `x`, rounded to `precision`\r\n * significant digits using rounding mode `rounding`.\r\n *\r\n * x {number|string|Decimal} A value in radians.\r\n *\r\n */\r\nfunction tanh(x) {\r\n  return new this(x).tanh();\r\n}\r\n\r\n\r\n/*\r\n * Return a new Decimal whose value is `x` truncated to an integer.\r\n *\r\n * x {number|string|Decimal}\r\n *\r\n */\r\nfunction trunc(x) {\r\n  return finalise(x = new this(x), x.e + 1, 1);\r\n}\r\n\r\n\r\nP[Symbol.for('nodejs.util.inspect.custom')] = P.toString;\r\nP[Symbol.toStringTag] = 'Decimal';\r\n\r\n// Create and configure initial Decimal constructor.\r\nexport var Decimal = P.constructor = clone(DEFAULTS);\r\n\r\n// Create the internal constants from their string values.\r\nLN10 = new Decimal(LN10);\r\nPI = new Decimal(PI);\r\n\r\nexport default Decimal;\r\n","import { PublicKey } from \"@solana/web3.js\";\n\nimport { PublicKeyish, SOLMint, validateAndParsePublicKey } from \"../common/pubKey\";\nimport { TOKEN_WSOL } from \"../raydium/token/constant\";\n\n/**\n * A token is any fungible financial instrument on Solana, including SOL and all SPL tokens.\n */\nexport interface TokenProps {\n  mint: PublicKeyish;\n  decimals: number;\n  symbol?: string;\n  name?: string;\n  skipMint?: boolean;\n  isToken2022?: boolean;\n}\n\nexport class Token {\n  public readonly symbol?: string;\n  public readonly name?: string;\n  public readonly decimals: number;\n  public readonly isToken2022: boolean;\n\n  public readonly mint: PublicKey;\n  public static readonly WSOL: Token = new Token({\n    ...TOKEN_WSOL,\n    mint: TOKEN_WSOL.address,\n  });\n\n  /**\n   *\n   * @param mint - pass \"sol\" as mint will auto generate wsol token config\n   */\n  public constructor({ mint, decimals, symbol, name, skipMint = false, isToken2022 = false }: TokenProps) {\n    if (mint === SOLMint.toBase58() || (mint instanceof PublicKey && SOLMint.equals(mint))) {\n      this.decimals = TOKEN_WSOL.decimals;\n      this.symbol = TOKEN_WSOL.symbol;\n      this.name = TOKEN_WSOL.name;\n      this.mint = new PublicKey(TOKEN_WSOL.address);\n      this.isToken2022 = false;\n      return;\n    }\n\n    this.decimals = decimals;\n    this.symbol = symbol || mint.toString().substring(0, 6);\n    this.name = name || mint.toString().substring(0, 6);\n    this.mint = skipMint ? PublicKey.default : validateAndParsePublicKey({ publicKey: mint });\n    this.isToken2022 = isToken2022;\n  }\n\n  public equals(other: Token): boolean {\n    // short circuit on reference equality\n    if (this === other) {\n      return true;\n    }\n    return this.mint.equals(other.mint);\n  }\n}\n","import { TOKEN_PROGRAM_ID } from \"@solana/spl-token\";\nimport { AccountMeta, PublicKey, SystemProgram, SYSVAR_RENT_PUBKEY } from \"@solana/web3.js\";\n\ninterface AccountMetaProps {\n  pubkey: PublicKey;\n  isSigner?: boolean;\n  isWritable?: boolean;\n}\n\nexport function accountMeta({ pubkey, isSigner = false, isWritable = true }: AccountMetaProps): AccountMeta {\n  return {\n    pubkey,\n    isWritable,\n    isSigner,\n  };\n}\n\nexport const commonSystemAccountMeta = [\n  accountMeta({ pubkey: TOKEN_PROGRAM_ID, isWritable: false }),\n  accountMeta({ pubkey: SystemProgram.programId, isWritable: false }),\n  accountMeta({ pubkey: SYSVAR_RENT_PUBKEY, isWritable: false }),\n];\n\nexport type PublicKeyish = PublicKey | string;\n\nexport function validateAndParsePublicKey({\n  publicKey: orgPubKey,\n  transformSol,\n}: {\n  publicKey: PublicKeyish;\n  transformSol?: boolean;\n}): PublicKey {\n  const publicKey = tryParsePublicKey(orgPubKey.toString());\n\n  if (publicKey instanceof PublicKey) {\n    if (transformSol && publicKey.equals(SOLMint)) return WSOLMint;\n    return publicKey;\n  }\n\n  if (transformSol && publicKey.toString() === SOLMint.toBase58()) return WSOLMint;\n\n  if (typeof publicKey === \"string\") {\n    if (publicKey === PublicKey.default.toBase58()) return PublicKey.default;\n    try {\n      const key = new PublicKey(publicKey);\n      return key;\n    } catch {\n      throw new Error(\"invalid public key\");\n    }\n  }\n\n  throw new Error(\"invalid public key\");\n}\n\nexport function tryParsePublicKey(v: string): PublicKey | string {\n  try {\n    return new PublicKey(v);\n  } catch (e) {\n    return v;\n  }\n}\n\nexport const MEMO_PROGRAM_ID = new PublicKey(\"MemoSq4gqABAXKb96qnH8TysNcWxMyWCqXgDLGmfcHr\");\nexport const MEMO_PROGRAM_ID2 = new PublicKey(\"MemoSq4gqABAXKb96qnH8TysNcWxMyWCqXgDLGmfcHr\");\nexport const RENT_PROGRAM_ID = new PublicKey(\"SysvarRent111111111111111111111111111111111\");\nexport const CLOCK_PROGRAM_ID = new PublicKey(\"SysvarC1ock11111111111111111111111111111111\");\nexport const METADATA_PROGRAM_ID = new PublicKey(\"metaqbxxUerdq28cj1RbAWkYQm3ybzjb6a8bt518x1s\");\nexport const INSTRUCTION_PROGRAM_ID = new PublicKey(\"Sysvar1nstructions1111111111111111111111111\");\nexport const SYSTEM_PROGRAM_ID = SystemProgram.programId;\n\nexport const RAYMint = new PublicKey(\"4k3Dyjzvzp8eMZWUXbBCjEvwSkkk59S5iCNLY3QrkX6R\");\nexport const PAIMint = new PublicKey(\"Ea5SjE2Y6yvCeW5dYTn7PYMuW5ikXkvbGdcmSnXeaLjS\");\nexport const SRMMint = new PublicKey(\"SRMuApVNdxXokk5GT7XD5cUUgXMBCoAz2LHeuAoKWRt\");\nexport const USDCMint = new PublicKey(\"EPjFWdd5AufqSSqeM2qN1xzybapC8G4wEGGkZwyTDt1v\");\nexport const USDTMint = new PublicKey(\"Es9vMFrzaCERmJfrF4H2FYD4KCoNkY11McCe8BenwNYB\");\nexport const mSOLMint = new PublicKey(\"mSoLzYCxHdYgdzU16g5QSh3i5K3z3KZK7ytfqcJm7So\");\nexport const stSOLMint = new PublicKey(\"7dHbWXmci3dT8UFYWYZweBLXgycu7Y3iL6trKn1Y7ARj\");\nexport const USDHMint = new PublicKey(\"USDH1SM1ojwWUga67PGrgFWUHibbjqMvuMaDkRJTgkX\");\nexport const NRVMint = new PublicKey(\"NRVwhjBQiUPYtfDT5zRBVJajzFQHaBUNtC7SNVvqRFa\");\nexport const ANAMint = new PublicKey(\"ANAxByE6G2WjFp7A4NqtWYXb3mgruyzZYg3spfxe6Lbo\");\nexport const ETHMint = new PublicKey(\"7vfCXTUXx5WJV5JADk17DUJ4ksgau7utNKj4b963voxs\");\nexport const WSOLMint = new PublicKey(\"So11111111111111111111111111111111111111112\");\nexport const SOLMint = PublicKey.default;\n\nexport function solToWSol(mint: PublicKeyish): PublicKey {\n  return validateAndParsePublicKey({ publicKey: mint, transformSol: true });\n}\n","import { PublicKey } from \"@solana/web3.js\";\nimport { TOKEN_PROGRAM_ID } from \"@solana/spl-token\";\nimport { TokenInfo } from \"./type\";\n\nexport const SOL_INFO: TokenInfo = {\n  chainId: 101,\n  address: PublicKey.default.toBase58(),\n  programId: TOKEN_PROGRAM_ID.toBase58(),\n  decimals: 9,\n  symbol: \"SOL\",\n  name: \"solana\",\n  logoURI: `https://img.raydium.io/icon/So11111111111111111111111111111111111111112.png`,\n  tags: [],\n  priority: 2,\n  type: \"raydium\",\n  extensions: {\n    coingeckoId: \"solana\",\n  },\n};\n\nexport const TOKEN_WSOL: TokenInfo = {\n  chainId: 101,\n  address: \"So11111111111111111111111111111111111111112\",\n  programId: TOKEN_PROGRAM_ID.toBase58(),\n  decimals: 9,\n  symbol: \"WSOL\",\n  name: \"Wrapped SOL\",\n  logoURI: `https://img.raydium.io/icon/So11111111111111111111111111111111111111112.png`,\n  tags: [],\n  priority: 2,\n  type: \"raydium\",\n  extensions: {\n    coingeckoId: \"solana\",\n  },\n};\n","import _Big from \"big.js\";\nimport BN from \"bn.js\";\nimport _Decimal from \"decimal.js-light\";\n\nimport { BigNumberish, parseBigNumberish, Rounding } from \"../common/bignumber\";\nimport { createLogger } from \"../common/logger\";\n\nimport toFormat, { WrappedBig } from \"./formatter\";\n\nconst logger = createLogger(\"module/fraction\");\n\nconst Big = toFormat(_Big);\ntype Big = WrappedBig;\n\nconst Decimal = toFormat(_Decimal);\n\nconst toSignificantRounding = {\n  [Rounding.ROUND_DOWN]: Decimal.ROUND_DOWN,\n  [Rounding.ROUND_HALF_UP]: Decimal.ROUND_HALF_UP,\n  [Rounding.ROUND_UP]: Decimal.ROUND_UP,\n};\n\nconst toFixedRounding = {\n  [Rounding.ROUND_DOWN]: _Big.roundDown,\n  [Rounding.ROUND_HALF_UP]: _Big.roundHalfUp,\n  [Rounding.ROUND_UP]: _Big.roundUp,\n};\n\nexport class Fraction {\n  public readonly numerator: BN;\n  public readonly denominator: BN;\n\n  public constructor(numerator: BigNumberish, denominator: BigNumberish = new BN(1)) {\n    this.numerator = parseBigNumberish(numerator);\n    this.denominator = parseBigNumberish(denominator);\n  }\n\n  public get quotient(): BN {\n    return this.numerator.div(this.denominator);\n  }\n\n  public invert(): Fraction {\n    return new Fraction(this.denominator, this.numerator);\n  }\n\n  public add(other: Fraction | BigNumberish): Fraction {\n    const otherParsed = other instanceof Fraction ? other : new Fraction(parseBigNumberish(other));\n\n    if (this.denominator.eq(otherParsed.denominator)) {\n      return new Fraction(this.numerator.add(otherParsed.numerator), this.denominator);\n    }\n\n    return new Fraction(\n      this.numerator.mul(otherParsed.denominator).add(otherParsed.numerator.mul(this.denominator)),\n      this.denominator.mul(otherParsed.denominator),\n    );\n  }\n\n  public sub(other: Fraction | BigNumberish): Fraction {\n    const otherParsed = other instanceof Fraction ? other : new Fraction(parseBigNumberish(other));\n\n    if (this.denominator.eq(otherParsed.denominator)) {\n      return new Fraction(this.numerator.sub(otherParsed.numerator), this.denominator);\n    }\n\n    return new Fraction(\n      this.numerator.mul(otherParsed.denominator).sub(otherParsed.numerator.mul(this.denominator)),\n      this.denominator.mul(otherParsed.denominator),\n    );\n  }\n\n  public mul(other: Fraction | BigNumberish): Fraction {\n    const otherParsed = other instanceof Fraction ? other : new Fraction(parseBigNumberish(other));\n\n    return new Fraction(this.numerator.mul(otherParsed.numerator), this.denominator.mul(otherParsed.denominator));\n  }\n\n  public div(other: Fraction | BigNumberish): Fraction {\n    const otherParsed = other instanceof Fraction ? other : new Fraction(parseBigNumberish(other));\n\n    return new Fraction(this.numerator.mul(otherParsed.denominator), this.denominator.mul(otherParsed.numerator));\n  }\n\n  public toSignificant(\n    significantDigits: number,\n    format: object = { groupSeparator: \"\" },\n    rounding: Rounding = Rounding.ROUND_HALF_UP,\n  ): string {\n    if (!Number.isInteger(significantDigits)) logger.logWithError(`${significantDigits} is not an integer.`);\n    if (significantDigits <= 0) logger.logWithError(`${significantDigits} is not positive.`);\n\n    Decimal.set({ precision: significantDigits + 1, rounding: toSignificantRounding[rounding] });\n    const quotient = new Decimal(this.numerator.toString())\n      .div(this.denominator.toString())\n      .toSignificantDigits(significantDigits);\n    return quotient.toFormat(quotient.decimalPlaces(), format);\n  }\n\n  public toFixed(\n    decimalPlaces: number,\n    format: object = { groupSeparator: \"\" },\n    rounding: Rounding = Rounding.ROUND_HALF_UP,\n  ): string {\n    if (!Number.isInteger(decimalPlaces)) logger.logWithError(`${decimalPlaces} is not an integer.`);\n    if (decimalPlaces < 0) logger.logWithError(`${decimalPlaces} is negative.`);\n\n    Big.DP = decimalPlaces;\n    Big.RM = toFixedRounding[rounding] || 1;\n    return new Big(this.numerator.toString()).div(this.denominator.toString()).toFormat(decimalPlaces, format);\n  }\n\n  public isZero(): boolean {\n    return this.numerator.isZero();\n  }\n}\n","import Big, { BigConstructor, BigSource, RoundingMode } from \"big.js\";\nimport Decimal, { Config, Numeric } from \"decimal.js-light\";\nimport _toFarmat from \"toformat\";\n\ntype TakeStatic<T> = { [P in keyof T]: T[P] };\ninterface FormatOptions {\n  decimalSeparator?: string;\n  groupSeparator?: string;\n  groupSize?: number;\n  fractionGroupSeparator?: string;\n  fractionGroupSize?: number;\n}\ninterface WrappedBigConstructor extends TakeStatic<BigConstructor> {\n  new (value: BigSource): WrappedBig;\n  (value: BigSource): WrappedBig;\n  (): WrappedBigConstructor;\n\n  format: FormatOptions;\n}\nexport interface WrappedBig extends Big {\n  add(n: BigSource): WrappedBig;\n  abs(): WrappedBig;\n  div(n: BigSource): WrappedBig;\n  minus(n: BigSource): WrappedBig;\n  mod(n: BigSource): WrappedBig;\n  mul(n: BigSource): WrappedBig;\n  plus(n: BigSource): WrappedBig;\n  pow(exp: number): WrappedBig;\n  round(dp?: number, rm?: RoundingMode): WrappedBig;\n  sqrt(): WrappedBig;\n  sub(n: BigSource): WrappedBig;\n  times(n: BigSource): WrappedBig;\n  toFormat(): string;\n  toFormat(options: FormatOptions): string;\n  toFormat(fractionLength: number): string;\n  toFormat(fractionLength: number, options: FormatOptions): string;\n  toFormat(fractionLength: number, missionUnknown: number): string;\n  toFormat(fractionLength: number, missionUnknown: number, options: FormatOptions): string;\n}\n\ntype DecimalConstructor = typeof Decimal;\ninterface WrappedDecimalConstructor extends TakeStatic<DecimalConstructor> {\n  new (value: Numeric): WrappedDecimal;\n  clone(config?: Config): WrappedDecimalConstructor;\n  config(config: Config): WrappedDecimal;\n  set(config: Config): WrappedDecimal;\n  format: FormatOptions;\n}\nexport interface WrappedDecimal extends Decimal {\n  absoluteValue(): WrappedDecimal;\n  abs(): WrappedDecimal;\n  dividedBy(y: Numeric): WrappedDecimal;\n  div(y: Numeric): WrappedDecimal;\n  dividedToIntegerBy(y: Numeric): WrappedDecimal;\n  idiv(y: Numeric): WrappedDecimal;\n  logarithm(base?: Numeric): WrappedDecimal;\n  log(base?: Numeric): WrappedDecimal;\n  minus(y: Numeric): WrappedDecimal;\n  sub(y: Numeric): WrappedDecimal;\n  modulo(y: Numeric): WrappedDecimal;\n  mod(y: Numeric): WrappedDecimal;\n  naturalExponetial(): WrappedDecimal;\n  exp(): WrappedDecimal;\n  naturalLogarithm(): WrappedDecimal;\n  ln(): WrappedDecimal;\n  negated(): WrappedDecimal;\n  neg(): WrappedDecimal;\n  plus(y: Numeric): WrappedDecimal;\n  add(y: Numeric): WrappedDecimal;\n  squareRoot(): WrappedDecimal;\n  sqrt(): WrappedDecimal;\n  times(y: Numeric): WrappedDecimal;\n  mul(y: Numeric): WrappedDecimal;\n  toWrappedDecimalPlaces(dp?: number, rm?: number): WrappedDecimal;\n  todp(dp?: number, rm?: number): WrappedDecimal;\n  toInteger(): WrappedDecimal;\n  toint(): WrappedDecimal;\n  toPower(y: Numeric): WrappedDecimal;\n  pow(y: Numeric): WrappedDecimal;\n  toSignificantDigits(sd?: number, rm?: number): WrappedDecimal;\n  tosd(sd?: number, rm?: number): WrappedDecimal;\n  toFormat(options: FormatOptions): string;\n  toFormat(fractionLength: number): string;\n  toFormat(fractionLength: number, options: FormatOptions): string;\n  toFormat(fractionLength: number, missionUnknown: number): string;\n  toFormat(fractionLength: number, missionUnknown: number, options: FormatOptions): string;\n}\n\nconst toFormat: {\n  (fn: BigConstructor): WrappedBigConstructor;\n  (fn: DecimalConstructor): WrappedDecimalConstructor;\n} = _toFarmat;\nexport default toFormat;\n","import { BigNumberish, Rounding, tenExponential } from \"../common/bignumber\";\nimport { createLogger } from \"../common/logger\";\n\nimport { Fraction } from \"./fraction\";\nimport { Token } from \"./token\";\n\nconst logger = createLogger(\"Raydium_price\");\n\ninterface PriceProps {\n  baseToken: Token;\n  denominator: BigNumberish;\n  quoteToken: Token;\n  numerator: BigNumberish;\n}\n\nexport class Price extends Fraction {\n  public readonly baseToken: Token; // input i.e. denominator\n  public readonly quoteToken: Token; // output i.e. numerator\n  // used to adjust the raw fraction w/r/t the decimals of the {base,quote}Token\n  public readonly scalar: Fraction;\n\n  // denominator and numerator _must_ be raw, i.e. in the native representation\n  public constructor(params: PriceProps) {\n    const { baseToken, quoteToken, numerator, denominator } = params;\n    super(numerator, denominator);\n\n    this.baseToken = baseToken;\n    this.quoteToken = quoteToken;\n    this.scalar = new Fraction(tenExponential(baseToken.decimals), tenExponential(quoteToken.decimals));\n  }\n\n  public get raw(): Fraction {\n    return new Fraction(this.numerator, this.denominator);\n  }\n\n  public get adjusted(): Fraction {\n    return super.mul(this.scalar);\n  }\n\n  public invert(): Price {\n    return new Price({\n      baseToken: this.quoteToken,\n      quoteToken: this.baseToken,\n      denominator: this.numerator,\n      numerator: this.denominator,\n    });\n  }\n\n  public mul(other: Price): Price {\n    if (this.quoteToken !== other.baseToken) logger.logWithError(\"mul token not equals\");\n\n    const fraction = super.mul(other);\n    return new Price({\n      baseToken: this.baseToken,\n      quoteToken: other.quoteToken,\n      denominator: fraction.denominator,\n      numerator: fraction.numerator,\n    });\n  }\n\n  public toSignificant(significantDigits = this.quoteToken.decimals, format?: object, rounding?: Rounding): string {\n    return this.adjusted.toSignificant(significantDigits, format, rounding);\n  }\n\n  public toFixed(decimalPlaces = this.quoteToken.decimals, format?: object, rounding?: Rounding): string {\n    return this.adjusted.toFixed(decimalPlaces, format, rounding);\n  }\n}\n","import { SOL_INFO } from \"../raydium/token/constant\";\n\nimport { Token } from \"./token\";\n\ninterface CurrencyProps {\n  decimals: number;\n  symbol?: string;\n  name?: string;\n}\n/**\n * A currency is any fungible financial instrument on Solana, including SOL and all SPL tokens.\n * The only instance of the base class `Currency` is SOL.\n */\nexport class Currency {\n  public readonly symbol?: string;\n  public readonly name?: string;\n  public readonly decimals: number;\n\n  /**\n   * The only instance of the base class `Currency`.\n   */\n  public static readonly SOL: Currency = new Currency(SOL_INFO);\n\n  /**\n   * Constructs an instance of the base class `Currency`. The only instance of the base class `Currency` is `Currency.SOL`.\n   * @param decimals - decimals of the currency\n   * @param symbol - symbol of the currency\n   * @param name - name of the currency\n   */\n  public constructor({ decimals, symbol = \"UNKNOWN\", name = \"UNKNOWN\" }: CurrencyProps) {\n    this.decimals = decimals;\n    this.symbol = symbol;\n    this.name = name;\n  }\n\n  public equals(other: Currency): boolean {\n    return this === other;\n  }\n}\n\n/**\n * Compares two currencies for equality\n */\nexport function currencyEquals(currencyA: Currency, currencyB: Currency): boolean {\n  if (currencyA instanceof Token && currencyB instanceof Token) {\n    return currencyA.equals(currencyB);\n  } else if (currencyA instanceof Token || currencyB instanceof Token) {\n    return false;\n  } else {\n    return currencyA === currencyB;\n  }\n}\n","import { Rounding } from \"../common/bignumber\";\nimport BN from \"bn.js\";\nimport { Fraction } from \"./fraction\";\n\nexport const _100_PERCENT = new Fraction(new BN(100));\n\nexport class Percent extends Fraction {\n  public toSignificant(significantDigits = 5, format?: object, rounding?: Rounding): string {\n    return this.mul(_100_PERCENT).toSignificant(significantDigits, format, rounding);\n  }\n\n  public toFixed(decimalPlaces = 2, format?: object, rounding?: Rounding): string {\n    return this.mul(_100_PERCENT).toFixed(decimalPlaces, format, rounding);\n  }\n}\n","import {\n  Connection,\n  PublicKey,\n  sendAndConfirmTransaction,\n  Signer,\n  Transaction,\n  TransactionInstruction,\n  TransactionMessage,\n  VersionedTransaction,\n} from \"@solana/web3.js\";\nimport axios from \"axios\";\n\nimport { SignAllTransactions, ComputeBudgetConfig } from \"@/raydium/type\";\nimport { Cluster } from \"@/solana\";\nimport { TxVersion } from \"./txType\";\nimport { Owner } from \"../owner\";\nimport { getRecentBlockHash, addComputeBudget, checkLegacyTxSize, checkV0TxSize, printSimulate } from \"./txUtils\";\nimport { CacheLTA, getMultipleLookupTableInfo, LOOKUP_TABLE_CACHE } from \"./lookupTable\";\n\ninterface SolanaFeeInfo {\n  min: number;\n  max: number;\n  avg: number;\n  priorityTx: number;\n  nonVotes: number;\n  priorityRatio: number;\n  avgCuPerBlock: number;\n  blockspaceUsageRatio: number;\n}\ntype SolanaFeeInfoJson = {\n  \"1\": SolanaFeeInfo;\n  \"5\": SolanaFeeInfo;\n  \"15\": SolanaFeeInfo;\n};\n\ninterface ExecuteParams {\n  skipPreflight?: boolean;\n  recentBlockHash?: string;\n}\n\ninterface TxBuilderInit {\n  connection: Connection;\n  feePayer: PublicKey;\n  cluster: Cluster;\n  owner?: Owner;\n  signAllTransactions?: SignAllTransactions;\n}\n\nexport interface AddInstructionParam {\n  addresses?: Record<string, PublicKey>;\n  instructions?: TransactionInstruction[];\n  endInstructions?: TransactionInstruction[];\n  lookupTableAddress?: string[];\n  signers?: Signer[];\n  instructionTypes?: string[];\n  endInstructionTypes?: string[];\n}\n\nexport interface TxBuildData<T = Record<string, any>> {\n  builder: TxBuilder;\n  transaction: Transaction;\n  instructionTypes: string[];\n  signers: Signer[];\n  execute: (params?: ExecuteParams) => Promise<{ txId: string; signedTx: Transaction }>;\n  extInfo: T;\n}\n\nexport interface TxV0BuildData<T = Record<string, any>> extends Omit<TxBuildData<T>, \"transaction\" | \"execute\"> {\n  builder: TxBuilder;\n  transaction: VersionedTransaction;\n  buildProps?: {\n    lookupTableCache?: CacheLTA;\n    lookupTableAddress?: string[];\n  };\n  execute: (params?: ExecuteParams) => Promise<{ txId: string; signedTx: VersionedTransaction }>;\n}\n\ntype TxUpdateParams = {\n  txId: string;\n  status: \"success\" | \"error\" | \"sent\";\n  signedTx: Transaction | VersionedTransaction;\n};\nexport interface MultiTxExecuteParam extends ExecuteParams {\n  sequentially: boolean;\n  onTxUpdate?: (completeTxs: TxUpdateParams[]) => void;\n}\nexport interface MultiTxBuildData<T = Record<string, any>> {\n  builder: TxBuilder;\n  transactions: Transaction[];\n  instructionTypes: string[];\n  signers: Signer[][];\n  execute: (executeParams?: MultiTxExecuteParam) => Promise<{ txIds: string[]; signedTxs: Transaction[] }>;\n  extInfo: T;\n}\n\nexport interface MultiTxV0BuildData<T = Record<string, any>>\n  extends Omit<MultiTxBuildData<T>, \"transactions\" | \"execute\"> {\n  builder: TxBuilder;\n  transactions: VersionedTransaction[];\n  buildProps?: {\n    lookupTableCache?: CacheLTA;\n    lookupTableAddress?: string[];\n  };\n  execute: (executeParams?: MultiTxExecuteParam) => Promise<{ txIds: string[]; signedTxs: VersionedTransaction[] }>;\n}\n\nexport type MakeMultiTxData<T = TxVersion.LEGACY, O = Record<string, any>> = T extends TxVersion.LEGACY\n  ? MultiTxBuildData<O>\n  : MultiTxV0BuildData<O>;\n\nexport type MakeTxData<T = TxVersion.LEGACY, O = Record<string, any>> = T extends TxVersion.LEGACY\n  ? TxBuildData<O>\n  : TxV0BuildData<O>;\n\nexport class TxBuilder {\n  private connection: Connection;\n  private owner?: Owner;\n  private instructions: TransactionInstruction[] = [];\n  private endInstructions: TransactionInstruction[] = [];\n  private lookupTableAddress: string[] = [];\n  private signers: Signer[] = [];\n  private instructionTypes: string[] = [];\n  private endInstructionTypes: string[] = [];\n  private feePayer: PublicKey;\n  private cluster: Cluster;\n  private signAllTransactions?: SignAllTransactions;\n\n  constructor(params: TxBuilderInit) {\n    this.connection = params.connection;\n    this.feePayer = params.feePayer;\n    this.signAllTransactions = params.signAllTransactions;\n    this.owner = params.owner;\n    this.cluster = params.cluster;\n  }\n\n  get AllTxData(): {\n    instructions: TransactionInstruction[];\n    endInstructions: TransactionInstruction[];\n    signers: Signer[];\n    instructionTypes: string[];\n    endInstructionTypes: string[];\n    lookupTableAddress: string[];\n  } {\n    return {\n      instructions: this.instructions,\n      endInstructions: this.endInstructions,\n      signers: this.signers,\n      instructionTypes: this.instructionTypes,\n      endInstructionTypes: this.endInstructionTypes,\n      lookupTableAddress: this.lookupTableAddress,\n    };\n  }\n\n  get allInstructions(): TransactionInstruction[] {\n    return [...this.instructions, ...this.endInstructions];\n  }\n\n  public async getComputeBudgetConfig(): Promise<ComputeBudgetConfig | undefined> {\n    const json = (\n      await axios.get<SolanaFeeInfoJson>(`https://solanacompass.com/api/fees?cacheFreshTime=${5 * 60 * 1000}`)\n    ).data;\n    const { avg } = json?.[15] ?? {};\n    if (!avg) return undefined;\n    return {\n      units: 600000,\n      microLamports: Math.min(Math.ceil((avg * 1000000) / 600000), 25000),\n    };\n  }\n\n  public addCustomComputeBudget(config?: ComputeBudgetConfig): boolean {\n    if (config) {\n      const { instructions, instructionTypes } = addComputeBudget(config);\n      this.instructions.unshift(...instructions);\n      this.instructionTypes.unshift(...instructionTypes);\n      return true;\n    }\n    return false;\n  }\n\n  public async calComputeBudget({\n    config: propConfig,\n    defaultIns,\n  }: {\n    config?: ComputeBudgetConfig;\n    defaultIns?: TransactionInstruction[];\n  }): Promise<void> {\n    try {\n      const config = propConfig || (await this.getComputeBudgetConfig());\n      if (this.addCustomComputeBudget(config)) return;\n      defaultIns && this.instructions.unshift(...defaultIns);\n    } catch {\n      defaultIns && this.instructions.unshift(...defaultIns);\n    }\n  }\n\n  public addInstruction({\n    instructions = [],\n    endInstructions = [],\n    signers = [],\n    instructionTypes = [],\n    endInstructionTypes = [],\n    lookupTableAddress = [],\n  }: AddInstructionParam): TxBuilder {\n    this.instructions.push(...instructions);\n    this.endInstructions.push(...endInstructions);\n    this.signers.push(...signers);\n    this.instructionTypes.push(...instructionTypes);\n    this.endInstructionTypes.push(...endInstructionTypes);\n    this.lookupTableAddress.push(...lookupTableAddress.filter((address) => address !== PublicKey.default.toString()));\n    return this;\n  }\n\n  public async versionBuild<O = Record<string, any>>({\n    txVersion,\n    extInfo,\n  }: {\n    txVersion?: TxVersion;\n    extInfo?: O;\n  }): Promise<MakeTxData<TxVersion.LEGACY, O> | MakeTxData<TxVersion.V0, O>> {\n    if (txVersion === TxVersion.V0) return (await this.buildV0({ ...(extInfo || {}) })) as MakeTxData<TxVersion.V0, O>;\n    return this.build<O>(extInfo) as MakeTxData<TxVersion.LEGACY, O>;\n  }\n\n  public build<O = Record<string, any>>(extInfo?: O): MakeTxData<TxVersion.LEGACY, O> {\n    const transaction = new Transaction();\n    if (this.allInstructions.length) transaction.add(...this.allInstructions);\n    transaction.feePayer = this.feePayer;\n\n    return {\n      builder: this,\n      transaction,\n      signers: this.signers,\n      instructionTypes: [...this.instructionTypes, ...this.endInstructionTypes],\n      execute: async (params) => {\n        const { recentBlockHash: propBlockHash, skipPreflight = true } = params || {};\n        const recentBlockHash = propBlockHash ?? (await getRecentBlockHash(this.connection));\n        transaction.recentBlockhash = recentBlockHash;\n        if (this.signers.length) transaction.sign(...this.signers);\n        printSimulate([transaction]);\n        if (this.owner?.isKeyPair) {\n          return {\n            txId: await sendAndConfirmTransaction(\n              this.connection,\n              transaction,\n              this.signers.find((s) => s.publicKey.equals(this.owner!.publicKey))\n                ? this.signers\n                : [...this.signers, this.owner.signer!],\n              { skipPreflight },\n            ),\n            signedTx: transaction,\n          };\n        }\n        if (this.signAllTransactions) {\n          const txs = await this.signAllTransactions([transaction]);\n          return {\n            txId: await this.connection.sendRawTransaction(txs[0].serialize(), { skipPreflight }),\n            signedTx: txs[0],\n          };\n        }\n        throw new Error(\"please provide owner in keypair format or signAllTransactions function\");\n      },\n      extInfo: extInfo || ({} as O),\n    };\n  }\n\n  public buildMultiTx<T = Record<string, any>>(params: {\n    extraPreBuildData?: MakeTxData<TxVersion.LEGACY>[];\n    extInfo?: T;\n  }): MultiTxBuildData {\n    const { extraPreBuildData = [], extInfo } = params;\n    const { transaction } = this.build(extInfo);\n\n    const filterExtraBuildData = extraPreBuildData.filter((data) => data.transaction.instructions.length > 0);\n\n    const allTransactions: Transaction[] = [transaction, ...filterExtraBuildData.map((data) => data.transaction)];\n    const allSigners: Signer[][] = [this.signers, ...filterExtraBuildData.map((data) => data.signers)];\n    const allInstructionTypes: string[] = [\n      ...this.instructionTypes,\n      ...filterExtraBuildData.map((data) => data.instructionTypes).flat(),\n    ];\n\n    return {\n      builder: this,\n      transactions: allTransactions,\n      signers: allSigners,\n      instructionTypes: allInstructionTypes,\n      execute: async (executeParams?: MultiTxExecuteParam) => {\n        const { sequentially, onTxUpdate, recentBlockHash: propBlockHash, skipPreflight = true } = executeParams || {};\n        const recentBlockHash = propBlockHash ?? (await getRecentBlockHash(this.connection));\n        if (this.owner?.isKeyPair) {\n          return {\n            txIds: await await Promise.all(\n              allTransactions.map(async (tx, idx) => {\n                tx.recentBlockhash = recentBlockHash;\n                return await sendAndConfirmTransaction(\n                  this.connection,\n                  tx,\n                  allSigners[idx].find((s) => s.publicKey.equals(this.owner!.publicKey))\n                    ? allSigners[idx]\n                    : [...allSigners[idx], this.owner!.signer!],\n                  { skipPreflight },\n                );\n              }),\n            ),\n            signedTxs: allTransactions,\n          };\n        }\n\n        if (this.signAllTransactions) {\n          const partialSignedTxs = allTransactions.map((tx, idx) => {\n            tx.recentBlockhash = recentBlockHash;\n            if (allSigners[idx].length) tx.sign(...allSigners[idx]);\n            return tx;\n          });\n          printSimulate(partialSignedTxs);\n          const signedTxs = await this.signAllTransactions(partialSignedTxs);\n          if (sequentially) {\n            let i = 0;\n            const processedTxs: TxUpdateParams[] = [];\n            const checkSendTx = async (): Promise<void> => {\n              if (!signedTxs[i]) return;\n              const txId = await this.connection.sendRawTransaction(signedTxs[i].serialize(), { skipPreflight });\n              processedTxs.push({ txId, status: \"sent\", signedTx: signedTxs[i] });\n              onTxUpdate?.([...processedTxs]);\n              i++;\n              this.connection.onSignature(\n                txId,\n                (signatureResult) => {\n                  const targetTxIdx = processedTxs.findIndex((tx) => tx.txId === txId);\n                  if (targetTxIdx > -1) processedTxs[targetTxIdx].status = signatureResult.err ? \"error\" : \"success\";\n                  onTxUpdate?.([...processedTxs]);\n                  if (!signatureResult.err) checkSendTx();\n                },\n                \"processed\",\n              );\n              this.connection.getSignatureStatus(txId);\n            };\n            await checkSendTx();\n            return {\n              txIds: processedTxs.map((d) => d.txId),\n              signedTxs,\n            };\n          } else {\n            const txIds: string[] = [];\n            for (let i = 0; i < signedTxs.length; i += 1) {\n              const txId = await this.connection.sendRawTransaction(signedTxs[i].serialize(), { skipPreflight });\n              txIds.push(txId);\n            }\n            return {\n              txIds,\n              signedTxs,\n            };\n          }\n        }\n        throw new Error(\"please provide owner in keypair format or signAllTransactions function\");\n      },\n      extInfo: extInfo || {},\n    };\n  }\n\n  public async versionMultiBuild<T extends TxVersion, O = Record<string, any>>({\n    extraPreBuildData,\n    txVersion,\n    extInfo,\n  }: {\n    extraPreBuildData?: MakeTxData<TxVersion.V0>[] | MakeTxData<TxVersion.LEGACY>[];\n    txVersion?: T;\n    extInfo?: O;\n  }): Promise<MakeMultiTxData<T, O>> {\n    if (txVersion === TxVersion.V0)\n      return (await this.buildV0MultiTx({\n        extraPreBuildData: extraPreBuildData as MakeTxData<TxVersion.V0>[],\n        buildProps: extInfo || {},\n      })) as MakeMultiTxData<T, O>;\n    return this.buildMultiTx<O>({\n      extraPreBuildData: extraPreBuildData as MakeTxData<TxVersion.LEGACY>[],\n      extInfo,\n    }) as MakeMultiTxData<T, O>;\n  }\n\n  public async buildV0<O = Record<string, any>>(\n    props?: O & {\n      lookupTableCache?: CacheLTA;\n      lookupTableAddress?: string[];\n      forerunCreate?: boolean;\n    },\n  ): Promise<MakeTxData<TxVersion.V0, O>> {\n    const { lookupTableCache = {}, lookupTableAddress = [], forerunCreate, ...extInfo } = props || {};\n    const lookupTableAddressAccount = {\n      ...(this.cluster === \"devnet\" ? {} : LOOKUP_TABLE_CACHE),\n      ...lookupTableCache,\n    };\n    const allLTA = Array.from(new Set<string>([...lookupTableAddress, ...this.lookupTableAddress]));\n    const needCacheLTA: PublicKey[] = [];\n    for (const item of allLTA) {\n      if (lookupTableAddressAccount[item] === undefined) needCacheLTA.push(new PublicKey(item));\n    }\n    const newCacheLTA = await getMultipleLookupTableInfo({ connection: this.connection, address: needCacheLTA });\n    for (const [key, value] of Object.entries(newCacheLTA)) lookupTableAddressAccount[key] = value;\n\n    const messageV0 = new TransactionMessage({\n      payerKey: this.feePayer,\n      recentBlockhash: forerunCreate ? PublicKey.default.toBase58() : await getRecentBlockHash(this.connection),\n      instructions: [...this.allInstructions],\n    }).compileToV0Message(Object.values(lookupTableAddressAccount));\n    const transaction = new VersionedTransaction(messageV0);\n    transaction.sign(this.signers);\n\n    return {\n      builder: this,\n      transaction,\n      signers: this.signers,\n      instructionTypes: [...this.instructionTypes, ...this.endInstructionTypes],\n      execute: async (params) => {\n        const { recentBlockHash: propBlockHash, skipPreflight = true } = params || {};\n        if (propBlockHash) transaction.message.recentBlockhash = propBlockHash;\n        printSimulate([transaction]);\n        if (this.owner?.isKeyPair) {\n          if (!this.signers.find((s) => s.publicKey.equals(this.owner!.publicKey)))\n            transaction.sign([this.owner.signer as Signer]);\n          const txId = await this.connection.sendTransaction(transaction, { skipPreflight });\n          const { lastValidBlockHeight, blockhash } = await this.connection.getLatestBlockhash();\n          await this.connection.confirmTransaction(\n            {\n              blockhash,\n              lastValidBlockHeight,\n              signature: txId,\n            },\n            \"confirmed\",\n          );\n\n          return {\n            txId,\n            signedTx: transaction,\n          };\n        }\n        if (this.signAllTransactions) {\n          const txs = await this.signAllTransactions<VersionedTransaction>([transaction]);\n          return {\n            txId: await this.connection.sendTransaction(txs[0], { skipPreflight }),\n            signedTx: txs[0],\n          };\n        }\n        throw new Error(\"please provide owner in keypair format or signAllTransactions function\");\n      },\n      extInfo: (extInfo || {}) as O,\n    };\n  }\n\n  public async buildV0MultiTx<T = Record<string, any>>(params: {\n    extraPreBuildData?: MakeTxData<TxVersion.V0>[];\n    buildProps?: T & {\n      lookupTableCache?: CacheLTA;\n      lookupTableAddress?: string[];\n    };\n  }): Promise<MultiTxV0BuildData> {\n    const { extraPreBuildData = [], buildProps } = params;\n    const { transaction } = await this.buildV0(buildProps);\n\n    const filterExtraBuildData = extraPreBuildData.filter((data) => data.builder.instructions.length > 0);\n\n    const allTransactions: VersionedTransaction[] = [\n      transaction,\n      ...filterExtraBuildData.map((data) => data.transaction),\n    ];\n    const allSigners: Signer[][] = [this.signers, ...filterExtraBuildData.map((data) => data.signers)];\n    const allInstructionTypes: string[] = [\n      ...this.instructionTypes,\n      ...filterExtraBuildData.map((data) => data.instructionTypes).flat(),\n    ];\n\n    allTransactions.forEach(async (tx, idx) => {\n      tx.sign(allSigners[idx]);\n    });\n\n    return {\n      builder: this,\n      transactions: allTransactions,\n      signers: allSigners,\n      instructionTypes: allInstructionTypes,\n      buildProps,\n      execute: async (executeParams?: MultiTxExecuteParam) => {\n        const { sequentially, onTxUpdate, recentBlockHash: propBlockHash, skipPreflight = true } = executeParams || {};\n        if (propBlockHash) allTransactions.forEach((tx) => (tx.message.recentBlockhash = propBlockHash));\n        printSimulate(allTransactions);\n        if (this.owner?.isKeyPair) {\n          const { lastValidBlockHeight, blockhash } = await this.connection.getLatestBlockhash();\n          allTransactions.forEach((tx, idx) => {\n            if (!allSigners[idx].find((s) => s.publicKey.equals(this.owner!.publicKey)))\n              tx.sign([this.owner!.signer as Signer]);\n          });\n          return {\n            txIds: await Promise.all(\n              allTransactions.map(async (tx) => {\n                const txId = await this.connection.sendTransaction(tx, { skipPreflight });\n                await this.connection.confirmTransaction(\n                  {\n                    blockhash,\n                    lastValidBlockHeight,\n                    signature: txId,\n                  },\n                  \"confirmed\",\n                );\n                return txId;\n              }),\n            ),\n            signedTxs: allTransactions,\n          };\n        }\n\n        if (this.signAllTransactions) {\n          const signedTxs = await this.signAllTransactions(allTransactions);\n\n          if (sequentially) {\n            let i = 0;\n            const processedTxs: TxUpdateParams[] = [];\n            const checkSendTx = async (): Promise<void> => {\n              if (!signedTxs[i]) return;\n              const txId = await this.connection.sendTransaction(signedTxs[i], { skipPreflight });\n              processedTxs.push({ txId, status: \"sent\", signedTx: signedTxs[i] });\n              onTxUpdate?.([...processedTxs]);\n              i++;\n              this.connection.onSignature(\n                txId,\n                (signatureResult) => {\n                  const targetTxIdx = processedTxs.findIndex((tx) => tx.txId === txId);\n                  if (targetTxIdx > -1) processedTxs[targetTxIdx].status = signatureResult.err ? \"error\" : \"success\";\n                  onTxUpdate?.([...processedTxs]);\n                  if (!signatureResult.err) checkSendTx();\n                },\n                \"processed\",\n              );\n              this.connection.getSignatureStatus(txId);\n            };\n            checkSendTx();\n            return {\n              txIds: [],\n              signedTxs,\n            };\n          } else {\n            const txIds: string[] = [];\n            for (let i = 0; i < signedTxs.length; i += 1) {\n              const txId = await this.connection.sendTransaction(signedTxs[i], { skipPreflight });\n              txIds.push(txId);\n            }\n            return { txIds, signedTxs };\n          }\n        }\n        throw new Error(\"please provide owner in keypair format or signAllTransactions function\");\n      },\n      extInfo: buildProps || {},\n    };\n  }\n\n  public async sizeCheckBuild(\n    props?: Record<string, any> & { computeBudgetConfig?: ComputeBudgetConfig },\n  ): Promise<MultiTxBuildData> {\n    const { computeBudgetConfig, ...extInfo } = props || {};\n\n    const computeBudgetData: { instructions: TransactionInstruction[]; instructionTypes: string[] } =\n      computeBudgetConfig\n        ? addComputeBudget(computeBudgetConfig)\n        : {\n            instructions: [],\n            instructionTypes: [],\n          };\n\n    const signerKey: { [key: string]: Signer } = this.signers.reduce(\n      (acc, cur) => ({ ...acc, [cur.publicKey.toBase58()]: cur }),\n      {},\n    );\n\n    const allTransactions: Transaction[] = [];\n    const allSigners: Signer[][] = [];\n\n    let instructionQueue: TransactionInstruction[] = [];\n    this.allInstructions.forEach((item) => {\n      const _itemIns = [...instructionQueue, item];\n      const _itemInsWithCompute = computeBudgetConfig ? [...computeBudgetData.instructions, ..._itemIns] : _itemIns;\n      const _signerStrs = new Set<string>(\n        _itemIns.map((i) => i.keys.filter((ii) => ii.isSigner).map((ii) => ii.pubkey.toString())).flat(),\n      );\n      const _signer = [..._signerStrs.values()].map((i) => new PublicKey(i));\n\n      if (\n        (instructionQueue.length < 12 &&\n          checkLegacyTxSize({ instructions: _itemInsWithCompute, payer: this.feePayer, signers: _signer })) ||\n        checkLegacyTxSize({ instructions: _itemIns, payer: this.feePayer, signers: _signer })\n      ) {\n        // current ins add to queue still not exceed tx size limit\n        instructionQueue.push(item);\n      } else {\n        if (instructionQueue.length === 0) throw Error(\"item ins too big\");\n\n        // if add computeBudget still not exceed tx size limit\n        if (\n          checkLegacyTxSize({\n            instructions: computeBudgetConfig\n              ? [...computeBudgetData.instructions, ...instructionQueue]\n              : [...instructionQueue],\n            payer: this.feePayer,\n            signers: _signer,\n          })\n        ) {\n          allTransactions.push(new Transaction().add(...computeBudgetData.instructions, ...instructionQueue));\n        } else {\n          allTransactions.push(new Transaction().add(...instructionQueue));\n        }\n        allSigners.push(\n          Array.from(\n            new Set<string>(\n              instructionQueue.map((i) => i.keys.filter((ii) => ii.isSigner).map((ii) => ii.pubkey.toString())).flat(),\n            ),\n          )\n            .map((i) => signerKey[i])\n            .filter((i) => i !== undefined),\n        );\n        instructionQueue = [item];\n      }\n    });\n\n    if (instructionQueue.length > 0) {\n      const _signerStrs = new Set<string>(\n        instructionQueue.map((i) => i.keys.filter((ii) => ii.isSigner).map((ii) => ii.pubkey.toString())).flat(),\n      );\n      const _signers = [..._signerStrs.values()].map((i) => signerKey[i]).filter((i) => i !== undefined);\n\n      if (\n        checkLegacyTxSize({\n          instructions: computeBudgetConfig\n            ? [...computeBudgetData.instructions, ...instructionQueue]\n            : [...instructionQueue],\n          payer: this.feePayer,\n          signers: _signers.map((s) => s.publicKey),\n        })\n      ) {\n        allTransactions.push(new Transaction().add(...computeBudgetData.instructions, ...instructionQueue));\n      } else {\n        allTransactions.push(new Transaction().add(...instructionQueue));\n      }\n      allSigners.push(_signers);\n    }\n    allTransactions.forEach((tx) => (tx.feePayer = this.feePayer));\n\n    return {\n      builder: this,\n      transactions: allTransactions,\n      signers: allSigners,\n      instructionTypes: this.instructionTypes,\n      execute: async (executeParams?: MultiTxExecuteParam) => {\n        const { sequentially, onTxUpdate, recentBlockHash: propBlockHash, skipPreflight = true } = executeParams || {};\n        const recentBlockHash = propBlockHash ?? (await getRecentBlockHash(this.connection));\n        allTransactions.forEach(async (tx, idx) => {\n          tx.recentBlockhash = recentBlockHash;\n          if (allSigners[idx].length) tx.sign(...allSigners[idx]);\n        });\n        printSimulate(allTransactions);\n        if (this.owner?.isKeyPair) {\n          return {\n            txIds: await Promise.all(\n              allTransactions.map(async (tx, idx) => {\n                return await sendAndConfirmTransaction(\n                  this.connection,\n                  tx,\n                  allSigners[idx].find((s) => s.publicKey.equals(this.owner!.publicKey))\n                    ? allSigners[idx]\n                    : [...allSigners[idx], this.owner!.signer!],\n                  { skipPreflight },\n                );\n              }),\n            ),\n            signedTxs: allTransactions,\n          };\n        }\n        if (this.signAllTransactions) {\n          const signedTxs = await this.signAllTransactions(allTransactions);\n          if (sequentially) {\n            let i = 0;\n            const processedTxs: TxUpdateParams[] = [];\n            const checkSendTx = async (): Promise<void> => {\n              if (!signedTxs[i]) return;\n              const txId = await this.connection.sendRawTransaction(signedTxs[i].serialize(), { skipPreflight });\n              processedTxs.push({ txId, status: \"sent\", signedTx: signedTxs[i] });\n              onTxUpdate?.([...processedTxs]);\n              i++;\n              this.connection.onSignature(\n                txId,\n                (signatureResult) => {\n                  const targetTxIdx = processedTxs.findIndex((tx) => tx.txId === txId);\n                  if (targetTxIdx > -1) processedTxs[targetTxIdx].status = signatureResult.err ? \"error\" : \"success\";\n                  onTxUpdate?.([...processedTxs]);\n                  if (!signatureResult.err) checkSendTx();\n                },\n                \"processed\",\n              );\n              this.connection.getSignatureStatus(txId);\n            };\n            await checkSendTx();\n            return {\n              txIds: processedTxs.map((d) => d.txId),\n              signedTxs,\n            };\n          } else {\n            const txIds: string[] = [];\n            for (let i = 0; i < signedTxs.length; i += 1) {\n              const txId = await this.connection.sendRawTransaction(signedTxs[i].serialize(), { skipPreflight });\n              txIds.push(txId);\n            }\n            return { txIds, signedTxs };\n          }\n        }\n        throw new Error(\"please provide owner in keypair format or signAllTransactions function\");\n      },\n      extInfo: extInfo || {},\n    };\n  }\n\n  public async sizeCheckBuildV0(\n    props?: Record<string, any> & {\n      computeBudgetConfig?: ComputeBudgetConfig;\n      lookupTableCache?: CacheLTA;\n      lookupTableAddress?: string[];\n    },\n  ): Promise<MultiTxV0BuildData> {\n    const { computeBudgetConfig, lookupTableCache = {}, lookupTableAddress = [], ...extInfo } = props || {};\n    const lookupTableAddressAccount = {\n      ...(this.cluster === \"devnet\" ? {} : LOOKUP_TABLE_CACHE),\n      ...lookupTableCache,\n    };\n    const allLTA = Array.from(new Set<string>([...this.lookupTableAddress, ...lookupTableAddress]));\n    const needCacheLTA: PublicKey[] = [];\n    for (const item of allLTA) {\n      if (lookupTableAddressAccount[item] === undefined) needCacheLTA.push(new PublicKey(item));\n    }\n    const newCacheLTA = await getMultipleLookupTableInfo({ connection: this.connection, address: needCacheLTA });\n    for (const [key, value] of Object.entries(newCacheLTA)) lookupTableAddressAccount[key] = value;\n\n    const computeBudgetData: { instructions: TransactionInstruction[]; instructionTypes: string[] } =\n      computeBudgetConfig\n        ? addComputeBudget(computeBudgetConfig)\n        : {\n            instructions: [],\n            instructionTypes: [],\n          };\n\n    const blockHash = await getRecentBlockHash(this.connection);\n\n    const signerKey: { [key: string]: Signer } = this.signers.reduce(\n      (acc, cur) => ({ ...acc, [cur.publicKey.toBase58()]: cur }),\n      {},\n    );\n\n    const allTransactions: VersionedTransaction[] = [];\n    const allSigners: Signer[][] = [];\n\n    let instructionQueue: TransactionInstruction[] = [];\n    this.allInstructions.forEach((item) => {\n      const _itemIns = [...instructionQueue, item];\n      const _itemInsWithCompute = computeBudgetConfig ? [...computeBudgetData.instructions, ..._itemIns] : _itemIns;\n      if (\n        (instructionQueue.length < 12 &&\n          checkV0TxSize({ instructions: _itemInsWithCompute, payer: this.feePayer, lookupTableAddressAccount })) ||\n        checkV0TxSize({ instructions: _itemIns, payer: this.feePayer, lookupTableAddressAccount })\n      ) {\n        // current ins add to queue still not exceed tx size limit\n        instructionQueue.push(item);\n      } else {\n        if (instructionQueue.length === 0) throw Error(\"item ins too big\");\n\n        const lookupTableAddress: undefined | CacheLTA = {};\n        for (const item of [...new Set<string>(allLTA)]) {\n          if (lookupTableAddressAccount[item] !== undefined) lookupTableAddress[item] = lookupTableAddressAccount[item];\n        }\n        // if add computeBudget still not exceed tx size limit\n        if (\n          computeBudgetConfig &&\n          checkV0TxSize({\n            instructions: [...computeBudgetData.instructions, ...instructionQueue],\n            payer: this.feePayer,\n            lookupTableAddressAccount,\n            recentBlockhash: blockHash,\n          })\n        ) {\n          const messageV0 = new TransactionMessage({\n            payerKey: this.feePayer,\n            recentBlockhash: blockHash,\n\n            instructions: [...computeBudgetData.instructions, ...instructionQueue],\n          }).compileToV0Message(Object.values(lookupTableAddressAccount));\n          allTransactions.push(new VersionedTransaction(messageV0));\n        } else {\n          const messageV0 = new TransactionMessage({\n            payerKey: this.feePayer,\n            recentBlockhash: blockHash,\n            instructions: [...instructionQueue],\n          }).compileToV0Message(Object.values(lookupTableAddressAccount));\n          allTransactions.push(new VersionedTransaction(messageV0));\n        }\n        allSigners.push(\n          Array.from(\n            new Set<string>(\n              instructionQueue.map((i) => i.keys.filter((ii) => ii.isSigner).map((ii) => ii.pubkey.toString())).flat(),\n            ),\n          )\n            .map((i) => signerKey[i])\n            .filter((i) => i !== undefined),\n        );\n        instructionQueue = [item];\n      }\n    });\n\n    if (instructionQueue.length > 0) {\n      const _signerStrs = new Set<string>(\n        instructionQueue.map((i) => i.keys.filter((ii) => ii.isSigner).map((ii) => ii.pubkey.toString())).flat(),\n      );\n      const _signers = [..._signerStrs.values()].map((i) => signerKey[i]).filter((i) => i !== undefined);\n\n      if (\n        computeBudgetConfig &&\n        checkV0TxSize({\n          instructions: [...computeBudgetData.instructions, ...instructionQueue],\n          payer: this.feePayer,\n          lookupTableAddressAccount,\n          recentBlockhash: blockHash,\n        })\n      ) {\n        const messageV0 = new TransactionMessage({\n          payerKey: this.feePayer,\n          recentBlockhash: blockHash,\n          instructions: [...computeBudgetData.instructions, ...instructionQueue],\n        }).compileToV0Message(Object.values(lookupTableAddressAccount));\n        allTransactions.push(new VersionedTransaction(messageV0));\n      } else {\n        const messageV0 = new TransactionMessage({\n          payerKey: this.feePayer,\n          recentBlockhash: blockHash,\n          instructions: [...instructionQueue],\n        }).compileToV0Message(Object.values(lookupTableAddressAccount));\n        allTransactions.push(new VersionedTransaction(messageV0));\n      }\n      allSigners.push(_signers);\n    }\n\n    return {\n      builder: this,\n      transactions: allTransactions,\n      buildProps: props,\n      signers: allSigners,\n      instructionTypes: this.instructionTypes,\n      execute: async (executeParams?: MultiTxExecuteParam) => {\n        const { sequentially, onTxUpdate, recentBlockHash: propBlockHash, skipPreflight = true } = executeParams || {};\n        allTransactions.map(async (tx, idx) => {\n          if (allSigners[idx].length) tx.sign(allSigners[idx]);\n          if (propBlockHash) tx.message.recentBlockhash = propBlockHash;\n        });\n        printSimulate(allTransactions);\n        if (this.owner?.isKeyPair) {\n          const { lastValidBlockHeight, blockhash } = await this.connection.getLatestBlockhash();\n          allTransactions.forEach((tx, idx) => {\n            if (!allSigners[idx].find((s) => s.publicKey.equals(this.owner!.publicKey)))\n              tx.sign([this.owner!.signer as Signer]);\n          });\n\n          return {\n            txIds: await Promise.all(\n              allTransactions.map(async (tx) => {\n                const txId = await this.connection.sendTransaction(tx, { skipPreflight });\n                await this.connection.confirmTransaction(\n                  {\n                    blockhash,\n                    lastValidBlockHeight,\n                    signature: txId,\n                  },\n                  \"confirmed\",\n                );\n                return txId;\n              }),\n            ),\n            signedTxs: allTransactions,\n          };\n        }\n        if (this.signAllTransactions) {\n          const signedTxs = await this.signAllTransactions(allTransactions);\n          if (sequentially) {\n            let i = 0;\n            const processedTxs: TxUpdateParams[] = [];\n            const checkSendTx = async (): Promise<void> => {\n              if (!signedTxs[i]) return;\n              const txId = await this.connection.sendTransaction(signedTxs[i], { skipPreflight });\n              processedTxs.push({ txId, status: \"sent\", signedTx: signedTxs[i] });\n              onTxUpdate?.([...processedTxs]);\n              i++;\n              this.connection.onSignature(\n                txId,\n                (signatureResult) => {\n                  const targetTxIdx = processedTxs.findIndex((tx) => tx.txId === txId);\n                  if (targetTxIdx > -1) processedTxs[targetTxIdx].status = signatureResult.err ? \"error\" : \"success\";\n                  onTxUpdate?.([...processedTxs]);\n                  if (!signatureResult.err) checkSendTx();\n                },\n                \"processed\",\n              );\n              this.connection.getSignatureStatus(txId);\n            };\n            checkSendTx();\n            return {\n              txIds: [],\n              signedTxs,\n            };\n          } else {\n            const txIds: string[] = [];\n            for (let i = 0; i < signedTxs.length; i += 1) {\n              const txId = await this.connection.sendTransaction(signedTxs[i], { skipPreflight });\n              txIds.push(txId);\n            }\n            return { txIds, signedTxs };\n          }\n        }\n        throw new Error(\"please provide owner in keypair format or signAllTransactions function\");\n      },\n      extInfo: extInfo || {},\n    };\n  }\n}\n","export enum TxVersion {\n  \"V0\",\n  \"LEGACY\",\n}\n\nexport const InstructionType = {\n  CreateAccount: \"CreateAccount\",\n  InitAccount: \"InitAccount\",\n  CreateATA: \"CreateATA\",\n  CloseAccount: \"CloseAccount\",\n  TransferAmount: \"TransferAmount\",\n  InitMint: \"InitMint\",\n  MintTo: \"MintTo\",\n\n  InitMarket: \"InitMarket\", // create market main ins\n  Util1216OwnerClaim: \"Util1216OwnerClaim\", // owner claim token ins\n\n  SetComputeUnitPrice: \"SetComputeUnitPrice\",\n  SetComputeUnitLimit: \"SetComputeUnitLimit\",\n\n  // CLMM\n  ClmmCreatePool: \"ClmmCreatePool\",\n  ClmmOpenPosition: \"ClmmOpenPosition\",\n  ClmmIncreasePosition: \"ClmmIncreasePosition\",\n  ClmmDecreasePosition: \"ClmmDecreasePosition\",\n  ClmmClosePosition: \"ClmmClosePosition\",\n  ClmmSwapBaseIn: \"ClmmSwapBaseIn\",\n  ClmmSwapBaseOut: \"ClmmSwapBaseOut\",\n  ClmmInitReward: \"ClmmInitReward\",\n  ClmmSetReward: \"ClmmSetReward\",\n  ClmmCollectReward: \"ClmmCollectReward\",\n\n  AmmV4Swap: \"AmmV4Swap\",\n  AmmV4AddLiquidity: \"AmmV4AddLiquidity\",\n  AmmV4RemoveLiquidity: \"AmmV4RemoveLiquidity\",\n  AmmV4SimulatePoolInfo: \"AmmV4SimulatePoolInfo\",\n  AmmV4SwapBaseIn: \"AmmV4SwapBaseIn\",\n  AmmV4SwapBaseOut: \"AmmV4SwapBaseOut\",\n  AmmV4CreatePool: \"AmmV4CreatePool\",\n  AmmV4InitPool: \"AmmV4InitPool\",\n\n  AmmV5AddLiquidity: \"AmmV5AddLiquidity\",\n  AmmV5RemoveLiquidity: \"AmmV5RemoveLiquidity\",\n  AmmV5SimulatePoolInfo: \"AmmV5SimulatePoolInfo\",\n  AmmV5SwapBaseIn: \"AmmV5SwapBaseIn\",\n  AmmV5SwapBaseOut: \"AmmV5SwapBaseOut\",\n\n  RouteSwap: \"RouteSwap\",\n  RouteSwap1: \"RouteSwap1\",\n  RouteSwap2: \"RouteSwap2\",\n\n  FarmV3Deposit: \"FarmV3Deposit\",\n  FarmV3Withdraw: \"FarmV3Withdraw\",\n  FarmV3CreateLedger: \"FarmV3CreateLedger\",\n\n  FarmV5Deposit: \"FarmV5Deposit\",\n  FarmV5Withdraw: \"FarmV5Withdraw\",\n  FarmV5CreateLedger: \"FarmV5CreateLedger\",\n\n  FarmV6Deposit: \"FarmV6Deposit\",\n  FarmV6Withdraw: \"FarmV6Withdraw\",\n  FarmV6Create: \"FarmV6Create\",\n  FarmV6Restart: \"FarmV6Restart\",\n  FarmV6CreatorAddReward: \"FarmV6CreatorAddReward\",\n  FarmV6CreatorWithdraw: \"FarmV6CreatorWithdraw\",\n\n  CpmmCreatePool: \"CpmmCreatePool\",\n  CpmmAddLiquidity: \"CpmmAddLiquidity\",\n  CpmmWithdrawLiquidity: \"CpmmWithdrawLiquidity\",\n  CpmmSwapBaseIn: \"CpmmSwapBaseIn\",\n  CpmmSwapBaseOut: \"CpmmSwapBaseOut\",\n};\n","import {\n  Connection,\n  PublicKey,\n  ComputeBudgetProgram,\n  SimulatedTransactionResponse,\n  Transaction,\n  TransactionInstruction,\n  TransactionMessage,\n  Keypair,\n  EpochInfo,\n  VersionedTransaction,\n} from \"@solana/web3.js\";\nimport { TOKEN_PROGRAM_ID } from \"@solana/spl-token\";\n\nimport { createLogger } from \"../logger\";\nimport { InstructionType } from \"./txType\";\nimport { CacheLTA } from \"./lookupTable\";\n\nimport { ComputeBudgetConfig } from \"@/raydium/type\";\n\nconst logger = createLogger(\"Raydium_txUtil\");\n\nexport const MAX_BASE64_SIZE = 1644;\n\nexport function addComputeBudget(config: ComputeBudgetConfig): {\n  instructions: TransactionInstruction[];\n  instructionTypes: string[];\n} {\n  const ins: TransactionInstruction[] = [];\n  const insTypes: string[] = [];\n  if (config.microLamports) {\n    ins.push(ComputeBudgetProgram.setComputeUnitPrice({ microLamports: config.microLamports }));\n    insTypes.push(InstructionType.SetComputeUnitPrice);\n  }\n  if (config.units) {\n    ins.push(ComputeBudgetProgram.setComputeUnitLimit({ units: config.units }));\n    insTypes.push(InstructionType.SetComputeUnitLimit);\n  }\n\n  return {\n    instructions: ins,\n    instructionTypes: insTypes,\n  };\n}\n\nexport async function getRecentBlockHash(connection: Connection): Promise<string> {\n  try {\n    return (await connection.getLatestBlockhash?.())?.blockhash || (await connection.getRecentBlockhash()).blockhash;\n  } catch {\n    return (await connection.getRecentBlockhash()).blockhash;\n  }\n}\n\n/**\n * Forecast transaction size\n */\nexport function forecastTransactionSize(instructions: TransactionInstruction[], signers: PublicKey[]): boolean {\n  if (instructions.length < 1) logger.logWithError(`no instructions provided: ${instructions.toString()}`);\n  if (signers.length < 1) logger.logWithError(`no signers provided:, ${signers.toString()}`);\n\n  const transaction = new Transaction();\n  transaction.recentBlockhash = \"11111111111111111111111111111111\";\n  transaction.feePayer = signers[0];\n  transaction.add(...instructions);\n\n  try {\n    return Buffer.from(transaction.serialize({ verifySignatures: false })).toString(\"base64\").length < MAX_BASE64_SIZE;\n  } catch (error) {\n    return false;\n  }\n}\n\n/**\n * Simulates multiple instruction\n */\n/**\n * Simulates multiple instruction\n */\nexport async function simulateMultipleInstruction(\n  connection: Connection,\n  instructions: TransactionInstruction[],\n  keyword: string,\n  batchRequest = true,\n): Promise<string[]> {\n  const feePayer = new PublicKey(\"RaydiumSimuLateTransaction11111111111111111\");\n\n  const transactions: Transaction[] = [];\n\n  let transaction = new Transaction();\n  transaction.feePayer = feePayer;\n\n  for (const instruction of instructions) {\n    if (!forecastTransactionSize([...transaction.instructions, instruction], [feePayer])) {\n      transactions.push(transaction);\n      transaction = new Transaction();\n      transaction.feePayer = feePayer;\n    }\n    transaction.add(instruction);\n  }\n  if (transaction.instructions.length > 0) {\n    transactions.push(transaction);\n  }\n\n  let results: SimulatedTransactionResponse[] = [];\n\n  try {\n    results = await simulateTransaction(connection, transactions, batchRequest);\n    if (results.find((i) => i.err !== null)) throw Error(\"rpc simulateTransaction error\");\n  } catch (error) {\n    if (error instanceof Error) {\n      logger.logWithError(\"failed to simulate for instructions\", \"RPC_ERROR\", {\n        message: error.message,\n      });\n    }\n  }\n\n  const logs: string[] = [];\n  for (const result of results) {\n    logger.debug(\"simulate result:\", result);\n\n    if (result.logs) {\n      const filteredLog = result.logs.filter((log) => log && log.includes(keyword));\n      logger.debug(\"filteredLog:\", logs);\n      if (!filteredLog.length) logger.logWithError(\"simulate log not match keyword\", \"keyword\", keyword);\n      logs.push(...filteredLog);\n    }\n  }\n\n  return logs;\n}\n\nexport function parseSimulateLogToJson(log: string, keyword: string): any {\n  const results = log.match(/{[\"\\w:,]+}/g);\n  if (!results || results.length !== 1) {\n    return logger.logWithError(`simulate log fail to match json, keyword: ${keyword}`);\n  }\n\n  return results[0];\n}\n\nexport function parseSimulateValue(log: string, key: string): any {\n  const reg = new RegExp(`\"${key}\":(\\\\d+)`, \"g\");\n\n  const results = reg.exec(log);\n  if (!results || results.length !== 2) {\n    return logger.logWithError(`simulate log fail to match key\", key: ${key}`);\n  }\n\n  return results[1];\n}\n\nexport interface ProgramAddress {\n  publicKey: PublicKey;\n  nonce: number;\n}\nexport function findProgramAddress(\n  seeds: Array<Buffer | Uint8Array>,\n  programId: PublicKey,\n): {\n  publicKey: PublicKey;\n  nonce: number;\n} {\n  const [publicKey, nonce] = PublicKey.findProgramAddressSync(seeds, programId);\n  return { publicKey, nonce };\n}\n\nexport async function simulateTransaction(\n  connection: Connection,\n  transactions: Transaction[],\n  batchRequest?: boolean,\n): Promise<any[]> {\n  let results: any[] = [];\n  if (batchRequest) {\n    const getLatestBlockhash = await connection.getLatestBlockhash();\n\n    const encodedTransactions: string[] = [];\n    for (const transaction of transactions) {\n      transaction.recentBlockhash = getLatestBlockhash.blockhash;\n      transaction.lastValidBlockHeight = getLatestBlockhash.lastValidBlockHeight;\n\n      // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n      // @ts-ignore\n      const message = transaction._compile();\n      const signData = message.serialize();\n\n      // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n      // @ts-ignore\n      const wireTransaction = transaction._serialize(signData);\n      const encodedTransaction = wireTransaction.toString(\"base64\");\n\n      encodedTransactions.push(encodedTransaction);\n    }\n\n    const batch = encodedTransactions.map((keys) => {\n      const args = connection._buildArgs([keys], undefined, \"base64\");\n      return {\n        methodName: \"simulateTransaction\",\n        args,\n      };\n    });\n\n    const reqData: { methodName: string; args: any[] }[][] = [];\n    const itemReqIndex = 20;\n    for (let i = 0; i < Math.ceil(batch.length / itemReqIndex); i++) {\n      reqData.push(batch.slice(i * itemReqIndex, (i + 1) * itemReqIndex));\n    }\n    // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n    // @ts-ignore\n    results = await (\n      await Promise.all(\n        reqData.map(async (i) => (await (connection as any)._rpcBatchRequest(i)).map((ii) => ii.result.value)),\n      )\n    ).flat();\n  } else {\n    try {\n      results = await Promise.all(\n        transactions.map(async (transaction) => await (await connection.simulateTransaction(transaction)).value),\n      );\n    } catch (error) {\n      if (error instanceof Error) {\n        logger.logWithError(\"failed to get info for multiple accounts\", \"RPC_ERROR\", {\n          message: error.message,\n        });\n      }\n    }\n  }\n\n  return results;\n}\n\nexport function checkLegacyTxSize({\n  instructions,\n  payer,\n  signers,\n}: {\n  instructions: TransactionInstruction[];\n  payer: PublicKey;\n  signers: PublicKey[];\n}): boolean {\n  return forecastTransactionSize(instructions, [payer, ...signers]);\n}\n\nexport function checkV0TxSize({\n  instructions,\n  payer,\n  lookupTableAddressAccount,\n  recentBlockhash = Keypair.generate().publicKey.toString(),\n}: {\n  instructions: TransactionInstruction[];\n  payer: PublicKey;\n  lookupTableAddressAccount?: CacheLTA;\n  recentBlockhash?: string;\n}): boolean {\n  const transactionMessage = new TransactionMessage({\n    payerKey: payer,\n    recentBlockhash,\n    instructions,\n  });\n\n  const messageV0 = transactionMessage.compileToV0Message(Object.values(lookupTableAddressAccount ?? {}));\n  try {\n    const buildLength = Buffer.from(new VersionedTransaction(messageV0).serialize()).toString(\"base64\").length;\n    return buildLength < MAX_BASE64_SIZE;\n  } catch (error) {\n    return false;\n  }\n}\n\nlet epochInfoCache: { time: number; data?: EpochInfo } = {\n  time: 0,\n  data: undefined,\n};\n\nexport async function getEpochInfo(connection: Connection): Promise<EpochInfo> {\n  if (!epochInfoCache.data || (Date.now() - epochInfoCache.time) / 1000 > 30) {\n    const data = await connection.getEpochInfo();\n    epochInfoCache = {\n      time: Date.now(),\n      data,\n    };\n    return data;\n  } else {\n    return epochInfoCache.data;\n  }\n}\n\nexport const toBuffer = (arr: Buffer | Uint8Array | Array<number>): Buffer => {\n  if (Buffer.isBuffer(arr)) {\n    return arr;\n  } else if (arr instanceof Uint8Array) {\n    return Buffer.from(arr.buffer, arr.byteOffset, arr.byteLength);\n  } else {\n    return Buffer.from(arr);\n  }\n};\n\nexport function printSimulate(transactions: Transaction[] | VersionedTransaction[]): string[] {\n  const allBase64: string[] = [];\n  transactions.forEach((transaction) => {\n    if (transaction instanceof Transaction) {\n      if (!transaction.recentBlockhash) transaction.recentBlockhash = TOKEN_PROGRAM_ID.toBase58();\n      if (!transaction.feePayer) transaction.feePayer = Keypair.generate().publicKey;\n    }\n    let serialized = transaction.serialize({ requireAllSignatures: false, verifySignatures: false });\n    if (transaction instanceof VersionedTransaction) serialized = toBuffer(serialized);\n    const base64 = serialized.toString(\"base64\");\n    allBase64.push(base64);\n  });\n  console.log(\"simulate tx string:\", allBase64);\n\n  return allBase64;\n}\n","import { Connection, PublicKey, AddressLookupTableAccount } from \"@solana/web3.js\";\nimport { getMultipleAccountsInfo } from \"../accountInfo\";\n\nexport interface CacheLTA {\n  [key: string]: AddressLookupTableAccount;\n}\n\nexport async function getMultipleLookupTableInfo({\n  connection,\n  address,\n}: {\n  connection: Connection;\n  address: PublicKey[];\n}): Promise<CacheLTA> {\n  const dataInfos = await getMultipleAccountsInfo(\n    connection,\n    [...new Set<string>(address.map((i) => i.toString()))].map((i) => new PublicKey(i)),\n  );\n\n  const outDict: CacheLTA = {};\n  for (let i = 0; i < address.length; i++) {\n    const info = dataInfos[i];\n    const key = address[i];\n    if (!info) continue;\n    const lookupAccount = new AddressLookupTableAccount({\n      key,\n      state: AddressLookupTableAccount.deserialize(info.data),\n    });\n    outDict[key.toString()] = lookupAccount;\n    LOOKUP_TABLE_CACHE[key.toString()] = lookupAccount;\n  }\n\n  return outDict;\n}\n\nexport const LOOKUP_TABLE_CACHE: CacheLTA = {\n  \"2immgwYNHBbyVQKVGCEkgWpi53bLwWNRMB5G2nbgYV17\": new AddressLookupTableAccount({\n    key: new PublicKey(\"2immgwYNHBbyVQKVGCEkgWpi53bLwWNRMB5G2nbgYV17\"),\n    state: AddressLookupTableAccount.deserialize(\n      Buffer.from(\n        \"AQAAAP//////////d49+DAAAAAAAAQZMWvw7GUNJdaccNBVnb57OKakxL2BHLYvhRwVILRsgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAMGRm/lIRcy/+ytunLDm+e8jOW7xfcSayxDmzpAAAAABt324ddloZPZy+FGzut5rBy0he1fWzeROoz1hX7/AKkG3fbh7nWP3hhCXbzkbM3athr8TYO5DSf+vfko2KGL/AVKU1D4XciC1hSlVnJ4iilt3x6rq9CmBniISTL07vagBqfVFxksXFEhjMlMPUrxf1ja7gibof1E49vZigAAAAAGp9UXGMd0yShWY5hpHV62i164o5tLbVxzVVshAAAAAIyXJY9OJInxuz0QKRSODYMLWhOZ2v8QhASOe9jb6fhZC3BlsePRfEU4nVJ/awTDzVi4bHMaoP21SbbRvAP4KUbIScv+6Yw2LHF/6K0ZjUPibbSWXCirYPGuuVl7zT789IUPLW4CpHr4JNCatp3ELXDLKMv6JJ+37le50lbBJ2LvDQdRqCgtphMF/imcN7mY5YRx2xE1A3MQ+L4QRaYK9u4GRfZP3LsAd00a+IkCpA22UNQMKdq5BFbJuwuOLqc8zxCTDlqxBG8J0HcxtfogQHDK06ukzfaXiNDKAob1MqBHS9lJxDYCwz8gd5DtFqNSTKG5l1zxIaKpDP/sffi2is1H9aKveyXSu5StXElYRl9SD5As0DHE4N0GLnf84/siiKXVyp4Ez121kLcUui/jLLFZEz/BwZK3Ilf9B9OcsEAeDMKAy2vjGSxQODgBz0QwGA+eP4ZjIjrIAQaXENv31QfLlOdXSRCkaybRniDHF4C8YcwhcvsqrOVuTP4B2Na+9wLdtrB31uz2rtlFI5kahdsnp/d1SrASDInYCtTYtdoke4kX+hoKWcEWM4Tle8pTUkUVv4BxS6fje/EzKBE4Qu9N9LMnrw/JNO0hqMVB4rk/2ou4AB1loQ7FZoPwut2o4KZB+0p9xnbrQKw038qjpHar+PyDwvxBRcu5hpHw3dguezeWv+IwvgW5icu8EGkhGa9AkFPPJT7VMSFb8xowveU=\",\n        \"base64\",\n      ),\n    ),\n  }),\n};\n","import { AccountInfo, Commitment, Connection, PublicKey } from \"@solana/web3.js\";\nimport { getTransferFeeConfig, unpackMint } from \"@solana/spl-token\";\nimport { chunkArray } from \"./\";\nimport { createLogger } from \"./logger\";\nimport { ReturnTypeFetchMultipleMintInfos } from \"../raydium/type\";\n\ninterface MultipleAccountsJsonRpcResponse {\n  jsonrpc: string;\n  id: string;\n  error?: {\n    code: number;\n    message: string;\n  };\n  result: {\n    context: { slot: number };\n    value: { data: Array<string>; executable: boolean; lamports: number; owner: string; rentEpoch: number }[];\n  };\n}\n\nexport interface GetMultipleAccountsInfoConfig {\n  batchRequest?: boolean;\n  commitment?: Commitment;\n}\n\nconst logger = createLogger(\"Raydium_accountInfo_util\");\n\nexport async function getMultipleAccountsInfo(\n  connection: Connection,\n  publicKeys: PublicKey[],\n  config?: GetMultipleAccountsInfoConfig,\n): Promise<(AccountInfo<Buffer> | null)[]> {\n  const { batchRequest, commitment = \"confirmed\" } = {\n    batchRequest: false,\n    ...config,\n  };\n\n  const chunkedKeys = chunkArray(publicKeys, 100);\n  let results: (AccountInfo<Buffer> | null)[][] = new Array(chunkedKeys.length).fill([]);\n\n  if (batchRequest) {\n    const batch = chunkedKeys.map((keys) => {\n      const args = connection._buildArgs([keys.map((key) => key.toBase58())], commitment, \"base64\");\n      return {\n        methodName: \"getMultipleAccounts\",\n        args,\n      };\n    });\n\n    const _batch = chunkArray(batch, 10);\n\n    const unsafeResponse: MultipleAccountsJsonRpcResponse[] = await (\n      await Promise.all(_batch.map(async (i) => await (connection as any)._rpcBatchRequest(i)))\n    ).flat();\n    results = unsafeResponse.map((unsafeRes: MultipleAccountsJsonRpcResponse) => {\n      if (unsafeRes.error)\n        logger.logWithError(`failed to get info for multiple accounts, RPC_ERROR, ${unsafeRes.error.message}`);\n\n      return unsafeRes.result.value.map((accountInfo) => {\n        if (accountInfo) {\n          const { data, executable, lamports, owner, rentEpoch } = accountInfo;\n\n          if (data.length !== 2 && data[1] !== \"base64\") logger.logWithError(`info must be base64 encoded, RPC_ERROR`);\n\n          return {\n            data: Buffer.from(data[0], \"base64\"),\n            executable,\n            lamports,\n            owner: new PublicKey(owner),\n            rentEpoch,\n          };\n        }\n        return null;\n      });\n    });\n  } else {\n    try {\n      results = (await Promise.all(\n        chunkedKeys.map((keys) => connection.getMultipleAccountsInfo(keys, commitment)),\n      )) as (AccountInfo<Buffer> | null)[][];\n    } catch (error) {\n      if (error instanceof Error) {\n        logger.logWithError(`failed to get info for multiple accounts, RPC_ERROR, ${error.message}`);\n      }\n    }\n  }\n\n  return results.flat();\n}\n\nexport async function getMultipleAccountsInfoWithCustomFlags<T extends { pubkey: PublicKey }>(\n  connection: Connection,\n  publicKeysWithCustomFlag: T[],\n  config?: GetMultipleAccountsInfoConfig,\n): Promise<({ accountInfo: AccountInfo<Buffer> | null } & T)[]> {\n  const multipleAccountsInfo = await getMultipleAccountsInfo(\n    connection,\n    publicKeysWithCustomFlag.map((o) => o.pubkey),\n    config,\n  );\n\n  return publicKeysWithCustomFlag.map((o, idx) => ({ ...o, accountInfo: multipleAccountsInfo[idx] }));\n}\n\nexport enum AccountType {\n  Uninitialized,\n  Mint,\n  Account,\n}\nexport const ACCOUNT_TYPE_SIZE = 1;\n\nexport async function fetchMultipleMintInfos({\n  connection,\n  mints,\n}: {\n  connection: Connection;\n  mints: PublicKey[];\n}): Promise<ReturnTypeFetchMultipleMintInfos> {\n  if (mints.length === 0) return {};\n  const mintInfos = await getMultipleAccountsInfoWithCustomFlags(\n    connection,\n    mints.map((i) => ({ pubkey: i })),\n  );\n\n  const mintK: ReturnTypeFetchMultipleMintInfos = {};\n  for (const i of mintInfos) {\n    const t = unpackMint(i.pubkey, i.accountInfo, i.accountInfo?.owner);\n    mintK[i.pubkey.toString()] = {\n      ...t,\n      feeConfig: getTransferFeeConfig(t) ?? undefined,\n    };\n  }\n\n  return mintK;\n}\n","import { Keypair, PublicKey, Signer } from \"@solana/web3.js\";\n\ntype _Owner = Keypair | PublicKey;\n\nexport class Owner {\n  private readonly _owner: _Owner;\n\n  constructor(owner: _Owner) {\n    this._owner = owner;\n  }\n\n  get publicKey(): PublicKey {\n    if (Owner.isKeyPair(this._owner)) {\n      return this._owner.publicKey;\n    }\n\n    return this._owner;\n  }\n\n  get signer(): Signer | undefined {\n    return Owner.isKeyPair(this._owner) ? this._owner : undefined;\n  }\n\n  get isKeyPair(): boolean {\n    return Owner.isKeyPair(this._owner);\n  }\n\n  get isPublicKey(): boolean {\n    return Owner.isPublicKey(this._owner);\n  }\n\n  static isKeyPair(owner: _Owner): owner is Keypair {\n    return (owner as Keypair).secretKey !== undefined;\n  }\n\n  static isPublicKey(owner: _Owner): owner is PublicKey {\n    return !Owner.isKeyPair(owner);\n  }\n}\n","/**\n * https://youmightnotneed.com/lodash/\n */\n\nexport function chunkArray<T>(arr: T[], chunkSize = 1, cache: T[][] = []): T[][] {\n  const tmp = [...arr];\n  if (chunkSize <= 0) return cache;\n  while (tmp.length) cache.push(tmp.splice(0, chunkSize));\n  return cache;\n}\n\nexport function intersection<T>(arr: T[], ...args: T[][]): T[] {\n  return arr.filter((item) => args.every((arr) => arr.includes(item)));\n}\n\nexport function xor<T>(arr: T[], ...args: T[][]): T[] {\n  return arr.filter((item) => args.every((arr) => !arr.includes(item)));\n}\n\nexport function uniq<T>(arr: T[]): T[] {\n  return [...new Set(arr)];\n}\n","export type TimeStamp = string | number | Date;\n\nexport const isNumber = (val): boolean => typeof val === \"number\";\nexport type DateParam = string | number | Date | undefined;\n\nexport const getDate = (value?: DateParam): Date =>\n  value ? new Date(value) : new Date();\nexport const getTime = (value?: DateParam): number => getDate(value).getTime();\n\n/** A must be milliseconds */\nexport function isDateBefore(\n  timestampA: TimeStamp,\n  timestampB: TimeStamp,\n  options?: { unit?: \"ms\" | \"s\" }\n): boolean {\n  const realTimestampB = isNumber(timestampB)\n    ? (timestampB as number) * (options?.unit === \"s\" ? 1000 : 1)\n    : timestampB;\n  return new Date(timestampA).getTime() <= +realTimestampB;\n}\n\n/** A must be milliseconds */\nexport function isDateAfter(\n  timestampA: TimeStamp,\n  timestampB: TimeStamp,\n  options?: { unit?: \"ms\" | \"s\" }\n): boolean {\n  const realTimestampB = isNumber(timestampB)\n    ? (timestampB as number) * (options?.unit === \"s\" ? 1000 : 1)\n    : timestampB;\n  return new Date(timestampA).getTime() > +realTimestampB;\n}\n\nexport function offsetDateTime(\n  baseDate: DateParam,\n  offset: {\n    days?: number;\n    hours?: number;\n    minutes?: number;\n    seconds?: number;\n    milliseconds?: number;\n  }\n): Date {\n  const timestamp = getTime(baseDate);\n  const offsetedTimestamp =\n    timestamp +\n    (offset.days ? offset.days * 24 * 60 * 60 * 1000 : 0) +\n    (offset.hours ? offset.hours * 60 * 60 * 1000 : 0) +\n    (offset.minutes ? offset.minutes * 60 * 1000 : 0) +\n    (offset.seconds ? offset.seconds * 1000 : 0) +\n    (offset.milliseconds ? offset.milliseconds : 0);\n  return getDate(offsetedTimestamp);\n}\n","import { PublicKey } from \"@solana/web3.js\";\n\n// raydium\nexport const FARM_PROGRAM_ID_V3 = new PublicKey(\"EhhTKczWMGQt46ynNeRX1WfeagwwJd7ufHvCDjRxjo5Q\");\n// \"fusion\"\nexport const FARM_PROGRAM_ID_V5 = new PublicKey(\"9KEPoZmtHUrBbhWN1v1KWLMkkvwY6WLtAVUCPRtRjP4z\");\n// echosystem\nexport const FARM_PROGRAM_ID_V6 = new PublicKey(\"FarmqiPv5eAj3j1GMdMCMUGXqPUvmquZtMy86QH6rzhG\");\n\nexport const UTIL1216 = new PublicKey(\"CLaimxFqjHzgTJtAGHU47NPhg6qrc5sCnpC4tBLyABQS\");\n\nexport const OPEN_BOOK_PROGRAM = new PublicKey(\"srmqPvymJeFKQ4zGQed1GFppgkRHL9kaELCbyksJtPX\");\nexport const SERUM_PROGRAM_ID_V3 = new PublicKey(\"9xQeWvG816bUx9EPjHmaT23yvVM2ZWbrrpZb9PusVFin\");\n\nexport const AMM_V4 = new PublicKey(\"675kPX9MHTjS2zt1qfr1NYHuzeLXfQM9H24wFSUt1Mp8\");\nexport const AMM_STABLE = new PublicKey(\"5quBtoiQqxF9Jv6KYKctB59NT3gtJD2Y65kdnB1Uev3h\");\nexport const CLMM_PROGRAM_ID = new PublicKey(\"CAMMCzo5YL8w4VFF8KVHrK22GGUsp5VTaW7grrKgrWqK\");\nexport const Router = new PublicKey(\"routeUGWgWzqBWFcrCfv8tritsqukccJPu3q5GPP3xS\");\n\nexport const IDO_PROGRAM_ID_V1 = new PublicKey(\"6FJon3QE27qgPVggARueB22hLvoh22VzJpXv4rBEoSLF\");\nexport const IDO_PROGRAM_ID_V2 = new PublicKey(\"CC12se5To1CdEuw7fDS27B7Geo5jJyL7t5UK2B44NgiH\");\nexport const IDO_PROGRAM_ID_V3 = new PublicKey(\"9HzJyW1qZsEiSfMUf6L2jo3CcTKAyBmSyKdwQeYisHrC\");\nexport const IDO_PROGRAM_ID_V4 = new PublicKey(\"DropEU8AvevN3UrXWXTMuz3rqnMczQVNjq3kcSdW2SQi\");\n\nexport const CREATE_CPMM_POOL_PROGRAM = new PublicKey(\"CPMMoo8L3F4NbTegBCKVNunggL7H1ZpdTHKxQB5qKP1C\");\nexport const CREATE_CPMM_POOL_AUTH = new PublicKey(\"GpMZbSM2GgvTKHJirzeGfMFoaZ8UR2X7F4v8vHTvxFbL\");\nexport const CREATE_CPMM_POOL_FEE_ACC = new PublicKey(\"DNXgeM9EiiaAbaWvwjHj9fQQLAX5ZsfHyvmYUNRAdNC8\");\n\nexport const DEV_CREATE_CPMM_POOL_PROGRAM = new PublicKey(\"CPMDWBwJDtYax9qW7AyRuVC19Cc4L4Vcy4n2BHAbHkCW\");\nexport const DEV_CREATE_CPMM_POOL_AUTH = new PublicKey(\"7rQ1QFNosMkUCuh7Z7fPbTHvh73b68sQYdirycEzJVuw\");\nexport const DEV_CREATE_CPMM_POOL_FEE_ACC = new PublicKey(\"G11FKBRaAkHAKuLCgLM6K6NUc9rTjPAznRCjZifrTQe2\");\n\nexport const IDO_ALL_PROGRAM = {\n  IDO_PROGRAM_ID_V1,\n  IDO_PROGRAM_ID_V2,\n  IDO_PROGRAM_ID_V3,\n  IDO_PROGRAM_ID_V4,\n};\n\nexport const ALL_PROGRAM_ID = {\n  AMM_V4,\n  AMM_STABLE,\n  CLMM_PROGRAM_ID,\n\n  FARM_PROGRAM_ID_V3,\n  FARM_PROGRAM_ID_V5,\n  FARM_PROGRAM_ID_V6,\n\n  OPEN_BOOK_PROGRAM,\n  SERUM_PROGRAM_ID_V3,\n\n  UTIL1216,\n\n  Router,\n\n  CREATE_CPMM_POOL_PROGRAM,\n  CREATE_CPMM_POOL_AUTH,\n  CREATE_CPMM_POOL_FEE_ACC,\n};\n\nexport type ProgramIdConfig = Partial<typeof ALL_PROGRAM_ID>;\n","import { PublicKey } from \"@solana/web3.js\";\n\nimport { findProgramAddress } from \"./txTool/txUtils\";\nimport { TOKEN_PROGRAM_ID } from \"@solana/spl-token\";\n\nexport function getATAAddress(\n  owner: PublicKey,\n  mint: PublicKey,\n  programId?: PublicKey,\n): {\n  publicKey: PublicKey;\n  nonce: number;\n} {\n  return findProgramAddress(\n    [owner.toBuffer(), (programId ?? TOKEN_PROGRAM_ID).toBuffer(), mint.toBuffer()],\n    new PublicKey(\"ATokenGPvbdGVxr1b2hvZbsiqW5xWH25efTNsLJA8knL\"),\n  );\n}\n","import { EpochInfo } from \"@solana/web3.js\";\nimport { TransferFeeConfig, TransferFee } from \"@solana/spl-token\";\nimport BN from \"bn.js\";\n\nimport { GetTransferAmountFee } from \"../raydium/type\";\nimport { TransferFeeDataBaseType } from \"../api/type\";\n\nconst POINT = 10_000;\nexport function getTransferAmountFee(\n  amount: BN,\n  feeConfig: TransferFeeConfig | undefined,\n  epochInfo: EpochInfo,\n  addFee: boolean,\n): GetTransferAmountFee {\n  if (feeConfig === undefined) {\n    return {\n      amount,\n      fee: undefined,\n      expirationTime: undefined,\n    };\n  }\n\n  const nowFeeConfig: TransferFee =\n    epochInfo.epoch < feeConfig.newerTransferFee.epoch ? feeConfig.olderTransferFee : feeConfig.newerTransferFee;\n  const maxFee = new BN(nowFeeConfig.maximumFee.toString());\n  const expirationTime: number | undefined =\n    epochInfo.epoch < feeConfig.newerTransferFee.epoch\n      ? ((Number(feeConfig.newerTransferFee.epoch) * epochInfo.slotsInEpoch - epochInfo.absoluteSlot) * 400) / 1000\n      : undefined;\n\n  if (addFee) {\n    if (nowFeeConfig.transferFeeBasisPoints === POINT) {\n      const nowMaxFee = new BN(nowFeeConfig.maximumFee.toString());\n      return {\n        amount: amount.add(nowMaxFee),\n        fee: nowMaxFee,\n        expirationTime,\n      };\n    } else {\n      const _TAmount = BNDivCeil(amount.mul(new BN(POINT)), new BN(POINT - nowFeeConfig.transferFeeBasisPoints));\n\n      const nowMaxFee = new BN(nowFeeConfig.maximumFee.toString());\n      const TAmount = _TAmount.sub(amount).gt(nowMaxFee) ? amount.add(nowMaxFee) : _TAmount;\n\n      const _fee = BNDivCeil(TAmount.mul(new BN(nowFeeConfig.transferFeeBasisPoints)), new BN(POINT));\n      const fee = _fee.gt(maxFee) ? maxFee : _fee;\n      return {\n        amount: TAmount,\n        fee,\n        expirationTime,\n      };\n    }\n  } else {\n    const _fee = BNDivCeil(amount.mul(new BN(nowFeeConfig.transferFeeBasisPoints)), new BN(POINT));\n    const fee = _fee.gt(maxFee) ? maxFee : _fee;\n\n    return {\n      amount,\n      fee,\n      expirationTime,\n    };\n  }\n}\n\nexport function getTransferAmountFeeV2(\n  amount: BN,\n  _feeConfig: TransferFeeDataBaseType | undefined,\n  epochInfo: EpochInfo,\n  addFee: boolean,\n): GetTransferAmountFee {\n  if (_feeConfig === undefined) {\n    return {\n      amount,\n      fee: undefined,\n      expirationTime: undefined,\n    };\n  }\n  const feeConfig = {\n    ..._feeConfig,\n    olderTransferFee: {\n      epoch: BigInt(_feeConfig.olderTransferFee.epoch),\n      maximumFee: BigInt(_feeConfig.olderTransferFee.maximumFee),\n      transferFeeBasisPoints: _feeConfig.olderTransferFee.transferFeeBasisPoints,\n    },\n    newerTransferFee: {\n      epoch: BigInt(_feeConfig.newerTransferFee.epoch),\n      maximumFee: BigInt(_feeConfig.newerTransferFee.maximumFee),\n      transferFeeBasisPoints: _feeConfig.newerTransferFee.transferFeeBasisPoints,\n    },\n  };\n\n  const nowFeeConfig: TransferFee =\n    epochInfo.epoch < feeConfig.newerTransferFee.epoch ? feeConfig.olderTransferFee : feeConfig.newerTransferFee;\n  const maxFee = new BN(nowFeeConfig.maximumFee.toString());\n  const expirationTime: number | undefined =\n    epochInfo.epoch < feeConfig.newerTransferFee.epoch\n      ? ((Number(feeConfig.newerTransferFee.epoch) * epochInfo.slotsInEpoch - epochInfo.absoluteSlot) * 400) / 1000\n      : undefined;\n\n  if (addFee) {\n    if (nowFeeConfig.transferFeeBasisPoints === POINT) {\n      const nowMaxFee = new BN(nowFeeConfig.maximumFee.toString());\n      return {\n        amount: amount.add(nowMaxFee),\n        fee: nowMaxFee,\n        expirationTime,\n      };\n    } else {\n      const _TAmount = BNDivCeil(amount.mul(new BN(POINT)), new BN(POINT - nowFeeConfig.transferFeeBasisPoints));\n\n      const nowMaxFee = new BN(nowFeeConfig.maximumFee.toString());\n      const TAmount = _TAmount.sub(amount).gt(nowMaxFee) ? amount.add(nowMaxFee) : _TAmount;\n\n      const _fee = BNDivCeil(TAmount.mul(new BN(nowFeeConfig.transferFeeBasisPoints)), new BN(POINT));\n      const fee = _fee.gt(maxFee) ? maxFee : _fee;\n      return {\n        amount: TAmount,\n        fee,\n        expirationTime,\n      };\n    }\n  } else {\n    const _fee = BNDivCeil(amount.mul(new BN(nowFeeConfig.transferFeeBasisPoints)), new BN(POINT));\n    const fee = _fee.gt(maxFee) ? maxFee : _fee;\n\n    return {\n      amount,\n      fee,\n      expirationTime,\n    };\n  }\n}\n\nexport function minExpirationTime(\n  expirationTime1: number | undefined,\n  expirationTime2: number | undefined,\n): number | undefined {\n  if (expirationTime1 === undefined) return expirationTime2;\n  if (expirationTime2 === undefined) return expirationTime1;\n\n  return Math.min(expirationTime1, expirationTime2);\n}\n\nexport function BNDivCeil(bn1: BN, bn2: BN): BN {\n  const { div, mod } = bn1.divmod(bn2);\n\n  if (mod.gt(new BN(0))) {\n    return div.add(new BN(1));\n  } else {\n    return div;\n  }\n}\n","export const API_URLS = {\n  BASE_HOST: \"https://api-v3.raydium.io\",\n  OWNER_BASE_HOST: \"https://owner-v1.raydium.io\",\n  SERVICE_BASE_HOST: \"https://service.raydium.io\",\n\n  SEND_TRANSACTION: \"/send-transaction\",\n  FARM_ARP: \"/main/farm/info\",\n  FARM_ARP_LINE: \"/main/farm-apr-tv\",\n\n  CLMM_CONFIG: \"/main/clmm-config\",\n\n  VERSION: \"/main/version\",\n\n  // api v3\n  CHECK_AVAILABILITY: \"/v3/main/AvailabilityCheckAPI\",\n  RPCS: \"/main/rpcs\",\n  INFO: \"/main/info\",\n  STAKE_POOLS: \"/main/stake-pools\",\n  CHAIN_TIME: \"/main/chain-time\",\n\n  TOKEN_LIST: \"/mint/list\",\n  MINT_INFO_ID: \"/mint/ids\",\n\n  JUP_TOKEN_LIST: \"https://token.jup.ag/{type}\",\n  /**\n   * poolType: {all, concentrated, standard, allFarm, concentratedFarm, standardFarm}\n   * poolSortField: {liquidity | volume_24h / 7d / 30d | fee_24h / 7d / 30d | apr_24h / 7d / 30d}\n   * sortType: {desc/asc}\n   * page: number\n   * pageSize: number\n   */\n  POOL_LIST: \"/pools/info/list\",\n  /**\n   * ?ids=idList.join(',')\n   */\n  POOL_SEARCH_BY_ID: \"/pools/info/ids\",\n  /**\n   * mint1/mint2: search pool by mint\n   * poolSortField: {liquidity | volume_24h / 7d / 30d | fee_24h / 7d / 30d | apr_24h / 7d / 30d}\n   * poolType: {all, concentrated, standard, allFarm, concentratedFarm, standardFarm}\n   * sortType: {desc/asc}\n   * page: number\n   * pageSize: number\n   */\n  POOL_SEARCH_MINT: \"/pools/info/mint\",\n  /** ?lps=lpList.join(',') */\n  POOL_SEARCH_LP: \"/pools/info/lps\",\n  /** ?ids=idList.join(',') */\n  POOL_KEY_BY_ID: \"/pools/key/ids\",\n  /** ?id=string */\n  POOL_LIQUIDITY_LINE: \"/pools/line/liquidity\",\n  POOL_POSITION_LINE: \"/pools/line/position\",\n\n  FARM_INFO: \"/farms/info/ids\",\n  /** ?lp=string&pageSize=100&page=number */\n  FARM_LP_INFO: \"/farms/info/lp\",\n  FARM_KEYS: \"/farms/key/ids\",\n\n  OWNER_CREATED_FARM: \"/create-pool/{owner}\",\n  OWNER_IDO: \"/main/ido/{owner}\",\n  OWNER_STAKE_FARMS: \"/position/stake/{owner}\",\n  IDO_KEYS: \"/ido/key/ids\",\n  SWAP_HOST: \"https://transaction-v1.raydium.io\",\n  SWAP_COMPUTE: \"/compute/\",\n  SWAP_TX: \"/transaction/\",\n  MINT_PRICE: \"/mint/price\",\n  MIGRATE_CONFIG: \"/main/migrate-lp\",\n  PRIORITY_FEE: \"/main/auto-fee\",\n};\n\nexport const DEV_API_URLS = {\n  ...API_URLS,\n};\n\nexport type API_URL_CONFIG = Partial<typeof API_URLS>;\n","export const SESSION_KEY = \"ray_tab_hash\";\nexport const STORAGE_KEY = \"ray_req_hash\";\n\nexport const getSessionKey = (): string => {\n  if (typeof window === undefined) return \"\";\n  let key = sessionStorage.getItem(SESSION_KEY);\n\n  // new a session key\n  if (!key) {\n    key = `ray-${Date.now()}`;\n    sessionStorage.setItem(SESSION_KEY, key);\n  }\n  return key;\n};\n\nexport interface ResHistory {\n  status: number;\n  url: string;\n  params?: any;\n  data: any;\n  logCount?: number;\n  time: number;\n  session: string;\n  removeLastLog?: boolean;\n}\n\nexport const updateReqHistory = async ({\n  logCount = 1000,\n  removeLastLog,\n  ...resData\n}: Omit<ResHistory, \"time\" | \"session\">): Promise<void> => {\n  if (typeof window === undefined) return new Promise((resolve) => resolve());\n  const data: ResHistory[] = JSON.parse(localStorage.getItem(STORAGE_KEY) || \"[]\").slice(0, logCount - 1);\n\n  // means retry last save error\n  if (removeLastLog) data.pop();\n\n  // if data > 1kb\n  if (new Blob([JSON.stringify(resData.data)]).size > 1024)\n    resData.data = JSON.stringify(resData.data).substring(0, 200) + \"...\";\n  data.unshift({ ...resData, time: Date.now(), session: getSessionKey() });\n\n  try {\n    localStorage.setItem(STORAGE_KEY, JSON.stringify(data));\n  } catch {\n    // if retry failed, empty request data\n    if (removeLastLog) {\n      let success = false;\n      const resStr = JSON.stringify(resData.data).substring(0, 100);\n      data[0].data = resStr + (resStr.length > 100 ? \"...\" : \"\");\n      while (!success) {\n        data.pop();\n        const resStr = JSON.stringify(resData.data).substring(0, 100);\n        data[0].data = resStr + (resStr.length > 100 ? \"...\" : \"\");\n        try {\n          localStorage.setItem(STORAGE_KEY, JSON.stringify(data));\n          success = true;\n        } catch {\n          success = false;\n        }\n      }\n      return new Promise((resolve) => resolve());\n    }\n    return updateReqHistory({\n      ...resData,\n      logCount,\n      removeLastLog: true,\n    });\n  }\n};\n","export const EMPTY_OWNER =\n  \"please provide owner in load() initialization or you can set by calling raydium.setOwner(owner)\";\n\nexport const EMPTY_CONNECTION =\n  \"please provide connection in load() initialization or set it by raydium.setConnection(connection)\";\n","import {\n  createAssociatedTokenAccountInstruction,\n  TOKEN_PROGRAM_ID,\n  AccountLayout,\n  TOKEN_2022_PROGRAM_ID,\n} from \"@solana/spl-token\";\nimport {\n  Commitment,\n  PublicKey,\n  SystemProgram,\n  TransactionInstruction,\n} from \"@solana/web3.js\";\nimport {\n  getATAAddress,\n  BigNumberish,\n  InstructionType,\n  WSOLMint,\n} from \"@/common\";\nimport { AddInstructionParam } from \"@/common/txTool/txTool\";\n\nimport ModuleBase, { ModuleBaseProps } from \"../moduleBase\";\nimport {\n  closeAccountInstruction,\n  createWSolAccountInstructions,\n  makeTransferInstruction,\n  initTokenAccountInstruction,\n} from \"./instruction\";\nimport {\n  HandleTokenAccountParams,\n  TokenAccount,\n  TokenAccountRaw,\n  GetOrCreateTokenAccountParams,\n} from \"./types\";\nimport { parseTokenAccountResp, generatePubKey } from \"./util\";\n\nexport interface TokenAccountDataProp {\n  tokenAccounts?: TokenAccount[];\n  tokenAccountRawInfos?: TokenAccountRaw[];\n}\nexport default class Account extends ModuleBase {\n  private _tokenAccounts: TokenAccount[] = [];\n  private _tokenAccountRawInfos: TokenAccountRaw[] = [];\n  private _accountChangeListenerId?: number;\n  private _accountListener: ((data: TokenAccountDataProp) => void)[] = [];\n  private _clientOwnedToken = false;\n\n  constructor(params: TokenAccountDataProp & ModuleBaseProps) {\n    super(params);\n    const { tokenAccounts, tokenAccountRawInfos } = params;\n    this._tokenAccounts = tokenAccounts || [];\n    this._tokenAccountRawInfos = tokenAccountRawInfos || [];\n    this._clientOwnedToken = !!(tokenAccounts || tokenAccountRawInfos);\n  }\n\n  get tokenAccounts(): TokenAccount[] {\n    return this._tokenAccounts;\n  }\n  get tokenAccountRawInfos(): TokenAccountRaw[] {\n    return this._tokenAccountRawInfos;\n  }\n\n  public updateTokenAccount({\n    tokenAccounts,\n    tokenAccountRawInfos,\n  }: TokenAccountDataProp): Account {\n    if (tokenAccounts) this._tokenAccounts = tokenAccounts;\n    if (tokenAccountRawInfos) this._tokenAccountRawInfos = tokenAccountRawInfos;\n    this._accountChangeListenerId &&\n      this.scope.connection.removeAccountChangeListener(\n        this._accountChangeListenerId\n      );\n    this._accountChangeListenerId = undefined;\n    this._clientOwnedToken = true;\n    return this;\n  }\n\n  public addAccountChangeListener(\n    cbk: (data: TokenAccountDataProp) => void\n  ): Account {\n    this._accountListener.push(cbk);\n    return this;\n  }\n\n  public removeAccountChangeListener(\n    cbk: (data: TokenAccountDataProp) => void\n  ): Account {\n    this._accountListener = this._accountListener.filter(\n      (listener) => listener !== cbk\n    );\n    return this;\n  }\n\n  public getAssociatedTokenAccount(\n    mint: PublicKey,\n    programId?: PublicKey\n  ): PublicKey {\n    return getATAAddress(this.scope.ownerPubKey, mint, programId).publicKey;\n  }\n\n  public async fetchWalletTokenAccounts(config?: {\n    forceUpdate?: boolean;\n    commitment?: Commitment;\n  }): Promise<{\n    tokenAccounts: TokenAccount[];\n    tokenAccountRawInfos: TokenAccountRaw[];\n  }> {\n    if (\n      this._clientOwnedToken ||\n      (!config?.forceUpdate && this._tokenAccounts.length)\n    ) {\n      return {\n        tokenAccounts: this._tokenAccounts,\n        tokenAccountRawInfos: this._tokenAccountRawInfos,\n      };\n    }\n    this.scope.checkOwner();\n\n    const defaultConfig = {};\n    const customConfig = { ...defaultConfig, ...config };\n\n    const [solAccountResp, ownerTokenAccountResp, ownerToken2022AccountResp] =\n      await Promise.all([\n        this.scope.connection.getAccountInfo(\n          this.scope.ownerPubKey,\n          customConfig.commitment\n        ),\n        this.scope.connection.getTokenAccountsByOwner(\n          this.scope.ownerPubKey,\n          { programId: TOKEN_PROGRAM_ID },\n          customConfig.commitment\n        ),\n        this.scope.connection.getTokenAccountsByOwner(\n          this.scope.ownerPubKey,\n          { programId: TOKEN_2022_PROGRAM_ID },\n          customConfig.commitment\n        ),\n      ]);\n\n    const { tokenAccounts, tokenAccountRawInfos } = parseTokenAccountResp({\n      owner: this.scope.ownerPubKey,\n      solAccountResp,\n      tokenAccountResp: {\n        context: ownerTokenAccountResp.context,\n        value: [\n          ...ownerTokenAccountResp.value,\n          ...ownerToken2022AccountResp.value,\n        ],\n      },\n    });\n\n    this._tokenAccounts = tokenAccounts;\n    this._tokenAccountRawInfos = tokenAccountRawInfos;\n\n    this._accountChangeListenerId &&\n      this.scope.connection.removeAccountChangeListener(\n        this._accountChangeListenerId\n      );\n    this._accountChangeListenerId = this.scope.connection.onAccountChange(\n      this.scope.ownerPubKey,\n      () => this.fetchWalletTokenAccounts({ forceUpdate: true }),\n      \"confirmed\"\n    );\n\n    return { tokenAccounts, tokenAccountRawInfos };\n  }\n\n  // user token account needed, old _selectTokenAccount\n  public async getCreatedTokenAccount({\n    mint,\n    programId = TOKEN_PROGRAM_ID,\n    associatedOnly = true,\n  }: {\n    mint: PublicKey;\n    programId?: PublicKey;\n    associatedOnly?: boolean;\n  }): Promise<PublicKey | undefined> {\n    await this.fetchWalletTokenAccounts();\n    const tokenAccounts = this._tokenAccounts\n      .filter(({ mint: accountMint }) => accountMint?.equals(mint))\n      // sort by balance\n      .sort((a, b) => (a.amount.lt(b.amount) ? 1 : -1));\n\n    const ata = this.getAssociatedTokenAccount(mint, programId);\n    for (const tokenAccount of tokenAccounts) {\n      const { publicKey } = tokenAccount;\n      if (publicKey) {\n        if (!associatedOnly || (associatedOnly && ata.equals(publicKey)))\n          return publicKey;\n      }\n    }\n  }\n\n  // old _selectOrCreateTokenAccount\n  public async getOrCreateTokenAccount(\n    params: GetOrCreateTokenAccountParams\n  ): Promise<{\n    account?: PublicKey;\n    instructionParams?: AddInstructionParam;\n  }> {\n    await this.fetchWalletTokenAccounts();\n    const {\n      mint,\n      createInfo,\n      associatedOnly,\n      owner,\n      notUseTokenAccount = false,\n      skipCloseAccount = false,\n      checkCreateATAOwner = false,\n    } = params;\n    const tokenProgram = new PublicKey(params.tokenProgram || TOKEN_PROGRAM_ID);\n    const ata = this.getAssociatedTokenAccount(\n      mint,\n      new PublicKey(tokenProgram)\n    );\n    const accounts = (notUseTokenAccount ? [] : this.tokenAccountRawInfos)\n      .filter(\n        (i) =>\n          i.accountInfo.mint.equals(mint) &&\n          (!associatedOnly || i.pubkey.equals(ata))\n      )\n      .sort((a, b) => (a.accountInfo.amount.lt(b.accountInfo.amount) ? 1 : -1));\n    // find token or don't need create\n    if (createInfo === undefined || accounts.length > 0) {\n      return accounts.length > 0 ? { account: accounts[0].pubkey } : {};\n    }\n\n    const newTxInstructions: AddInstructionParam = {\n      instructions: [],\n      endInstructions: [],\n      signers: [],\n      instructionTypes: [],\n      endInstructionTypes: [],\n    };\n\n    if (associatedOnly) {\n      const _createATAIns = createAssociatedTokenAccountInstruction(\n        owner,\n        ata,\n        owner,\n        mint,\n        tokenProgram\n      );\n      if (checkCreateATAOwner) {\n        const ataInfo = await this.scope.connection.getAccountInfo(ata);\n        if (ataInfo === null) {\n          newTxInstructions.instructions?.push(_createATAIns);\n          newTxInstructions.instructionTypes!.push(InstructionType.CreateATA);\n        } else if (\n          ataInfo.owner.equals(tokenProgram) &&\n          AccountLayout.decode(ataInfo.data).mint.equals(mint) &&\n          AccountLayout.decode(ataInfo.data).owner.equals(owner)\n        ) {\n          /* empty */\n        } else {\n          throw Error(\n            `create ata check error -> mint: ${mint.toString()}, ata: ${ata.toString()}`\n          );\n        }\n      } else {\n        newTxInstructions.instructions!.push(_createATAIns);\n        newTxInstructions.instructionTypes!.push(InstructionType.CreateATA);\n      }\n      if (mint.equals(WSOLMint) && createInfo.amount) {\n        const txInstruction = await createWSolAccountInstructions({\n          connection: this.scope.connection,\n          owner: this.scope.ownerPubKey,\n          payer: createInfo.payer || this.scope.ownerPubKey,\n          amount: createInfo.amount ?? 0,\n          skipCloseAccount,\n        });\n        newTxInstructions.instructions!.push(\n          ...(txInstruction.instructions || [])\n        );\n        newTxInstructions.endInstructions!.push(\n          ...(txInstruction.endInstructions || [])\n        );\n        newTxInstructions.instructionTypes!.push(\n          ...(txInstruction.instructionTypes || [])\n        );\n        newTxInstructions.endInstructionTypes!.push(\n          ...(txInstruction.endInstructionTypes || [])\n        );\n\n        if (createInfo.amount) {\n          newTxInstructions.instructions!.push(\n            makeTransferInstruction({\n              source: txInstruction.addresses.newAccount,\n              destination: ata,\n              owner: this.scope.ownerPubKey,\n              amount: createInfo.amount,\n              tokenProgram: TOKEN_PROGRAM_ID,\n            })\n          );\n          newTxInstructions.instructionTypes!.push(\n            InstructionType.TransferAmount\n          );\n        }\n      }\n\n      if (!skipCloseAccount) {\n        newTxInstructions.endInstructions!.push(\n          closeAccountInstruction({\n            owner,\n            payer: createInfo.payer || owner,\n            tokenAccount: ata,\n            programId: tokenProgram,\n          })\n        );\n        newTxInstructions.endInstructionTypes!.push(\n          InstructionType.CloseAccount\n        );\n      }\n\n      return { account: ata, instructionParams: newTxInstructions };\n    } else {\n      if (mint.equals(WSOLMint)) {\n        const txInstruction = await createWSolAccountInstructions({\n          connection: this.scope.connection,\n          owner: this.scope.ownerPubKey,\n          payer: createInfo.payer || this.scope.ownerPubKey,\n          amount: createInfo.amount ?? 0,\n          skipCloseAccount,\n        });\n        newTxInstructions.instructions!.push(\n          ...(txInstruction.instructions || [])\n        );\n        newTxInstructions.endInstructions!.push(\n          ...(txInstruction.endInstructions || [])\n        );\n        newTxInstructions.signers!.push(...(txInstruction.signers || []));\n        newTxInstructions.instructionTypes!.push(\n          ...(txInstruction.instructionTypes || [])\n        );\n        newTxInstructions.endInstructionTypes!.push(\n          ...(txInstruction.endInstructionTypes || [])\n        );\n\n        return {\n          account: txInstruction.addresses.newAccount,\n          instructionParams: newTxInstructions,\n        };\n      } else {\n        const newTokenAccount = generatePubKey({\n          fromPublicKey: owner,\n          programId: tokenProgram,\n        });\n        const balanceNeeded =\n          await this.scope.connection.getMinimumBalanceForRentExemption(\n            AccountLayout.span\n          );\n\n        const createAccountIns = SystemProgram.createAccountWithSeed({\n          fromPubkey: owner,\n          basePubkey: owner,\n          seed: newTokenAccount.seed,\n          newAccountPubkey: newTokenAccount.publicKey,\n          lamports: balanceNeeded,\n          space: AccountLayout.span,\n          programId: tokenProgram,\n        });\n\n        newTxInstructions.instructions!.push(\n          createAccountIns,\n          initTokenAccountInstruction({\n            mint,\n            tokenAccount: newTokenAccount.publicKey,\n            owner: this.scope.ownerPubKey,\n            programId: tokenProgram,\n          })\n        );\n        newTxInstructions.instructionTypes!.push(InstructionType.CreateAccount);\n        newTxInstructions.instructionTypes!.push(InstructionType.InitAccount);\n        if (!skipCloseAccount) {\n          newTxInstructions.endInstructions!.push(\n            closeAccountInstruction({\n              owner,\n              payer: createInfo.payer || owner,\n              tokenAccount: newTokenAccount.publicKey,\n              programId: tokenProgram,\n            })\n          );\n          newTxInstructions.endInstructionTypes!.push(\n            InstructionType.CloseAccount\n          );\n        }\n        return {\n          account: newTokenAccount.publicKey,\n          instructionParams: newTxInstructions,\n        };\n      }\n    }\n  }\n\n  public async checkOrCreateAta({\n    mint,\n    programId = TOKEN_PROGRAM_ID,\n    autoUnwrapWSOLToSOL,\n  }: {\n    mint: PublicKey;\n    programId?: PublicKey;\n    autoUnwrapWSOLToSOL?: boolean;\n  }): Promise<{ pubKey: PublicKey; newInstructions: AddInstructionParam }> {\n    await this.fetchWalletTokenAccounts();\n    let tokenAccountAddress = this.scope.account.tokenAccounts.find(\n      ({ mint: accountTokenMint }) =>\n        accountTokenMint?.toBase58() === mint.toBase58()\n    )?.publicKey;\n\n    const owner = this.scope.ownerPubKey;\n    const newTxInstructions: AddInstructionParam = {};\n\n    if (!tokenAccountAddress) {\n      const ataAddress = this.getAssociatedTokenAccount(mint, programId);\n      const instruction = await createAssociatedTokenAccountInstruction(\n        owner,\n        ataAddress,\n        owner,\n        mint,\n        programId\n      );\n      newTxInstructions.instructions = [instruction];\n      newTxInstructions.instructionTypes = [InstructionType.CreateATA];\n      tokenAccountAddress = ataAddress;\n    }\n    if (autoUnwrapWSOLToSOL && WSOLMint.toBase58() === mint.toBase58()) {\n      newTxInstructions.endInstructions = [\n        closeAccountInstruction({\n          owner,\n          payer: owner,\n          tokenAccount: tokenAccountAddress,\n          programId,\n        }),\n      ];\n      newTxInstructions.endInstructionTypes = [InstructionType.CloseAccount];\n    }\n\n    return {\n      pubKey: tokenAccountAddress,\n      newInstructions: newTxInstructions,\n    };\n  }\n\n  // old _handleTokenAccount\n  public async handleTokenAccount(\n    params: HandleTokenAccountParams\n  ): Promise<AddInstructionParam & { tokenAccount: PublicKey }> {\n    const {\n      side,\n      amount,\n      mint,\n      programId = TOKEN_PROGRAM_ID,\n      tokenAccount,\n      payer = this.scope.ownerPubKey,\n      bypassAssociatedCheck,\n      skipCloseAccount,\n      checkCreateATAOwner,\n    } = params;\n\n    const ata = this.getAssociatedTokenAccount(mint, programId);\n\n    if (new PublicKey(WSOLMint).equals(mint)) {\n      const txInstruction = await createWSolAccountInstructions({\n        connection: this.scope.connection,\n        owner: this.scope.ownerPubKey,\n        payer,\n        amount,\n        skipCloseAccount,\n      });\n      return {\n        tokenAccount: txInstruction.addresses.newAccount,\n        ...txInstruction,\n      };\n    } else if (\n      !tokenAccount ||\n      (side === \"out\" && !ata.equals(tokenAccount) && !bypassAssociatedCheck)\n    ) {\n      const instructions: TransactionInstruction[] = [];\n      const _createATAIns = createAssociatedTokenAccountInstruction(\n        this.scope.ownerPubKey,\n        ata,\n        this.scope.ownerPubKey,\n        mint,\n        programId\n      );\n\n      if (checkCreateATAOwner) {\n        const ataInfo = await this.scope.connection.getAccountInfo(ata);\n        if (ataInfo === null) {\n          instructions.push(_createATAIns);\n        } else if (\n          ataInfo.owner.equals(TOKEN_PROGRAM_ID) &&\n          AccountLayout.decode(ataInfo.data).mint.equals(mint) &&\n          AccountLayout.decode(ataInfo.data).owner.equals(\n            this.scope.ownerPubKey\n          )\n        ) {\n          /* empty */\n        } else {\n          throw Error(`create ata check error -> mint: ${mint.toString()}, ata: ${ata.toString()}\n          ataInfo.owner: ${ataInfo.owner.toString()}, TOKEN_PROGRAM_ID: ${TOKEN_PROGRAM_ID.toString()},\n          ataInfo.data.mint: ${AccountLayout.decode(\n            ataInfo.data\n          ).mint.toString()}, mint: ${mint.toString()},\n          ataInfo.data.owner: ${AccountLayout.decode(\n            ataInfo.data\n          ).owner.toString()}, owner: ${this.scope.ownerPubKey.toString()}`);\n        }\n      } else {\n        instructions.push(_createATAIns);\n      }\n\n      return {\n        tokenAccount: ata,\n        instructions,\n        instructionTypes: [InstructionType.CreateATA],\n      };\n    }\n\n    return { tokenAccount };\n  }\n\n  public async processTokenAccount(props: {\n    mint: PublicKey;\n    programId?: PublicKey;\n    amount?: BigNumberish;\n    useSOLBalance?: boolean;\n    handleTokenAccount?: boolean;\n  }): Promise<Promise<AddInstructionParam & { tokenAccount?: PublicKey }>> {\n    const {\n      mint,\n      programId = TOKEN_PROGRAM_ID,\n      amount,\n      useSOLBalance,\n      handleTokenAccount,\n    } = props;\n    let tokenAccount: PublicKey | undefined;\n    const txBuilder = this.createTxBuilder();\n\n    if (mint.equals(new PublicKey(WSOLMint)) && useSOLBalance) {\n      // mintA\n      const { tokenAccount: _tokenAccount, ...instructions } =\n        await this.handleTokenAccount({\n          side: \"in\",\n          amount: amount || 0,\n          mint,\n          bypassAssociatedCheck: true,\n          programId,\n        });\n      tokenAccount = _tokenAccount;\n      txBuilder.addInstruction(instructions);\n    } else {\n      tokenAccount = await this.getCreatedTokenAccount({\n        mint,\n        associatedOnly: false,\n        programId,\n      });\n      if (!tokenAccount && handleTokenAccount) {\n        const { tokenAccount: _tokenAccount, ...instructions } =\n          await this.scope.account.handleTokenAccount({\n            side: \"in\",\n            amount: 0,\n            mint,\n            bypassAssociatedCheck: true,\n            programId,\n          });\n        tokenAccount = _tokenAccount;\n        txBuilder.addInstruction(instructions);\n      }\n    }\n\n    return { tokenAccount, ...txBuilder.AllTxData };\n  }\n}\n","import { PublicKey } from \"@solana/web3.js\";\n\nimport { createLogger, Logger } from \"../common/logger\";\nimport { TxBuilder } from \"../common/txTool/txTool\";\n\nimport { Raydium } from \"./\";\n\nexport interface ModuleBaseProps {\n  scope: Raydium;\n  moduleName: string;\n}\n\nconst joinMsg = (...args: (string | number | Record<string, any>)[]): string =>\n  args\n    .map((arg) => {\n      try {\n        return typeof arg === \"object\" ? JSON.stringify(arg) : arg;\n      } catch {\n        return arg;\n      }\n    })\n    .join(\", \");\nexport default class ModuleBase {\n  public scope: Raydium;\n  private disabled = false;\n  protected logger: Logger;\n\n  constructor({ scope, moduleName }: ModuleBaseProps) {\n    this.scope = scope;\n    this.logger = createLogger(moduleName);\n  }\n\n  protected createTxBuilder(feePayer?: PublicKey): TxBuilder {\n    this.scope.checkOwner();\n    return new TxBuilder({\n      connection: this.scope.connection,\n      feePayer: feePayer || this.scope.ownerPubKey,\n      cluster: this.scope.cluster,\n      owner: this.scope.owner,\n      signAllTransactions: this.scope.signAllTransactions,\n    });\n  }\n\n  public logDebug(...args: (string | number | Record<string, any>)[]): void {\n    this.logger.debug(joinMsg(args));\n  }\n\n  public logInfo(...args: (string | number | Record<string, any>)[]): void {\n    this.logger.info(joinMsg(args));\n  }\n\n  public logAndCreateError(...args: (string | number | Record<string, any>)[]): void {\n    const message = joinMsg(args);\n    // this.logger.error(message);\n    throw new Error(message);\n  }\n\n  public checkDisabled(): void {\n    if (this.disabled || !this.scope) this.logAndCreateError(\"module not working\");\n  }\n}\n","import {\n  createInitializeAccountInstruction,\n  createCloseAccountInstruction,\n  createTransferInstruction,\n  TOKEN_PROGRAM_ID,\n} from \"@solana/spl-token\";\nimport { Commitment, Connection, PublicKey, Signer, SystemProgram, TransactionInstruction } from \"@solana/web3.js\";\nimport BN from \"bn.js\";\nimport { generatePubKey } from \"./util\";\nimport { BigNumberish, parseBigNumberish } from \"@/common\";\nimport { AddInstructionParam } from \"@/common/txTool/txTool\";\nimport { InstructionType } from \"@/common/txTool/txType\";\nimport { TOKEN_WSOL } from \"../token/constant\";\n\nimport { splAccountLayout } from \"./layout\";\n\nexport function initTokenAccountInstruction(params: {\n  mint: PublicKey;\n  tokenAccount: PublicKey;\n  owner: PublicKey;\n  programId?: PublicKey;\n}): TransactionInstruction {\n  const { mint, tokenAccount, owner, programId = TOKEN_PROGRAM_ID } = params;\n  return createInitializeAccountInstruction(tokenAccount, mint, owner, programId);\n}\n\nexport function closeAccountInstruction(params: {\n  tokenAccount: PublicKey;\n  payer: PublicKey;\n  multiSigners?: Signer[];\n  owner: PublicKey;\n  programId?: PublicKey;\n}): TransactionInstruction {\n  const { tokenAccount, payer, multiSigners = [], owner, programId = TOKEN_PROGRAM_ID } = params;\n  return createCloseAccountInstruction(tokenAccount, payer, owner, multiSigners, programId);\n}\n\ninterface CreateWSolTokenAccount {\n  connection: Connection;\n  payer: PublicKey;\n  owner: PublicKey;\n  amount: BigNumberish;\n  commitment?: Commitment;\n  skipCloseAccount?: boolean;\n}\n/**\n * WrappedNative account = wsol account\n */\nexport async function createWSolAccountInstructions(params: CreateWSolTokenAccount): Promise<\n  AddInstructionParam & {\n    addresses: { newAccount: PublicKey };\n  }\n> {\n  const { connection, amount, commitment, payer, owner, skipCloseAccount } = params;\n\n  const balanceNeeded = await connection.getMinimumBalanceForRentExemption(splAccountLayout.span, commitment);\n  const lamports = parseBigNumberish(amount).add(new BN(balanceNeeded));\n  const newAccount = generatePubKey({ fromPublicKey: payer, programId: TOKEN_PROGRAM_ID });\n\n  return {\n    addresses: { newAccount: newAccount.publicKey },\n    signers: [],\n    instructions: [\n      SystemProgram.createAccountWithSeed({\n        fromPubkey: payer,\n        basePubkey: payer,\n        seed: newAccount.seed,\n        newAccountPubkey: newAccount.publicKey,\n        lamports: lamports.toNumber(),\n        space: splAccountLayout.span,\n        programId: TOKEN_PROGRAM_ID,\n      }),\n      initTokenAccountInstruction({\n        mint: new PublicKey(TOKEN_WSOL.address),\n        tokenAccount: newAccount.publicKey,\n        owner,\n        programId: TOKEN_PROGRAM_ID,\n      }),\n    ],\n    instructionTypes: [InstructionType.CreateAccount, InstructionType.InitAccount],\n    endInstructionTypes: skipCloseAccount ? [] : [InstructionType.CloseAccount],\n    endInstructions: skipCloseAccount\n      ? []\n      : [\n          closeAccountInstruction({\n            tokenAccount: newAccount.publicKey,\n            payer,\n            owner,\n          }),\n        ],\n  };\n}\n\nexport function makeTransferInstruction({\n  source,\n  destination,\n  owner,\n  amount,\n  multiSigners = [],\n  tokenProgram = TOKEN_PROGRAM_ID,\n}: {\n  source: PublicKey;\n  destination: PublicKey;\n  owner: PublicKey;\n  amount: BigNumberish;\n  multiSigners?: Signer[];\n  tokenProgram?: PublicKey;\n}): TransactionInstruction {\n  return createTransferInstruction(source, destination, owner, BigInt(String(amount)), multiSigners, tokenProgram);\n}\n","import { AccountInfo, PublicKey, RpcResponseAndContext, Keypair, GetProgramAccountsResponse } from \"@solana/web3.js\";\nimport { TOKEN_PROGRAM_ID } from \"@solana/spl-token\";\nimport BN from \"bn.js\";\nimport { createLogger, getATAAddress } from \"@/common\";\n\nimport { splAccountLayout } from \"./layout\";\nimport { TokenAccount, TokenAccountRaw } from \"./types\";\nimport { sha256 } from \"@noble/hashes/sha256\";\n\nconst logger = createLogger(\"Raydium_Util\");\n\nexport interface ParseTokenAccount {\n  owner: PublicKey;\n  solAccountResp?: AccountInfo<Buffer> | null;\n  tokenAccountResp: RpcResponseAndContext<GetProgramAccountsResponse>;\n}\n\nexport function parseTokenAccountResp({ owner, solAccountResp, tokenAccountResp }: ParseTokenAccount): {\n  tokenAccounts: TokenAccount[];\n  tokenAccountRawInfos: TokenAccountRaw[];\n} {\n  const tokenAccounts: TokenAccount[] = [];\n  const tokenAccountRawInfos: TokenAccountRaw[] = [];\n\n  for (const { pubkey, account } of tokenAccountResp.value) {\n    const accountInfo = splAccountLayout.decode(account.data);\n    const { mint, amount } = accountInfo;\n    tokenAccounts.push({\n      publicKey: pubkey,\n      mint,\n      amount,\n      isAssociated: getATAAddress(owner, mint, account.owner).publicKey.equals(pubkey),\n      isNative: false,\n      programId: account.owner,\n    });\n    // todo programId should get from api\n    tokenAccountRawInfos.push({ pubkey, accountInfo, programId: account.owner });\n  }\n\n  if (solAccountResp) {\n    tokenAccounts.push({\n      mint: PublicKey.default,\n      amount: new BN(solAccountResp.lamports),\n      isNative: true,\n      programId: solAccountResp.owner,\n    });\n  }\n\n  return {\n    tokenAccounts,\n    tokenAccountRawInfos,\n  };\n}\n\nexport function generatePubKey({\n  fromPublicKey,\n  programId = TOKEN_PROGRAM_ID,\n}: {\n  fromPublicKey: PublicKey;\n  programId: PublicKey;\n}): { publicKey: PublicKey; seed: string } {\n  const seed = Keypair.generate().publicKey.toBase58().slice(0, 32);\n  const publicKey = createWithSeed(fromPublicKey, seed, programId);\n  return { publicKey, seed };\n}\n\nfunction createWithSeed(fromPublicKey: PublicKey, seed: string, programId: PublicKey): PublicKey {\n  const buffer = Buffer.concat([fromPublicKey.toBuffer(), Buffer.from(seed), programId.toBuffer()]);\n  const publicKeyBytes = sha256(buffer);\n  return new PublicKey(publicKeyBytes);\n}\n","import { PublicKey } from \"@solana/web3.js\";\nimport BN, { isBN } from \"bn.js\";\n\nimport {\n  bits,\n  blob,\n  Blob,\n  Layout,\n  offset as _offset,\n  seq as _seq,\n  Structure as _Structure,\n  u32 as _u32,\n  u8 as _u8,\n  UInt,\n  union as _union,\n  Union as _Union,\n} from \"./buffer-layout\";\n\nexport * from \"./buffer-layout\";\nexport { blob };\n\nexport class BNLayout<P extends string = \"\"> extends Layout<BN, P> {\n  blob: Layout<Buffer>;\n  signed: boolean;\n\n  constructor(span: number, signed: boolean, property?: P) {\n    //@ts-expect-error type wrong for super()'s type different from extends, but it desn't matter\n    super(span, property);\n    this.blob = blob(span);\n    this.signed = signed;\n  }\n\n  /** @override */\n  decode(b: Buffer, offset = 0): BN {\n    const num = new BN(this.blob.decode(b, offset), 10, \"le\");\n    if (this.signed) {\n      return num.fromTwos(this.span * 8).clone();\n    }\n    return num;\n  }\n\n  /** @override */\n  encode(src: BN, b: Buffer, offset = 0): number {\n    if (typeof src === \"number\") src = new BN(src); // src will pass a number accidently in union\n    if (this.signed) {\n      src = src.toTwos(this.span * 8);\n    }\n    return this.blob.encode(src.toArrayLike(Buffer, \"le\", this.span), b, offset);\n  }\n}\n\nexport class WideBits<P extends string = \"\"> extends Layout<Record<string, boolean>, P> {\n  _lower: any;\n  _upper: any;\n  // TODO: unknown\n  constructor(property?: P) {\n    //@ts-expect-error type wrong for super()'s type different from extends , but it desn't matter\n    super(8, property);\n    this._lower = bits(_u32(), false);\n    this._upper = bits(_u32(), false);\n  }\n\n  addBoolean(property: string): void {\n    if (this._lower.fields.length < 32) {\n      this._lower.addBoolean(property);\n    } else {\n      this._upper.addBoolean(property);\n    }\n  }\n\n  decode(b: Buffer, offset = 0): Record<string, boolean> {\n    const lowerDecoded = this._lower.decode(b, offset);\n    const upperDecoded = this._upper.decode(b, offset + this._lower.span);\n    return { ...lowerDecoded, ...upperDecoded };\n  }\n\n  encode(src: any /* TEMP */, b: Buffer, offset = 0): any {\n    return this._lower.encode(src, b, offset) + this._upper.encode(src, b, offset + this._lower.span);\n  }\n}\n\nexport function u8<P extends string = \"\">(property?: P): UInt<number, P> {\n  return new UInt(1, property);\n}\n\nexport function u32<P extends string = \"\">(property?: P): UInt<number, P> {\n  return new UInt(4, property);\n}\n\nexport function u64<P extends string = \"\">(property?: P): BNLayout<P> {\n  return new BNLayout(8, false, property);\n}\n\nexport function u128<P extends string = \"\">(property?: P): BNLayout<P> {\n  return new BNLayout(16, false, property);\n}\n\nexport function i8<P extends string = \"\">(property?: P): BNLayout<P> {\n  return new BNLayout(1, true, property);\n}\n\nexport function i64<P extends string = \"\">(property?: P): BNLayout<P> {\n  return new BNLayout(8, true, property);\n}\n\nexport function i128<P extends string = \"\">(property?: P): BNLayout<P> {\n  return new BNLayout(16, true, property);\n}\n\nexport class WrappedLayout<T, U, P extends string = \"\"> extends Layout<U, P> {\n  layout: Layout<T>;\n  decoder: (data: T) => U;\n  encoder: (src: U) => T;\n\n  constructor(layout: Layout<T>, decoder: (data: T) => U, encoder: (src: U) => T, property?: P) {\n    //@ts-expect-error type wrong for super()'s type different from extends , but it desn't matter\n    super(layout.span, property);\n    this.layout = layout;\n    this.decoder = decoder;\n    this.encoder = encoder;\n  }\n\n  decode(b: Buffer, offset?: number): U {\n    return this.decoder(this.layout.decode(b, offset));\n  }\n\n  encode(src: U, b: Buffer, offset?: number): number {\n    return this.layout.encode(this.encoder(src), b, offset);\n  }\n\n  getSpan(b: Buffer, offset?: number): number {\n    return this.layout.getSpan(b, offset);\n  }\n}\n\nexport function publicKey<P extends string = \"\">(property?: P): Layout<PublicKey, P> {\n  return new WrappedLayout(\n    blob(32),\n    (b: Buffer) => new PublicKey(b),\n    (key: PublicKey) => key.toBuffer(),\n    property,\n  );\n}\n\nexport class OptionLayout<T, P> extends Layout<T | null, P> {\n  layout: Layout<T>;\n  discriminator: Layout<number>;\n\n  constructor(layout: Layout<T>, property?: P) {\n    //@ts-expect-error type wrong for super()'s type different from extends , but it desn't matter\n    super(-1, property);\n    this.layout = layout;\n    this.discriminator = _u8();\n  }\n\n  encode(src: T | null, b: Buffer, offset = 0): number {\n    if (src === null || src === undefined) {\n      return this.discriminator.encode(0, b, offset);\n    }\n    this.discriminator.encode(1, b, offset);\n    return this.layout.encode(src, b, offset + 1) + 1;\n  }\n\n  decode(b: Buffer, offset = 0): T | null {\n    const discriminator = this.discriminator.decode(b, offset);\n    if (discriminator === 0) {\n      return null;\n    } else if (discriminator === 1) {\n      return this.layout.decode(b, offset + 1);\n    }\n    throw new Error(\"Invalid option \" + this.property);\n  }\n\n  getSpan(b: Buffer, offset = 0): number {\n    const discriminator = this.discriminator.decode(b, offset);\n    if (discriminator === 0) {\n      return 1;\n    } else if (discriminator === 1) {\n      return this.layout.getSpan(b, offset + 1) + 1;\n    }\n    throw new Error(\"Invalid option \" + this.property);\n  }\n}\n\nexport function option<T, P extends string = \"\">(layout: Layout<T>, property?: P): Layout<T | null, P> {\n  return new OptionLayout<T, P>(layout, property);\n}\n\nexport function bool<P extends string = \"\">(property?: P): Layout<boolean, P> {\n  return new WrappedLayout(_u8(), decodeBool, encodeBool, property);\n}\n\nexport function decodeBool(value: number): boolean {\n  if (value === 0) {\n    return false;\n  } else if (value === 1) {\n    return true;\n  }\n  throw new Error(\"Invalid bool: \" + value);\n}\n\nexport function encodeBool(value: boolean): number {\n  return value ? 1 : 0;\n}\n\nexport function vec<T, P extends string = \"\">(elementLayout: Layout<T>, property?: P): Layout<T[], P> {\n  const length = _u32(\"length\");\n  const layout: Layout<{ values: T[] }> = struct([\n    length,\n    seq(elementLayout, _offset(length, -length.span), \"values\"),\n  ]) as any; // Something I don't know\n  return new WrappedLayout(\n    layout,\n    ({ values }) => values,\n    (values) => ({ values }),\n    property,\n  );\n}\n\nexport function tagged<T, P extends string = \"\">(tag: BN, layout: Layout<T>, property?: P): Layout<T, P> {\n  const wrappedLayout: Layout<{ tag: BN; data: T }> = struct([u64(\"tag\"), layout.replicate(\"data\")]) as any; // Something I don't know\n\n  function decodeTag({ tag: receivedTag, data }: { tag: BN; data: T }): T {\n    if (!receivedTag.eq(tag)) {\n      throw new Error(\"Invalid tag, expected: \" + tag.toString(\"hex\") + \", got: \" + receivedTag.toString(\"hex\"));\n    }\n    return data;\n  }\n\n  return new WrappedLayout(wrappedLayout, decodeTag, (data) => ({ tag, data }), property);\n}\n\nexport function vecU8<P extends string = \"\">(property?: P): Layout<Buffer, P> {\n  const length = _u32(\"length\");\n  const layout: Layout<{ data: Buffer }> = struct([length, blob(_offset(length, -length.span), \"data\")]) as any; // Something I don't know\n  return new WrappedLayout(\n    layout,\n    ({ data }) => data,\n    (data) => ({ data }),\n    property,\n  );\n}\n\nexport function str<P extends string = \"\">(property?: P): Layout<string, P> {\n  return new WrappedLayout(\n    vecU8(),\n    (data) => data.toString(\"utf-8\"),\n    (s) => Buffer.from(s, \"utf-8\"),\n    property,\n  );\n}\n\nexport interface EnumLayout<T, P extends string = \"\"> extends Layout<T, P> {\n  registry: Record<string, Layout<any>>;\n}\n\nexport function rustEnum<T, P extends string = \"\">(variants: Layout<any>[], property?: P): EnumLayout<T, P> {\n  const unionLayout = _union(_u8(), property);\n  variants.forEach((variant, index) => unionLayout.addVariant(index, variant, variant.property));\n  return unionLayout as any; // ?why use UnionLayout? This must be a fault\n}\n\nexport function array<T, P extends string = \"\">(\n  elementLayout: Layout<T>,\n  length: number,\n  property?: P,\n): Layout<T[], P> {\n  const layout = struct([seq(elementLayout, length, \"values\")]) as any as Layout<{ values: T[] }>; // Something I don't know\n  return new WrappedLayout(\n    layout,\n    ({ values }) => values,\n    (values) => ({ values }),\n    property,\n  );\n}\n\nexport class Structure<T, P, D> extends _Structure<T, P, D> {\n  /** @override */\n  decode(b: Buffer, offset?: number): D {\n    return super.decode(b, offset);\n  }\n}\n\nexport function struct<T, P extends string = \"\">(\n  fields: T,\n  property?: P,\n  decodePrefixes?: boolean,\n): T extends Layout<infer Value, infer Property>[]\n  ? Structure<\n      Value,\n      P,\n      {\n        [K in Exclude<Extract<Property, string>, \"\">]: Extract<T[number], Layout<any, K>> extends Layout<infer V, any>\n          ? V\n          : any;\n      }\n    >\n  : any {\n  //@ts-expect-error this type is not quite satisfied the define, but, never no need to worry about.\n  return new Structure(fields, property, decodePrefixes);\n}\n\nexport type GetLayoutSchemaFromStructure<T extends Structure<any, any, any>> = T extends Structure<any, any, infer S>\n  ? S\n  : any;\nexport type GetStructureFromLayoutSchema<S> = Structure<any, any, S>;\n\nexport class Union<Schema> extends _Union<Schema> {\n  encodeInstruction(instruction: any): Buffer {\n    const instructionMaxSpan = Math.max(...Object.values(this.registry).map((r) => r.span));\n    const b = Buffer.alloc(instructionMaxSpan);\n    return b.slice(0, this.encode(instruction, b));\n  }\n\n  decodeInstruction(instruction: any): Partial<Schema> {\n    return this.decode(instruction);\n  }\n}\nexport function union<UnionSchema extends { [key: string]: any } = any>(\n  discr: any,\n  defaultLayout?: any,\n  property?: string,\n): Union<UnionSchema> {\n  return new Union(discr, defaultLayout, property);\n}\n\nclass Zeros extends Blob {\n  decode(b: Buffer, offset: number): Buffer {\n    const slice = super.decode(b, offset);\n    if (!slice.every((v) => v === 0)) {\n      throw new Error(\"nonzero padding bytes\");\n    }\n    return slice;\n  }\n}\n\nexport function zeros(length: number): Zeros {\n  return new Zeros(length);\n}\n\nexport function seq<T, P extends string = \"\", AnotherP extends string = \"\">(\n  elementLayout: Layout<T, P>,\n  count: number | BN | Layout<BN | number, P>,\n  property?: AnotherP,\n): Layout<T[], AnotherP> {\n  let parsedCount: number;\n  const superCount =\n    typeof count === \"number\"\n      ? count\n      : isBN(count)\n      ? count.toNumber()\n      : new Proxy(count as unknown as Layout<number> /* pretend to be Layout<number> */, {\n          get(target, property): any {\n            if (!parsedCount) {\n              // get count in targetLayout. note that count may be BN\n              const countProperty = Reflect.get(target, \"count\");\n\n              // let targetLayout's  property:count be a number\n              parsedCount = isBN(countProperty) ? countProperty.toNumber() : countProperty;\n\n              // record the count\n              Reflect.set(target, \"count\", parsedCount);\n            }\n            return Reflect.get(target, property);\n          },\n          set(target, property, value): any {\n            if (property === \"count\") {\n              parsedCount = value;\n            }\n            return Reflect.set(target, property, value);\n          },\n        });\n\n  // @ts-expect-error force type\n  return _seq(elementLayout, superCount, property);\n}\n","import {\n  bits as _bits,\n  BitStructure as _BitStructure,\n  blob as _blob,\n  Blob as _Blob,\n  cstr as _cstr,\n  f32 as _f32,\n  f32be as _f32be,\n  f64 as _f64,\n  f64be as _f64be,\n  greedy as _greedy,\n  Layout as _Layout,\n  ns64 as _ns64,\n  ns64be as _ns64be,\n  nu64 as _nu64,\n  nu64be as _nu64be,\n  offset as _offset,\n  s16 as _s16,\n  s16be as _s16be,\n  s24 as _s24,\n  s24be as _s24be,\n  s32 as _s32,\n  s32be as _s32be,\n  s40 as _s40,\n  s40be as _s40be,\n  s48 as _s48,\n  s48be as _s48be,\n  s8 as _s8,\n  seq as _seq,\n  struct as _struct,\n  Structure as _Structure,\n  u16 as _u16,\n  u16be as _u16be,\n  u24 as _u24,\n  u24be as _u24be,\n  u32 as _u32,\n  u32be as _u32be,\n  u40 as _u40,\n  u40be as _u40be,\n  u48 as _u48,\n  u48be as _u48be,\n  u8 as _u8,\n  UInt as _UInt,\n  union as _union,\n  Union as _Union,\n  unionLayoutDiscriminator as _unionLayoutDiscriminator,\n  utf8 as _utf8,\n} from \"@solana/buffer-layout\";\n\n//#region ------------------- Layout -------------------\nexport interface Layout<T = any, P = \"\"> {\n  span: number;\n  property?: P;\n  decode(b: Buffer, offset?: number): T;\n  encode(src: T, b: Buffer, offset?: number): number;\n  getSpan(b: Buffer, offset?: number): number;\n  replicate<AP extends string>(name: AP): Layout<T, AP>;\n}\nexport interface LayoutConstructor {\n  new <T, P>(): Layout<T, P>; // for class extends syntex\n  new <T, P>(span?: T, property?: P): Layout<T, P>;\n  readonly prototype: Layout;\n}\nexport const Layout = _Layout as unknown as LayoutConstructor;\n//#endregion\n\n//#region ------------------- Structure -------------------\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\nexport interface Structure<T = any, P = \"\", DecodeSchema extends { [key: string]: any } = any>\n  extends Layout<DecodeSchema, P> {\n  span: number;\n  decode(b: Buffer, offset?: number): DecodeSchema;\n  layoutFor<AP extends string>(property: AP): Layout<DecodeSchema[AP]>;\n  offsetOf<AP extends string>(property: AP): number;\n}\ninterface StructureConstructor {\n  new <T = any, P = \"\", DecodeSchema extends { [key: string]: any } = any>(): Structure<T, P, DecodeSchema>;\n  new <T = any, P = \"\", DecodeSchema extends { [key: string]: any } = any>(\n    fields: T,\n    property?: P,\n    decodePrefixes?: boolean,\n  ): Structure<T, P, DecodeSchema>;\n}\nexport const Structure = _Structure as unknown as StructureConstructor;\n//#endregion\n\n//#region ------------------- Union -------------------\nexport interface Union<UnionSchema extends { [key: string]: any } = any> extends Layout {\n  registry: object;\n  decode(b: Buffer, offset?: number): Partial<UnionSchema>;\n  addVariant(\n    variant: number,\n    layout: Structure<any, any, Partial<UnionSchema>> | Layout<any, keyof UnionSchema>,\n    property?: string,\n  ): any /* TEMP: code in Layout.js 1809 */;\n}\ninterface UnionConstructor {\n  new <UnionSchema extends { [key: string]: any } = any>(): Union<UnionSchema>;\n  new <UnionSchema extends { [key: string]: any } = any>(\n    discr: Layout<any, any>,\n    defaultLayout: Layout<any, any>,\n    property?: string,\n  ): Union<UnionSchema>;\n}\nexport const Union = _Union as unknown as UnionConstructor;\n//#endregion\n\n//#region ------------------- BitStructure -------------------\nexport type BitStructure<T = unknown /* TEMP */, P = \"\"> = Layout<T, P>;\ninterface BitStructureConstructor {\n  new (...params: any[]): BitStructure;\n}\nexport const BitStructure = _BitStructure as BitStructureConstructor;\n//#endregion\n\n//#region ------------------- UInt -------------------\nexport type UInt<T = any, P = \"\"> = Layout<T, P>;\ninterface UIntConstructor {\n  new <T, P>(span?: T, property?: P): UInt<T, P>;\n}\nexport const UInt = _UInt as UIntConstructor;\n//#endregion\n\n//#region ------------------- Blob -------------------\nexport type Blob<P extends string = \"\"> = Layout<Buffer, P>;\ninterface BlobConstructor {\n  new (...params: ConstructorParameters<LayoutConstructor>): Blob;\n}\nexport const Blob = _Blob as unknown as BlobConstructor;\n//#endregion\n\nexport const greedy = _greedy as <P extends string = \"\">(elementSpan?: number, property?: P) => Layout<number, P>;\nexport const u8 = _u8 as <P extends string = \"\">(property?: P) => Layout<number, P>;\nexport const u16 = _u16 as <P extends string = \"\">(property?: P) => Layout<number, P>;\nexport const u24 = _u24 as <P extends string = \"\">(property?: P) => Layout<number, P>;\nexport const u32 = _u32 as <P extends string = \"\">(property?: P) => Layout<number, P>;\nexport const u40 = _u40 as <P extends string = \"\">(property?: P) => Layout<number, P>;\nexport const u48 = _u48 as <P extends string = \"\">(property?: P) => Layout<number, P>;\nexport const nu64 = _nu64 as <P extends string = \"\">(property?: P) => Layout<number, P>;\nexport const u16be = _u16be as <P extends string = \"\">(property?: P) => Layout<number, P>;\nexport const u24be = _u24be as <P extends string = \"\">(property?: P) => Layout<number, P>;\nexport const u32be = _u32be as <P extends string = \"\">(property?: P) => Layout<number, P>;\nexport const u40be = _u40be as <P extends string = \"\">(property?: P) => Layout<number, P>;\nexport const u48be = _u48be as <P extends string = \"\">(property?: P) => Layout<number, P>;\nexport const nu64be = _nu64be as <P extends string = \"\">(property?: P) => Layout<number, P>;\nexport const s8 = _s8 as <P extends string = \"\">(property?: P) => Layout<number, P>;\nexport const s16 = _s16 as <P extends string = \"\">(property?: P) => Layout<number, P>;\nexport const s24 = _s24 as <P extends string = \"\">(property?: P) => Layout<number, P>;\nexport const s32 = _s32 as <P extends string = \"\">(property?: P) => Layout<number, P>;\nexport const s40 = _s40 as <P extends string = \"\">(property?: P) => Layout<number, P>;\nexport const s48 = _s48 as <P extends string = \"\">(property?: P) => Layout<number, P>;\nexport const ns64 = _ns64 as <P extends string = \"\">(property?: P) => Layout<number, P>;\nexport const s16be = _s16be as <P extends string = \"\">(property?: P) => Layout<number, P>;\nexport const s24be = _s24be as <P extends string = \"\">(property?: P) => Layout<number, P>;\nexport const s32be = _s32be as <P extends string = \"\">(property?: P) => Layout<number, P>;\nexport const s40be = _s40be as <P extends string = \"\">(property?: P) => Layout<number, P>;\nexport const s48be = _s48be as <P extends string = \"\">(property?: P) => Layout<number, P>;\nexport const ns64be = _ns64be as <P extends string = \"\">(property?: P) => Layout<number, P>;\nexport const f32 = _f32 as <P extends string = \"\">(property?: P) => Layout<number, P>;\nexport const f32be = _f32be as <P extends string = \"\">(property?: P) => Layout<number, P>;\nexport const f64 = _f64 as <P extends string = \"\">(property?: P) => Layout<number, P>;\nexport const f64be = _f64be as <P extends string = \"\">(property?: P) => Layout<number, P>;\n\nexport const struct = _struct as <T, P extends string = \"\">(\n  fields: T,\n  property?: P,\n  decodePrefixes?: boolean,\n) => T extends Layout<infer Value, infer Property>[]\n  ? Structure<\n      Value,\n      P,\n      {\n        [K in Exclude<Extract<Property, string>, \"\">]: Extract<T[number], Layout<any, K>> extends Layout<infer V, any>\n          ? V\n          : any;\n      }\n    >\n  : any;\n\nexport const seq = _seq as unknown as <T, P>(\n  elementLayout: Layout<T, string>,\n  count: number | Layout<number, string>,\n  property?: P,\n) => Layout<T[]>;\nexport const union = _union as <UnionSchema extends { [key: string]: any } = any>(\n  discr: Layout<any, any>,\n  defaultLayout?: any,\n  property?: string,\n) => Union<UnionSchema>;\nexport const unionLayoutDiscriminator = _unionLayoutDiscriminator as <P extends string = \"\">(\n  layout: Layout<any, P>,\n  property?: P,\n) => any;\nexport const blob = _blob as unknown as <P extends string = \"\">(\n  length: number | Layout<number, P>,\n  property?: P,\n) => Blob<P>;\nexport const cstr = _cstr as <P extends string = \"\">(property?: P) => Layout<string, P>;\nexport const utf8 = _utf8 as <P extends string = \"\">(maxSpan: number, property?: P) => Layout<string, P>;\nexport const bits = _bits as unknown as <T, P extends string = \"\">(\n  word: Layout<T>,\n  msb?: boolean,\n  property?: P,\n) => BitStructure<T, P>; // TODO: not quite sure\nexport const offset = _offset as unknown as <T, P extends string = \"\">(\n  layout: Layout<T, P>,\n  offset?: number,\n  property?: P,\n) => Layout<T, P>;\n\nexport type GetStructureSchema<T extends Structure> = T extends Structure<any, any, infer S> ? S : unknown;\n","import { publicKey, struct, u32, u64, u8 } from \"@/marshmallow\";\n\nexport const splAccountLayout = struct([\n  publicKey(\"mint\"),\n  publicKey(\"owner\"),\n  u64(\"amount\"),\n  u32(\"delegateOption\"),\n  publicKey(\"delegate\"),\n  u8(\"state\"),\n  u32(\"isNativeOption\"),\n  u64(\"isNative\"),\n  u64(\"delegatedAmount\"),\n  u32(\"closeAuthorityOption\"),\n  publicKey(\"closeAuthority\"),\n]);\n",null,null,null,null,"import { createAssociatedTokenAccountInstruction } from \"@solana/spl-token\";\nimport { PublicKey, SystemProgram } from \"@solana/web3.js\";\n\nimport { FormatFarmKeyOut } from \"@/api/type\";\nimport { AddInstructionParam, jsonInfo2PoolKeys } from \"@/common\";\nimport { parseBigNumberish, BN_ZERO } from \"@/common/bignumber\";\nimport { SOLMint, WSOLMint } from \"@/common/pubKey\";\nimport { MakeTxData, MakeMultiTxData } from \"@/common/txTool/txTool\";\nimport { InstructionType, TxVersion } from \"@/common/txTool/txType\";\nimport { getATAAddress } from \"@/common/pda\";\nimport { FARM_PROGRAM_ID_V6 } from \"@/common/programId\";\nimport { generatePubKey } from \"../account/util\";\n\nimport { createWSolAccountInstructions } from \"../account/instruction\";\nimport ModuleBase from \"../moduleBase\";\nimport { TOKEN_WSOL } from \"../token/constant\";\nimport { ComputeBudgetConfig } from \"@/raydium/type\";\nimport {\n  FARM_LOCK_MINT,\n  FARM_LOCK_VAULT,\n  isValidFarmVersion,\n  poolTypeV6,\n  validateFarmRewards,\n  FARM_PROGRAM_TO_VERSION,\n} from \"./config\";\nimport {\n  createAssociatedLedgerAccountInstruction,\n  makeCreateFarmInstruction,\n  makeCreatorWithdrawFarmRewardInstruction,\n  makeRestartRewardInstruction,\n  makeAddNewRewardInstruction,\n  makeWithdrawInstructionV3,\n  makeWithdrawInstructionV5,\n  makeWithdrawInstructionV6,\n  makeDepositInstructionV3,\n  makeDepositInstructionV5,\n  makeDepositInstructionV6,\n} from \"./instruction\";\nimport { farmStateV6Layout, FarmLedger } from \"./layout\";\nimport {\n  CreateFarm,\n  FarmDWParam,\n  FarmRewardInfo,\n  FarmRewardInfoConfig,\n  RewardInfoKey,\n  UpdateFarmReward,\n  UpdateFarmRewards,\n  CreateFarmExtInfo,\n} from \"./type\";\nimport {\n  calFarmRewardAmount,\n  farmRewardInfoToConfig,\n  getAssociatedAuthority,\n  getAssociatedLedgerAccount,\n  getAssociatedLedgerPoolAccount,\n  getFarmLedgerLayout,\n} from \"./util\";\nimport { FormatFarmInfoOut, FormatFarmKeyOutV6 } from \"@/api/type\";\nimport Decimal from \"decimal.js\";\n\nexport default class Farm extends ModuleBase {\n  // token account needed\n  private async _getUserRewardInfo({ payer, rewardInfo }: { payer: PublicKey; rewardInfo: FarmRewardInfo }): Promise<{\n    rewardPubKey?: PublicKey;\n    newInstruction?: AddInstructionParam;\n  }> {\n    if (rewardInfo.mint.equals(SOLMint)) {\n      const txInstructions = await createWSolAccountInstructions({\n        connection: this.scope.connection,\n        owner: this.scope.ownerPubKey,\n        payer,\n        amount: calFarmRewardAmount({\n          ...rewardInfo,\n          openTime: rewardInfo.openTime.toString(),\n          endTime: rewardInfo.endTime.toString(),\n        }),\n      });\n      return {\n        rewardPubKey: txInstructions.addresses.newAccount,\n        newInstruction: txInstructions,\n      };\n    }\n\n    return {\n      rewardPubKey: await this.scope.account.getCreatedTokenAccount({\n        mint: rewardInfo.mint,\n        associatedOnly: false,\n      })!,\n    };\n  }\n\n  // token account needed\n  public async create<T extends TxVersion>({\n    poolInfo: propPoolInfo,\n    rewardInfos,\n    payer,\n    programId = FARM_PROGRAM_ID_V6,\n    txVersion,\n  }: CreateFarm<T>): Promise<MakeTxData<T, CreateFarmExtInfo>> {\n    this.checkDisabled();\n    this.scope.checkOwner();\n\n    const lpMint = new PublicKey(propPoolInfo.lpMint.address);\n    const poolInfo = {\n      lpMint,\n      lockInfo: { lockMint: FARM_LOCK_MINT, lockVault: FARM_LOCK_VAULT },\n      version: 6,\n      rewardInfos,\n      programId,\n    };\n\n    const txBuilder = this.createTxBuilder();\n    const payerPubKey = payer ?? this.scope.ownerPubKey;\n    const farmKeyPair = generatePubKey({ fromPublicKey: payerPubKey, programId: poolInfo.programId });\n    const lamports = await this.scope.connection.getMinimumBalanceForRentExemption(farmStateV6Layout.span);\n\n    txBuilder.addInstruction({\n      instructions: [\n        SystemProgram.createAccountWithSeed({\n          fromPubkey: payerPubKey,\n          basePubkey: payerPubKey,\n          seed: farmKeyPair.seed,\n          newAccountPubkey: farmKeyPair.publicKey,\n          lamports,\n          space: farmStateV6Layout.span,\n          programId: poolInfo.programId,\n        }),\n      ],\n    });\n\n    const { publicKey: authority, nonce } = getAssociatedAuthority({\n      programId: new PublicKey(poolInfo.programId),\n      poolId: farmKeyPair.publicKey,\n    });\n\n    const lpVault = getAssociatedLedgerPoolAccount({\n      programId: poolInfo.programId,\n      poolId: farmKeyPair.publicKey,\n      mint: poolInfo.lpMint,\n      type: \"lpVault\",\n    });\n\n    const rewardInfoConfig: FarmRewardInfoConfig[] = [];\n    const rewardInfoKey: RewardInfoKey[] = [];\n\n    for (const rewardInfo of poolInfo.rewardInfos) {\n      if (rewardInfo.openTime >= rewardInfo.endTime)\n        this.logAndCreateError(\"start time error\", \"rewardInfo.rewardOpenTime\", rewardInfo.openTime.toString());\n      if (isNaN(poolTypeV6[rewardInfo.rewardType])) this.logAndCreateError(\"rewardType error\", rewardInfo.rewardType);\n      if (Number(rewardInfo.perSecond) <= 0) this.logAndCreateError(\"rewardPerSecond error\", rewardInfo.perSecond);\n\n      rewardInfoConfig.push(farmRewardInfoToConfig(rewardInfo));\n\n      const { rewardPubKey, newInstruction } = await this._getUserRewardInfo({\n        rewardInfo,\n        payer: payerPubKey,\n      });\n      if (newInstruction) txBuilder.addInstruction(newInstruction);\n\n      if (!rewardPubKey) this.logAndCreateError(\"cannot found target token accounts\", this.scope.account.tokenAccounts);\n\n      const rewardMint = rewardInfo.mint.equals(SOLMint) ? new PublicKey(TOKEN_WSOL.address) : rewardInfo.mint;\n      rewardInfoKey.push({\n        rewardMint,\n        rewardVault: getAssociatedLedgerPoolAccount({\n          programId: poolInfo.programId,\n          poolId: farmKeyPair.publicKey,\n          mint: rewardMint,\n          type: \"rewardVault\",\n        }),\n        userRewardToken: rewardPubKey!,\n      });\n    }\n\n    const lockUserAccount = await this.scope.account.getCreatedTokenAccount({\n      mint: poolInfo.lockInfo.lockMint,\n    });\n\n    if (!lockUserAccount)\n      this.logAndCreateError(\"cannot found lock vault\", \"tokenAccounts\", this.scope.account.tokenAccounts);\n\n    const { instruction, instructionType } = makeCreateFarmInstruction({\n      farmId: farmKeyPair.publicKey,\n      owner: this.scope.ownerPubKey,\n      farmAuthority: authority,\n      lpVault,\n      lpMint: poolInfo.lpMint,\n      lockVault: poolInfo.lockInfo.lockVault,\n      lockMint: poolInfo.lockInfo.lockMint,\n      lockUserAccount,\n      programId: poolInfo.programId,\n      rewardInfo: rewardInfoKey,\n      rewardInfoConfig,\n      nonce,\n    });\n\n    return txBuilder\n      .addInstruction({\n        instructions: [instruction],\n        instructionTypes: [instructionType],\n      })\n      .versionBuild<CreateFarmExtInfo>({\n        txVersion,\n        extInfo: {\n          farmId: farmKeyPair.publicKey,\n          farmAuthority: authority,\n          lpVault,\n          lockUserAccount: lockUserAccount!,\n          nonce,\n        },\n      }) as Promise<MakeTxData<T, CreateFarmExtInfo>>;\n  }\n\n  public async restartReward<T extends TxVersion>({\n    farmInfo,\n    payer,\n    newRewardInfo,\n    txVersion,\n  }: UpdateFarmReward): Promise<MakeTxData<T>> {\n    const version = FARM_PROGRAM_TO_VERSION[farmInfo.programId];\n    if (version !== 6) this.logAndCreateError(\"invalid farm version \", version);\n\n    const farmInfoKeys = jsonInfo2PoolKeys((await this.scope.api.fetchFarmKeysById({ ids: farmInfo.id }))[0]);\n\n    const farmKeys = {\n      id: farmInfoKeys.id,\n      rewardInfos: farmInfo.rewardInfos,\n      lpVault: farmInfoKeys.lpVault,\n      programId: farmInfoKeys.programId,\n    };\n\n    if (newRewardInfo.openTime >= newRewardInfo.endTime)\n      this.logAndCreateError(\"start time error\", \"newRewardInfo\", newRewardInfo);\n\n    const payerPubKey = payer || this.scope.ownerPubKey;\n\n    const rewardMint = newRewardInfo.mint.equals(SOLMint) ? new PublicKey(TOKEN_WSOL.address) : newRewardInfo.mint;\n    const rewardInfoIndex = farmKeys.rewardInfos.findIndex((item) =>\n      new PublicKey(item.mint.address).equals(rewardMint),\n    );\n    const rewardInfo = farmInfoKeys.rewardInfos[rewardInfoIndex];\n\n    if (!rewardInfo) this.logAndCreateError(\"configuration does not exist\", \"rewardMint\", rewardMint);\n\n    const rewardVault = rewardInfo!.vault ?? SOLMint;\n    const txBuilder = this.createTxBuilder();\n\n    const { rewardPubKey: userRewardTokenPub, newInstruction } = await this._getUserRewardInfo({\n      rewardInfo: newRewardInfo,\n      payer: payerPubKey,\n    });\n    if (newInstruction) txBuilder.addInstruction(newInstruction);\n\n    if (!userRewardTokenPub)\n      this.logAndCreateError(\"cannot found target token accounts\", this.scope.account.tokenAccounts);\n\n    return txBuilder\n      .addInstruction({\n        instructions: [\n          makeRestartRewardInstruction({\n            payer: this.scope.ownerPubKey,\n            rewardVault,\n            userRewardTokenPub: userRewardTokenPub!,\n            farmKeys,\n            rewardInfo: newRewardInfo,\n          }),\n        ],\n        instructionTypes: [InstructionType.FarmV6Restart],\n      })\n      .versionBuild({ txVersion }) as Promise<MakeTxData<T>>;\n  }\n\n  public async restartRewards<T extends TxVersion>({\n    farmInfo,\n    payer,\n    newRewardInfos,\n    txVersion,\n  }: UpdateFarmRewards<T>): Promise<MakeTxData<T>> {\n    const version = FARM_PROGRAM_TO_VERSION[farmInfo.programId];\n    if (version !== 6) this.logAndCreateError(\"invalid farm version \", version);\n\n    const farmInfoKeys = jsonInfo2PoolKeys((await this.scope.api.fetchFarmKeysById({ ids: farmInfo.id }))[0]);\n\n    const farmKeys = {\n      id: farmInfoKeys.id,\n      rewardInfos: farmInfo.rewardInfos,\n      lpVault: farmInfoKeys.lpVault,\n      programId: farmInfoKeys.programId,\n    };\n\n    newRewardInfos.forEach((reward) => {\n      if (reward.openTime >= reward.endTime) this.logAndCreateError(\"start time error\", \"newRewardInfo\", reward);\n    });\n\n    const payerPubKey = payer || this.scope.ownerPubKey;\n    const txBuilder = this.createTxBuilder();\n\n    for (const itemReward of newRewardInfos) {\n      const rewardMint = itemReward.mint.equals(SOLMint) ? new PublicKey(TOKEN_WSOL.address) : itemReward.mint;\n      const rewardInfoIndex = farmKeys.rewardInfos.findIndex((item) =>\n        new PublicKey(item.mint.address).equals(rewardMint),\n      );\n      const rewardInfo = farmInfoKeys.rewardInfos[rewardInfoIndex];\n      if (!rewardInfo) this.logAndCreateError(\"configuration does not exist\", \"rewardMint\", rewardMint);\n      const rewardVault = rewardInfo!.vault ?? SOLMint;\n      const { rewardPubKey: userRewardTokenPub, newInstruction } = await this._getUserRewardInfo({\n        rewardInfo: itemReward,\n        payer: payerPubKey,\n      });\n      if (newInstruction) txBuilder.addInstruction(newInstruction);\n      if (!userRewardTokenPub)\n        this.logAndCreateError(\"cannot found target token accounts\", this.scope.account.tokenAccounts);\n      const ins = makeRestartRewardInstruction({\n        payer: this.scope.ownerPubKey,\n        rewardVault,\n        userRewardTokenPub: userRewardTokenPub!,\n        farmKeys,\n        rewardInfo: itemReward,\n      });\n      txBuilder.addInstruction({\n        instructions: [ins],\n        instructionTypes: [InstructionType.FarmV6Restart],\n      });\n    }\n\n    return txBuilder.versionBuild({ txVersion }) as Promise<MakeTxData<T>>;\n  }\n\n  public async addNewRewardToken<T extends TxVersion>(params: UpdateFarmReward): Promise<MakeTxData<T>> {\n    const { txVersion, farmInfo, newRewardInfo, payer } = params;\n    const version = FARM_PROGRAM_TO_VERSION[farmInfo.programId];\n    if (version !== 6) this.logAndCreateError(\"invalid farm version \", version);\n\n    const farmKeys = jsonInfo2PoolKeys((await this.scope.api.fetchFarmKeysById({ ids: farmInfo.id }))[0]);\n    const payerPubKey = payer ?? this.scope.ownerPubKey;\n    const txBuilder = this.createTxBuilder();\n\n    const rewardMint = newRewardInfo.mint.equals(SOLMint) ? new PublicKey(TOKEN_WSOL.address) : newRewardInfo.mint;\n\n    const rewardVault = getAssociatedLedgerPoolAccount({\n      programId: new PublicKey(farmInfo.programId),\n      poolId: new PublicKey(farmInfo.id),\n      mint: rewardMint,\n      type: \"rewardVault\",\n    });\n\n    const { rewardPubKey: userRewardTokenPub, newInstruction } = await this._getUserRewardInfo({\n      rewardInfo: newRewardInfo,\n      payer: payerPubKey,\n    });\n    if (newInstruction) txBuilder.addInstruction(newInstruction);\n\n    if (!userRewardTokenPub)\n      this.logAndCreateError(\"annot found target token accounts\", this.scope.account.tokenAccounts);\n\n    newRewardInfo.mint = rewardMint;\n\n    return txBuilder\n      .addInstruction({\n        instructions: [\n          makeAddNewRewardInstruction({\n            payer: this.scope.ownerPubKey,\n            userRewardTokenPub: userRewardTokenPub!,\n            farmKeys,\n            rewardVault,\n            rewardInfo: newRewardInfo,\n          }),\n        ],\n        instructionTypes: [InstructionType.FarmV6CreatorAddReward],\n      })\n      .versionBuild({ txVersion }) as Promise<MakeTxData<T>>;\n  }\n\n  public async addNewRewardsToken<T extends TxVersion>(params: UpdateFarmRewards<T>): Promise<MakeTxData<T>> {\n    const { txVersion, farmInfo, newRewardInfos, payer } = params;\n    const version = FARM_PROGRAM_TO_VERSION[farmInfo.programId];\n    if (version !== 6) this.logAndCreateError(\"invalid farm version \", version);\n\n    const farmKeys = jsonInfo2PoolKeys((await this.scope.api.fetchFarmKeysById({ ids: farmInfo.id }))[0]);\n    const payerPubKey = payer ?? this.scope.ownerPubKey;\n    const txBuilder = this.createTxBuilder();\n\n    for (const itemReward of newRewardInfos) {\n      const rewardMint = itemReward.mint.equals(SOLMint) ? new PublicKey(TOKEN_WSOL.address) : itemReward.mint;\n      const rewardVault = getAssociatedLedgerPoolAccount({\n        programId: new PublicKey(farmInfo.programId),\n        poolId: new PublicKey(farmInfo.id),\n        mint: rewardMint,\n        type: \"rewardVault\",\n      });\n      const { rewardPubKey: userRewardTokenPub, newInstruction } = await this._getUserRewardInfo({\n        rewardInfo: itemReward,\n        payer: payerPubKey,\n      });\n      if (newInstruction) txBuilder.addInstruction(newInstruction);\n      if (!userRewardTokenPub)\n        this.logAndCreateError(\"cannot found target token accounts\", this.scope.account.tokenAccounts);\n      const ins = makeAddNewRewardInstruction({\n        payer: this.scope.ownerPubKey,\n        userRewardTokenPub: userRewardTokenPub!,\n        farmKeys,\n        rewardVault,\n        rewardInfo: { ...itemReward, mint: rewardMint },\n      });\n      txBuilder.addInstruction({\n        instructions: [ins],\n        instructionTypes: [InstructionType.FarmV6CreatorAddReward],\n      });\n    }\n\n    return txBuilder.versionBuild({ txVersion }) as Promise<MakeTxData<T>>;\n  }\n\n  public async deposit<T extends TxVersion>(params: FarmDWParam<T>): Promise<MakeTxData<T>> {\n    const {\n      txVersion,\n      farmInfo,\n      amount,\n      feePayer,\n      useSOLBalance,\n      associatedOnly = true,\n      checkCreateATAOwner = false,\n      userAuxiliaryLedgers,\n      computeBudgetConfig,\n    } = params;\n\n    if (this.scope.availability.addFarm === false)\n      this.logAndCreateError(\"farm deposit feature disabled in your region\");\n\n    const { rewardInfos, programId } = farmInfo;\n    const version = FARM_PROGRAM_TO_VERSION[programId];\n    if (!isValidFarmVersion(version)) this.logAndCreateError(\"invalid farm program:\", farmInfo.programId);\n    const [farmProgramId, farmId] = [new PublicKey(farmInfo.programId), new PublicKey(farmInfo.id)];\n    const farmKeys = (await this.scope.api.fetchFarmKeysById({ ids: farmInfo.id }))[0];\n\n    const ledger = getAssociatedLedgerAccount({\n      programId: farmProgramId,\n      poolId: farmId,\n      owner: this.scope.ownerPubKey,\n      version,\n    });\n\n    const txBuilder = this.createTxBuilder();\n    txBuilder.addCustomComputeBudget(computeBudgetConfig);\n    const ownerMintToAccount: { [mint: string]: PublicKey } = {};\n    for (const item of this.scope.account.tokenAccounts) {\n      if (associatedOnly) {\n        const ata = getATAAddress(this.scope.ownerPubKey, item.mint, item.programId).publicKey;\n        if (item.publicKey && ata.equals(item.publicKey)) ownerMintToAccount[item.mint.toString()] = item.publicKey;\n      } else {\n        ownerMintToAccount[item.mint.toString()] = item.publicKey!;\n      }\n    }\n\n    const lpMint = farmKeys.lpMint;\n    const ownerLpTokenAccount = ownerMintToAccount[lpMint.address];\n    if (!ownerLpTokenAccount) this.logAndCreateError(\"you don't have any lp\", \"lp zero\", ownerMintToAccount);\n\n    const rewardAccounts: PublicKey[] = [];\n    for (const itemReward of rewardInfos) {\n      const rewardUseSOLBalance = useSOLBalance && itemReward.mint.address === WSOLMint.toString();\n\n      let ownerRewardAccount = ownerMintToAccount[itemReward.mint.address];\n\n      if (!ownerRewardAccount) {\n        const { account: _ownerRewardAccount, instructionParams } = await this.scope.account.getOrCreateTokenAccount({\n          tokenProgram: itemReward.mint.programId,\n          mint: new PublicKey(itemReward.mint.address),\n          notUseTokenAccount: rewardUseSOLBalance,\n          createInfo: {\n            payer: feePayer || this.scope.ownerPubKey,\n            amount: 0,\n          },\n          owner: this.scope.ownerPubKey,\n          skipCloseAccount: !rewardUseSOLBalance,\n          associatedOnly: rewardUseSOLBalance ? false : associatedOnly,\n          checkCreateATAOwner,\n        });\n        ownerRewardAccount = _ownerRewardAccount!;\n        instructionParams && txBuilder.addInstruction(instructionParams);\n      }\n\n      ownerMintToAccount[itemReward.mint.address] = ownerRewardAccount;\n      rewardAccounts.push(ownerRewardAccount);\n    }\n\n    let ledgerInfo: FarmLedger | undefined = undefined;\n    const ledgerData = await this.scope.connection.getAccountInfo(ledger);\n    if (ledgerData) {\n      const ledgerLayout = getFarmLedgerLayout(version)!;\n      ledgerInfo = ledgerLayout.decode(ledgerData.data);\n    }\n\n    if (farmInfo.programId !== FARM_PROGRAM_ID_V6.toString() && !ledgerInfo) {\n      const { instruction, instructionType } = createAssociatedLedgerAccountInstruction({\n        id: farmId,\n        programId: farmProgramId,\n        version,\n        ledger,\n        owner: this.scope.ownerPubKey,\n      });\n      txBuilder.addInstruction({ instructions: [instruction], instructionTypes: [instructionType] });\n    }\n\n    const errorMsg = validateFarmRewards({\n      version,\n      rewardInfos,\n      rewardTokenAccountsPublicKeys: rewardAccounts,\n    });\n    if (errorMsg) this.logAndCreateError(errorMsg);\n\n    const insParams = {\n      amount: parseBigNumberish(amount),\n      owner: this.scope.ownerPubKey,\n      farmInfo,\n      farmKeys,\n      lpAccount: ownerLpTokenAccount,\n      rewardAccounts,\n      userAuxiliaryLedgers: userAuxiliaryLedgers?.map((key) => new PublicKey(key)),\n    };\n\n    const newInstruction =\n      version === 6\n        ? makeDepositInstructionV6(insParams)\n        : version === 5\n        ? makeDepositInstructionV5(insParams)\n        : makeDepositInstructionV3(insParams);\n\n    const insType = {\n      3: InstructionType.FarmV3Deposit,\n      5: InstructionType.FarmV5Deposit,\n      6: InstructionType.FarmV6Deposit,\n    };\n\n    return txBuilder\n      .addInstruction({\n        instructions: [newInstruction],\n        instructionTypes: [insType[version]],\n      })\n      .versionBuild({ txVersion }) as Promise<MakeTxData<T>>;\n  }\n\n  public async withdraw<T extends TxVersion>(params: FarmDWParam<T>): Promise<MakeTxData<T>> {\n    const {\n      txVersion,\n      farmInfo,\n      amount,\n      deposited,\n      useSOLBalance,\n      feePayer,\n      associatedOnly = true,\n      checkCreateATAOwner = false,\n      userAuxiliaryLedgers,\n      computeBudgetConfig,\n    } = params;\n    const { rewardInfos } = farmInfo;\n\n    if (this.scope.availability.removeFarm === false)\n      this.logAndCreateError(\"farm withdraw feature disabled in your region\");\n\n    const version = FARM_PROGRAM_TO_VERSION[farmInfo.programId];\n\n    if (!isValidFarmVersion(version)) this.logAndCreateError(\"invalid farm program:\", farmInfo.programId);\n\n    const farmKeys = (await this.scope.api.fetchFarmKeysById({ ids: farmInfo.id }))[0];\n    const txBuilder = this.createTxBuilder();\n    txBuilder.addCustomComputeBudget(computeBudgetConfig);\n    const ownerMintToAccount: { [mint: string]: PublicKey } = {};\n    for (const item of this.scope.account.tokenAccounts) {\n      if (associatedOnly) {\n        const ata = getATAAddress(this.scope.ownerPubKey, item.mint).publicKey;\n        if (item.publicKey && ata.equals(item.publicKey)) ownerMintToAccount[item.mint.toString()] = item.publicKey;\n      } else {\n        ownerMintToAccount[item.mint.toString()] = item.publicKey!;\n      }\n    }\n\n    if (!deposited) {\n      const ledger = getAssociatedLedgerAccount({\n        programId: new PublicKey(farmInfo.programId),\n        poolId: new PublicKey(farmInfo.id),\n        owner: this.scope.ownerPubKey,\n        version,\n      });\n      const ledgerData = await this.scope.connection.getAccountInfo(ledger);\n      if (!ledgerData) this.logAndCreateError(\"no lp data\", { farmId: farmInfo.id, version, ledgerData });\n      const ledgerLayout = getFarmLedgerLayout(version)!;\n      const ledgerInfo = ledgerLayout.decode(ledgerData!.data);\n      if (ledgerInfo.deposited.isZero()) this.logAndCreateError(\"no deposited lp\", { farmId: farmInfo.id });\n    } else {\n      if (deposited.isZero()) this.logAndCreateError(\"no deposited lp\", { farmId: farmInfo.id });\n    }\n\n    const lpMint = farmKeys.lpMint.address;\n    const lpMintUseSOLBalance = useSOLBalance && lpMint === WSOLMint.toString();\n\n    let ownerLpTokenAccount = ownerMintToAccount[lpMint.toString()];\n    if (!ownerLpTokenAccount) {\n      const { account: _ownerRewardAccount, instructionParams } = await this.scope.account.getOrCreateTokenAccount({\n        tokenProgram: farmKeys.lpMint.programId,\n        mint: new PublicKey(lpMint),\n        notUseTokenAccount: lpMintUseSOLBalance,\n        createInfo: {\n          payer: feePayer || this.scope.ownerPubKey,\n          amount: 0,\n        },\n        owner: this.scope.ownerPubKey,\n        skipCloseAccount: true,\n        associatedOnly: lpMintUseSOLBalance ? false : associatedOnly,\n        checkCreateATAOwner,\n      });\n      ownerLpTokenAccount = _ownerRewardAccount!;\n      instructionParams && txBuilder.addInstruction(instructionParams);\n    }\n    ownerMintToAccount[lpMint.toString()] = ownerLpTokenAccount;\n\n    const rewardAccounts: PublicKey[] = [];\n    for (const itemReward of rewardInfos) {\n      const rewardUseSOLBalance = useSOLBalance && itemReward.mint.address === WSOLMint.toString();\n\n      let ownerRewardAccount = ownerMintToAccount[itemReward.mint.address];\n      if (!ownerRewardAccount) {\n        const { account: _ownerRewardAccount, instructionParams } = await this.scope.account.getOrCreateTokenAccount({\n          tokenProgram: itemReward.mint.programId,\n          mint: new PublicKey(itemReward.mint.address),\n          notUseTokenAccount: rewardUseSOLBalance,\n          createInfo: {\n            payer: feePayer || this.scope.ownerPubKey,\n            amount: 0,\n          },\n          owner: this.scope.ownerPubKey,\n          skipCloseAccount: !rewardUseSOLBalance,\n          associatedOnly: rewardUseSOLBalance ? false : associatedOnly,\n          checkCreateATAOwner,\n        });\n        ownerRewardAccount = _ownerRewardAccount!;\n        instructionParams && txBuilder.addInstruction(instructionParams);\n      }\n\n      ownerMintToAccount[itemReward.mint.address] = ownerRewardAccount;\n      rewardAccounts.push(ownerRewardAccount);\n    }\n\n    const errorMsg = validateFarmRewards({\n      version,\n      rewardInfos,\n      rewardTokenAccountsPublicKeys: rewardAccounts,\n    });\n    if (errorMsg) this.logAndCreateError(errorMsg);\n\n    const insParams = {\n      amount: parseBigNumberish(amount),\n      owner: this.scope.ownerPubKey,\n      farmInfo,\n      farmKeys,\n      lpAccount: ownerLpTokenAccount,\n      rewardAccounts,\n      userAuxiliaryLedgers: userAuxiliaryLedgers?.map((key) => new PublicKey(key)),\n    };\n\n    const newInstruction =\n      version === 6\n        ? makeWithdrawInstructionV6(insParams)\n        : version === 5\n        ? makeWithdrawInstructionV5(insParams)\n        : makeWithdrawInstructionV3(insParams);\n\n    const insType = {\n      3: InstructionType.FarmV3Withdraw,\n      5: InstructionType.FarmV5Withdraw,\n      6: InstructionType.FarmV6Withdraw,\n    };\n\n    return txBuilder\n      .addInstruction({\n        instructions: [newInstruction],\n        instructionTypes: [insType[version]],\n      })\n      .versionBuild({ txVersion }) as Promise<MakeTxData<T>>;\n  }\n\n  // token account needed\n  public async withdrawFarmReward<T extends TxVersion>({\n    farmInfo,\n    withdrawMint,\n    txVersion,\n  }: {\n    farmInfo: FormatFarmInfoOut;\n    withdrawMint: PublicKey;\n    payer?: PublicKey;\n    txVersion?: T;\n  }): Promise<MakeTxData<T>> {\n    this.scope.checkOwner();\n    const farmKeys = jsonInfo2PoolKeys(\n      (await this.scope.api.fetchFarmKeysById({ ids: farmInfo.id }))[0] as FormatFarmKeyOutV6,\n    );\n    const version = FARM_PROGRAM_TO_VERSION[farmInfo.programId];\n    if (version !== 6) this.logAndCreateError(\"invalid farm version\", version);\n\n    const rewardInfoIdx = farmInfo.rewardInfos.findIndex((item) =>\n      item.mint.address === SOLMint.toString() ? new PublicKey(TOKEN_WSOL.address) : withdrawMint,\n    );\n    const rewardInfo = farmKeys.rewardInfos[rewardInfoIdx];\n    if (!rewardInfo) this.logAndCreateError(\"withdraw mint error\", \"rewardInfos\", farmInfo);\n\n    const rewardVault = rewardInfo?.vault ?? SOLMint;\n    const txBuilder = this.createTxBuilder();\n\n    let userRewardToken: PublicKey;\n\n    if (withdrawMint.equals(SOLMint)) {\n      const txInstruction = await createWSolAccountInstructions({\n        connection: this.scope.connection,\n        owner: this.scope.ownerPubKey,\n        payer: this.scope.ownerPubKey,\n        amount: calFarmRewardAmount({\n          ...rewardInfo,\n          openTime: rewardInfo.openTime as unknown as string,\n          endTime: rewardInfo.endTime as unknown as string,\n          perSecond: new Decimal(rewardInfo.perSecond).mul(10 ** rewardInfo.mint.decimals).toString(),\n        }),\n      });\n      userRewardToken = txInstruction.addresses.newAccount;\n      txBuilder.addInstruction(txInstruction);\n    } else {\n      const selectUserRewardToken = await this.scope.account.getCreatedTokenAccount({\n        mint: withdrawMint,\n      });\n\n      if (selectUserRewardToken === null) {\n        userRewardToken = await this.scope.account.getAssociatedTokenAccount(withdrawMint);\n        txBuilder.addInstruction({\n          instructions: [\n            createAssociatedTokenAccountInstruction(\n              this.scope.ownerPubKey,\n              userRewardToken,\n              this.scope.ownerPubKey,\n              withdrawMint,\n            ),\n          ],\n          instructionTypes: [InstructionType.CreateATA],\n        });\n      } else {\n        userRewardToken = selectUserRewardToken!;\n      }\n    }\n\n    const { instruction, instructionType } = makeCreatorWithdrawFarmRewardInstruction({\n      programId: farmKeys.programId,\n      id: farmKeys.id,\n      authority: farmKeys.authority,\n      lpVault: farmKeys.lpVault,\n      rewardVault,\n      userRewardToken,\n      owner: this.scope.ownerPubKey,\n    });\n\n    return txBuilder\n      .addInstruction({\n        instructions: [instruction],\n        instructionTypes: [instructionType],\n      })\n      .versionBuild({ txVersion }) as Promise<MakeTxData<T>>;\n  }\n\n  public async harvestAllRewards<T extends TxVersion = TxVersion.LEGACY>(params: {\n    farmInfoList: Record<string, FormatFarmInfoOut>;\n    feePayer?: PublicKey;\n    useSOLBalance?: boolean;\n    associatedOnly?: boolean;\n    checkCreateATAOwner?: boolean;\n    userAuxiliaryLedgers?: string[];\n    txVersion?: T;\n    computeBudgetConfig?: ComputeBudgetConfig;\n  }): Promise<MakeMultiTxData<T>> {\n    const {\n      farmInfoList,\n      useSOLBalance,\n      feePayer,\n      associatedOnly = true,\n      checkCreateATAOwner = false,\n      userAuxiliaryLedgers,\n      txVersion,\n      computeBudgetConfig,\n    } = params;\n\n    const txBuilder = this.createTxBuilder();\n    const ownerMintToAccount: { [mint: string]: PublicKey } = {};\n    for (const item of this.scope.account.tokenAccounts) {\n      if (associatedOnly) {\n        const ata = getATAAddress(this.scope.ownerPubKey, item.mint).publicKey;\n        if (item.publicKey && ata.equals(item.publicKey)) ownerMintToAccount[item.mint.toString()] = item.publicKey;\n      } else {\n        ownerMintToAccount[item.mint.toString()] = item.publicKey!;\n      }\n    }\n\n    const allFarmKeys = await this.scope.api.fetchFarmKeysById({\n      ids: Object.values(farmInfoList)\n        .map((f) => f.id)\n        .join(\",\"),\n    });\n    const farmKeyMap: { [key: string]: FormatFarmKeyOut } = allFarmKeys.reduce(\n      (acc, cur) => ({ ...acc, [cur.id]: cur }),\n      {},\n    );\n    for (const farmInfo of Object.values(farmInfoList)) {\n      const { programId, lpMint: farmLpMint, rewardInfos, id } = farmInfo;\n      const version = FARM_PROGRAM_TO_VERSION[programId];\n\n      const lpMint = farmLpMint.address;\n      const lpMintUseSOLBalance = useSOLBalance && lpMint === WSOLMint.toString();\n      let ownerLpTokenAccount = ownerMintToAccount[lpMint];\n\n      if (!ownerLpTokenAccount) {\n        const { account: _ownerLpAccount, instructionParams } = await this.scope.account.getOrCreateTokenAccount({\n          tokenProgram: farmLpMint.programId,\n          mint: new PublicKey(lpMint),\n          notUseTokenAccount: lpMintUseSOLBalance,\n          createInfo: {\n            payer: feePayer || this.scope.ownerPubKey,\n            amount: 0,\n          },\n          owner: this.scope.ownerPubKey,\n          skipCloseAccount: true,\n          associatedOnly: lpMintUseSOLBalance ? false : associatedOnly,\n          checkCreateATAOwner,\n        });\n        ownerLpTokenAccount = _ownerLpAccount!;\n        instructionParams && txBuilder.addInstruction(instructionParams);\n      }\n      ownerMintToAccount[lpMint.toString()] = ownerLpTokenAccount;\n\n      const rewardAccounts: PublicKey[] = [];\n      for (const itemReward of rewardInfos) {\n        const rewardUseSOLBalance = useSOLBalance && itemReward.mint.address === WSOLMint.toString();\n\n        let ownerRewardAccount = ownerMintToAccount[itemReward.mint.address];\n        if (!ownerRewardAccount) {\n          const { account: _ownerRewardAccount, instructionParams } = await this.scope.account.getOrCreateTokenAccount({\n            tokenProgram: itemReward.mint.programId,\n            mint: new PublicKey(itemReward.mint.address),\n            notUseTokenAccount: rewardUseSOLBalance,\n            createInfo: {\n              payer: feePayer || this.scope.ownerPubKey,\n              amount: 0,\n            },\n            owner: this.scope.ownerPubKey,\n            skipCloseAccount: !rewardUseSOLBalance,\n            associatedOnly: rewardUseSOLBalance ? false : associatedOnly,\n            checkCreateATAOwner,\n          });\n          ownerRewardAccount = _ownerRewardAccount!;\n          instructionParams && txBuilder.addInstruction(instructionParams);\n        }\n\n        ownerMintToAccount[itemReward.mint.address] = ownerRewardAccount;\n        rewardAccounts.push(ownerRewardAccount);\n      }\n\n      const farmKeys = farmKeyMap[id];\n      const insParams = {\n        amount: BN_ZERO,\n        owner: this.scope.ownerPubKey,\n        farmInfo,\n        farmKeys,\n        lpAccount: ownerLpTokenAccount,\n        rewardAccounts,\n        userAuxiliaryLedgers: userAuxiliaryLedgers?.map((key) => new PublicKey(key)),\n      };\n\n      const withdrawInstruction =\n        version === 6\n          ? makeWithdrawInstructionV6(insParams)\n          : version === 5\n          ? makeWithdrawInstructionV5(insParams)\n          : makeWithdrawInstructionV3(insParams);\n\n      const insType = {\n        3: InstructionType.FarmV3Withdraw,\n        5: InstructionType.FarmV5Withdraw,\n        6: InstructionType.FarmV6Withdraw,\n      };\n\n      txBuilder.addInstruction({\n        instructions: [withdrawInstruction],\n        instructionTypes: [insType[version]],\n      });\n    }\n\n    if (txVersion === TxVersion.LEGACY)\n      return txBuilder.sizeCheckBuild({ computeBudgetConfig }) as Promise<MakeMultiTxData<T>>;\n    return txBuilder.sizeCheckBuildV0({ computeBudgetConfig }) as Promise<MakeMultiTxData<T>>;\n  }\n}\n","import { PublicKey } from \"@solana/web3.js\";\n\nimport { createLogger } from \"@/common/logger\";\nimport { FARM_PROGRAM_ID_V3, FARM_PROGRAM_ID_V5, FARM_PROGRAM_ID_V6 } from \"@/common/programId\";\nimport { ApiV3Token, RewardInfoV345, RewardInfoV6 } from \"@/api/type\";\n\nimport {\n  FarmLedgerLayout,\n  farmLedgerLayoutV3_2,\n  farmLedgerLayoutV5_2,\n  farmLedgerLayoutV6_1,\n  FarmStateLayout,\n  farmStateV3Layout,\n  farmStateV5Layout,\n  farmStateV6Layout,\n} from \"./layout\";\n\nconst logger = createLogger(\"Raydium_farm_config\");\n\nexport type FarmVersion = 3 | 4 | 5 | 6;\nexport const FARM_LOCK_MINT = new PublicKey(\"4k3Dyjzvzp8eMZWUXbBCjEvwSkkk59S5iCNLY3QrkX6R\");\nexport const FARM_LOCK_VAULT = new PublicKey(\"FrspKwj8i3pNmKwXreTveC4fu7KL5ZbGeXdZBe2XViu1\");\n\n/* ================= index ================= */\n// version => farm state layout\nexport const FARM_VERSION_TO_STATE_LAYOUT: {\n  [version in FarmVersion]?: FarmStateLayout;\n} = {\n  3: farmStateV3Layout,\n  5: farmStateV5Layout,\n  6: farmStateV6Layout,\n};\n\n// version => farm ledger layout\nexport const FARM_VERSION_TO_LEDGER_LAYOUT: {\n  [version in FarmVersion]?: FarmLedgerLayout;\n} = {\n  3: farmLedgerLayoutV3_2,\n  5: farmLedgerLayoutV5_2,\n  6: farmLedgerLayoutV6_1,\n};\n\nexport const isValidFarmVersion = (version: number): boolean => [3, 5, 6].indexOf(version) !== -1;\n\nexport const validateFarmRewards = (params: {\n  version: number;\n  rewardInfos: { mint: ApiV3Token }[];\n  rewardTokenAccountsPublicKeys: PublicKey[];\n}): (() => string | undefined) => {\n  const { version, rewardInfos, rewardTokenAccountsPublicKeys } = params;\n\n  const infoMsg = `rewardInfo:${JSON.stringify(rewardInfos)}, rewardAccount:${JSON.stringify(\n    rewardTokenAccountsPublicKeys,\n  )}`;\n\n  const validator = {\n    3: (): string | undefined => {\n      if (rewardInfos.length !== 1 || rewardTokenAccountsPublicKeys.length !== 1) {\n        return `rewardInfos or rewardTokenAccounts lengths not equal 1: ${infoMsg}`;\n      }\n    },\n    5: (): string | undefined => {\n      if (rewardInfos.length !== rewardTokenAccountsPublicKeys.length) {\n        return `rewardInfos and rewardTokenAccounts lengths not equal: ${infoMsg}`;\n      }\n    },\n    6: (): string | undefined => {\n      if (!rewardTokenAccountsPublicKeys.length || rewardInfos.length !== rewardTokenAccountsPublicKeys.length) {\n        return `no rewardTokenAccounts or rewardInfos and rewardTokenAccounts lengths not equal: ${infoMsg}`;\n      }\n    },\n  };\n\n  return validator[version]?.();\n};\n\nexport const poolTypeV6 = { \"Standard SPL\": 0, \"Option tokens\": 1 };\n\nexport const FARM_PROGRAM_TO_VERSION: Record<string, 3 | 5 | 6> = {\n  [FARM_PROGRAM_ID_V3.toString()]: 3,\n  [FARM_PROGRAM_ID_V5.toString()]: 5,\n  [FARM_PROGRAM_ID_V6.toString()]: 6,\n};\n","import { PublicKey } from \"@solana/web3.js\";\nimport BN from \"bn.js\";\n\nimport {\n  blob,\n  GetLayoutSchemaFromStructure,\n  GetStructureFromLayoutSchema,\n  GetStructureSchema,\n  publicKey,\n  seq,\n  struct,\n  u128,\n  u64,\n  u8,\n  i8,\n  i64,\n  bool,\n} from \"@/marshmallow\";\n\nimport { poolTypeV6 } from \"./config\";\nimport { RewardType } from \"./type\";\n\nexport const associatedLedgerAccountLayout = struct([u8(\"instruction\")]);\nexport const withdrawRewardLayout = struct([u8(\"instruction\")]);\n\nconst farmStateRewardInfoV6Layout = struct([\n  u64(\"rewardState\"),\n  u64(\"rewardOpenTime\"),\n  u64(\"rewardEndTime\"),\n  u64(\"rewardLastUpdateTime\"),\n  u64(\"totalReward\"),\n  u64(\"totalRewardEmissioned\"),\n  u64(\"rewardClaimed\"),\n  u64(\"rewardPerSecond\"),\n  u128(\"accRewardPerShare\"),\n  publicKey(\"rewardVault\"),\n  publicKey(\"rewardMint\"),\n  publicKey(\"rewardSender\"),\n  u64(\"rewardType\"),\n  seq(u64(), 15, \"padding\"),\n]);\n\nexport const realFarmStateV3Layout = struct([\n  u64(\"state\"),\n  u64(\"nonce\"),\n  publicKey(\"lpVault\"),\n  publicKey(\"rewardVault\"),\n  publicKey(),\n  publicKey(),\n  u64(),\n  u64(),\n  u64(\"totalReward\"),\n  u128(\"perShareReward\"),\n  u64(\"lastSlot\"),\n  u64(\"perSlotReward\"),\n]);\n\nexport const realFarmStateV5Layout = struct([\n  u64(\"state\"),\n  u64(\"nonce\"),\n  publicKey(\"lpVault\"),\n  publicKey(\"rewardVaultA\"),\n  u64(\"totalRewardA\"),\n  u128(\"perShareRewardA\"),\n  u64(\"perSlotRewardA\"),\n  u8(\"option\"),\n  publicKey(\"rewardVaultB\"),\n  blob(7),\n  u64(\"totalRewardB\"),\n  u128(\"perShareRewardB\"),\n  u64(\"perSlotRewardB\"),\n  u64(\"lastSlot\"),\n  publicKey(),\n]);\n\nexport const realFarmV6Layout = struct([\n  u64(),\n  u64(\"state\"),\n  u64(\"nonce\"),\n  u64(\"validRewardTokenNum\"),\n  u128(\"rewardMultiplier\"),\n  u64(\"rewardPeriodMax\"),\n  u64(\"rewardPeriodMin\"),\n  u64(\"rewardPeriodExtend\"),\n  publicKey(\"lpMint\"),\n  publicKey(\"lpVault\"),\n  seq(farmStateRewardInfoV6Layout, 5, \"rewardInfos\"),\n  publicKey(\"creator\"),\n  publicKey(),\n  seq(u64(), 32, \"padding\"),\n]);\n\nexport const farmStateV3Layout = new Proxy(\n  realFarmStateV3Layout as GetStructureFromLayoutSchema<\n    {\n      version: 3;\n      rewardInfos: {\n        rewardVault: PublicKey;\n        totalReward: BN;\n        perSlotReward: BN;\n        perShareReward: BN;\n      }[];\n    } & GetLayoutSchemaFromStructure<typeof realFarmStateV3Layout>\n  >,\n  {\n    get(target, p, receiver): any {\n      if (p === \"decode\")\n        return (...decodeParams: Parameters<typeof target[\"decode\"]>) => {\n          const originalResult = target.decode(...decodeParams);\n          return {\n            ...originalResult,\n            version: 3,\n            rewardInfos: [\n              {\n                rewardVault: originalResult.rewardVault,\n                totalReward: originalResult.totalReward,\n                perSlotReward: originalResult.perSlotReward,\n                perShareReward: originalResult.perShareReward,\n              },\n            ],\n          };\n        };\n      else return Reflect.get(target, p, receiver);\n    },\n  },\n);\n\nexport const farmStateV5Layout = new Proxy(\n  realFarmStateV5Layout as GetStructureFromLayoutSchema<\n    {\n      version: 5;\n      rewardInfos: {\n        rewardVault: PublicKey;\n        totalReward: BN;\n        perSlotReward: BN;\n        perShareReward: BN;\n      }[];\n    } & GetLayoutSchemaFromStructure<typeof realFarmStateV5Layout>\n  >,\n  {\n    get(target, p, receiver): any {\n      if (p === \"decode\")\n        return (...decodeParams: Parameters<typeof target[\"decode\"]>) => {\n          const originalResult = target.decode(...decodeParams);\n          return {\n            ...originalResult,\n            version: 5,\n            rewardInfos: [\n              {\n                rewardVault: originalResult.rewardVaultA,\n                totalReward: originalResult.totalRewardA,\n                perSlotReward: originalResult.perSlotRewardA,\n                perShareReward: originalResult.perShareRewardA,\n              },\n              {\n                rewardVault: originalResult.rewardVaultB,\n                totalReward: originalResult.totalRewardB,\n                perSlotReward: originalResult.perSlotRewardB,\n                perShareReward: originalResult.perShareRewardB,\n              },\n            ],\n          };\n        };\n      else return Reflect.get(target, p, receiver);\n    },\n  },\n);\n\nexport const farmStateV6Layout = new Proxy(\n  realFarmV6Layout as GetStructureFromLayoutSchema<\n    {\n      version: 6;\n      rewardInfos: {\n        rewardState: BN;\n        rewardOpenTime: BN;\n        rewardEndTime: BN;\n        rewardLastUpdateTime: BN;\n        totalReward: BN;\n        totalRewardEmissioned: BN;\n        rewardClaimed: BN;\n        rewardPerSecond: BN;\n        accRewardPerShare: BN;\n        rewardVault: PublicKey;\n        rewardMint: PublicKey;\n        rewardSender: PublicKey;\n        rewardType: RewardType;\n      }[];\n    } & GetLayoutSchemaFromStructure<typeof realFarmV6Layout>\n  >,\n  {\n    get(target, p, receiver): any {\n      if (p === \"decode\")\n        return (...decodeParams: Parameters<typeof target[\"decode\"]>) => {\n          const originalResult = target.decode(...decodeParams);\n          return {\n            ...originalResult,\n            version: 6,\n            rewardInfos: originalResult.rewardInfos.map((item) => ({\n              ...item,\n              rewardType: (Object.entries(poolTypeV6).find((i) => String(i[1]) === item.rewardType.toString()) ?? [\n                \"Standard SPL\",\n              ])[0],\n            })),\n          };\n        };\n      else return Reflect.get(target, p, receiver);\n    },\n  },\n);\n\nexport const farmRewardTimeInfoLayout = struct([\n  u64(\"isSet\"),\n  u64(\"rewardPerSecond\"),\n  u64(\"rewardOpenTime\"),\n  u64(\"rewardEndTime\"),\n  u64(\"rewardType\"),\n]);\n\nexport const farmRewardLayout = struct([\n  u8(\"instruction\"),\n  u64(\"nonce\"),\n  seq(farmRewardTimeInfoLayout, 5, \"rewardTimeInfo\"),\n]);\n\nexport const farmRewardRestartLayout = struct([\n  u8(\"instruction\"),\n  u64(\"rewardReopenTime\"),\n  u64(\"rewardEndTime\"),\n  u64(\"rewardPerSecond\"),\n]);\n\nexport const farmAddRewardLayout = struct([\n  u8(\"instruction\"),\n  u64(\"isSet\"),\n  u64(\"rewardPerSecond\"),\n  u64(\"rewardOpenTime\"),\n  u64(\"rewardEndTime\"),\n  u64(\"rewardType\"),\n]);\n\nexport type FarmStateLayoutV3 = typeof farmStateV3Layout;\nexport type FarmStateLayoutV5 = typeof farmStateV5Layout;\nexport type FarmStateLayoutV6 = typeof farmStateV6Layout;\n\nexport type FarmStateV3 = GetStructureSchema<FarmStateLayoutV3>;\nexport type FarmStateV5 = GetStructureSchema<FarmStateLayoutV5>;\nexport type FarmStateV6 = GetStructureSchema<FarmStateLayoutV6>;\n\nexport type FarmState = FarmStateV3 | FarmStateV5 | FarmStateV6;\n// farmStateLayoutV3\nexport type FarmStateLayout = FarmStateLayoutV3 | FarmStateLayoutV5 | FarmStateLayoutV6;\n\n/* ================= ledger layouts ================= */\nexport const farmLedgerLayoutV3_1 = struct([\n  u64(\"state\"),\n  publicKey(\"id\"),\n  publicKey(\"owner\"),\n  u64(\"deposited\"),\n  seq(u64(), 1, \"rewardDebts\"),\n]);\n\nexport const farmLedgerLayoutV3_2 = struct([\n  u64(\"state\"),\n  publicKey(\"id\"),\n  publicKey(\"owner\"),\n  u64(\"deposited\"),\n  seq(u128(), 1, \"rewardDebts\"),\n  u64(\"\"),\n  u64(\"voteLockedBalance\"),\n  seq(u64(), 15),\n]);\n\nexport const farmLedgerLayoutV5_1 = struct([\n  u64(\"state\"),\n  publicKey(\"id\"),\n  publicKey(\"owner\"),\n  u64(\"deposited\"),\n  seq(u64(), 2, \"rewardDebts\"),\n]);\n\nexport const farmLedgerLayoutV5_2 = struct([\n  u64(\"state\"),\n  publicKey(\"id\"),\n  publicKey(\"owner\"),\n  u64(\"deposited\"),\n  seq(u128(), 2, \"rewardDebts\"),\n  seq(u64(), 17),\n]);\n\nexport const farmLedgerLayoutV6_1 = struct([\n  u64(),\n  u64(\"state\"),\n  publicKey(\"id\"),\n  publicKey(\"owner\"),\n  u64(\"deposited\"),\n  seq(u128(), 5, \"rewardDebts\"),\n  seq(u64(), 16),\n]);\n\nexport type FarmLedgerLayoutV3_1 = typeof farmLedgerLayoutV3_1;\nexport type FarmLedgerLayoutV3_2 = typeof farmLedgerLayoutV3_2;\nexport type FarmLedgerLayoutV5_1 = typeof farmLedgerLayoutV5_1;\nexport type FarmLedgerLayoutV5_2 = typeof farmLedgerLayoutV5_2;\nexport type FarmLedgerLayoutV6_1 = typeof farmLedgerLayoutV6_1;\nexport type FarmLedgerLayout =\n  | FarmLedgerLayoutV3_1\n  | FarmLedgerLayoutV3_2\n  | FarmLedgerLayoutV5_1\n  | FarmLedgerLayoutV5_2\n  | FarmLedgerLayoutV6_1;\n\nexport type FarmLedgerV3_1 = GetStructureSchema<FarmLedgerLayoutV3_1>;\nexport type FarmLedgerV3_2 = GetStructureSchema<FarmLedgerLayoutV3_2>;\nexport type FarmLedgerV5_1 = GetStructureSchema<FarmLedgerLayoutV5_1>;\nexport type FarmLedgerV5_2 = GetStructureSchema<FarmLedgerLayoutV5_2>;\nexport type FarmLedgerV6_1 = GetStructureSchema<FarmLedgerLayoutV6_1>;\nexport type FarmLedger = FarmLedgerV3_1 | FarmLedgerV3_2 | FarmLedgerV5_1 | FarmLedgerV5_2 | FarmLedgerV6_1;\n\nexport const dwLayout = struct([u8(\"instruction\"), u64(\"amount\")]);\n\nexport const VoterVotingMintConfig = struct([\n  publicKey(\"mint\"),\n  publicKey(\"grantAuthority\"),\n  u64(\"baselineVoteWeightScaledFactor\"),\n  u64(\"maxExtraLockupVoteWeightScaledFactor\"),\n  u64(\"lockupSaturationSecs\"),\n\n  i8(\"digitShift\"), // TODO\n  seq(u8(), 7, \"reserved1\"),\n  seq(u64(), 7, \"reserved2\"),\n]);\n\nexport const VoterRegistrar = struct([\n  blob(8),\n  publicKey(\"governanceProgramId\"),\n  publicKey(\"realm\"),\n  publicKey(\"realmGoverningTokenMint\"),\n  publicKey(\"realmAuthority\"),\n\n  seq(u8(), 32, \"reserved1\"),\n  seq(VoterVotingMintConfig, 4, \"votingMints\"),\n\n  i64(\"timeOffset\"),\n  u8(\"bump\"),\n  seq(u8(), 7, \"reserved2\"),\n  seq(u64(), 11, \"reserved3\"),\n]);\n\nexport const VoterLockup = struct([i64(\"startTime\"), i64(\"endTime\"), u8(\"kind\"), seq(u8(), 15, \"reserved\")]);\n\nexport const VoterDepositEntry = struct([\n  seq(VoterLockup, 1, \"lockup\"),\n  u64(\"amountDeposited_native\"),\n  u64(\"amountInitiallyLockedNative\"),\n  bool(\"isUsed\"),\n  bool(\"allowClawback\"),\n  u8(\"votingMintConfigIdx\"),\n  seq(u8(), 29, \"reserved\"),\n]);\n\nexport const Voter = struct([\n  blob(8),\n  publicKey(\"voterAuthority\"),\n  publicKey(\"registrar\"),\n\n  seq(VoterDepositEntry, 32, \"deposits\"),\n\n  u8(\"voterBump\"),\n  u8(\"voterWweightRecordBump\"),\n  seq(u8(), 94, \"reserved\"),\n]);\n","import {\n  PublicKey,\n  SystemProgram,\n  SYSVAR_RENT_PUBKEY,\n  SYSVAR_CLOCK_PUBKEY,\n  TransactionInstruction,\n  Connection,\n} from \"@solana/web3.js\";\nimport {\n  createAssociatedTokenAccountInstruction,\n  TOKEN_PROGRAM_ID,\n  ASSOCIATED_TOKEN_PROGRAM_ID,\n} from \"@solana/spl-token\";\nimport BN from \"bn.js\";\n\nimport { struct, u8, u64, u32, bool } from \"@/marshmallow\";\nimport { FormatFarmKeyOut } from \"@/api/type\";\nimport { getATAAddress } from \"@/common/pda\";\nimport { createLogger } from \"@/common/logger\";\nimport { parseBigNumberish } from \"@/common/bignumber\";\nimport {\n  accountMeta,\n  commonSystemAccountMeta,\n  SOLMint,\n  RENT_PROGRAM_ID,\n  INSTRUCTION_PROGRAM_ID,\n} from \"@/common/pubKey\";\nimport { InstructionType } from \"@/common/txTool/txType\";\nimport { InstructionReturn } from \"../type\";\nimport {\n  associatedLedgerAccountLayout,\n  farmRewardLayout,\n  withdrawRewardLayout,\n  farmLedgerLayoutV3_2,\n  farmAddRewardLayout,\n} from \"./layout\";\nimport { FarmRewardInfoConfig, RewardInfoKey, RewardType } from \"./type\";\nimport {\n  getRegistrarAddress,\n  getVotingTokenMint,\n  getVotingMintAuthority,\n  getVoterAddress,\n  getVoterWeightRecordAddress,\n  getTokenOwnerRecordAddress,\n} from \"./pda\";\nimport { dwLayout, farmRewardRestartLayout } from \"./layout\";\nimport { getAssociatedLedgerAccount, getDepositEntryIndex } from \"./util\";\nimport { poolTypeV6 } from \"./config\";\n\nconst logger = createLogger(\"Raydium_farm_instruction\");\n\nconst anchorDataBuf = {\n  voterStakeRegistryCreateVoter: Buffer.from([6, 24, 245, 52, 243, 255, 148, 25]), // CreateVoter\n  voterStakeRegistryCreateDepositEntry: Buffer.from([185, 131, 167, 186, 159, 125, 19, 67]), // CreateDepositEntry\n  voterStakeRegistryDeposit: Buffer.from([242, 35, 198, 137, 82, 225, 242, 182]), // Deposit\n  voterStakeRegistryWithdraw: Buffer.from([183, 18, 70, 156, 148, 109, 161, 34]), // Withdraw\n  voterStakeRegistryUpdateVoterWeightRecord: Buffer.from([45, 185, 3, 36, 109, 190, 115, 169]), // UpdateVoterWeightRecord\n};\n\nexport function createAssociatedLedgerAccountInstruction(params: {\n  version: number;\n  id: PublicKey;\n  programId: PublicKey;\n  ledger: PublicKey;\n  owner: PublicKey;\n}): InstructionReturn {\n  const { version, id, ledger, programId, owner } = params;\n  const instruction = { 3: 9, 5: 10 }[version];\n  if (!instruction) logger.logWithError(`invalid farm pool version: ${version}`);\n\n  const data = Buffer.alloc(associatedLedgerAccountLayout.span);\n  associatedLedgerAccountLayout.encode(\n    {\n      instruction: instruction!,\n    },\n    data,\n  );\n\n  const keys = [\n    accountMeta({ pubkey: id }),\n    accountMeta({ pubkey: ledger }),\n    accountMeta({ pubkey: owner, isWritable: false }),\n    accountMeta({ pubkey: SystemProgram.programId, isWritable: false }),\n    accountMeta({ pubkey: SYSVAR_RENT_PUBKEY, isWritable: false }),\n  ];\n\n  return {\n    instruction: new TransactionInstruction({\n      programId,\n      keys,\n      data,\n    }),\n    instructionType: InstructionType.FarmV3CreateLedger,\n  };\n}\n\ninterface CreateFarmInstruction {\n  farmId: PublicKey;\n  farmAuthority: PublicKey;\n  lpVault: PublicKey;\n  lpMint: PublicKey;\n  lockVault: PublicKey;\n  lockMint: PublicKey;\n  lockUserAccount?: PublicKey;\n  programId: PublicKey;\n  owner: PublicKey;\n  rewardInfo: RewardInfoKey[];\n  rewardInfoConfig: FarmRewardInfoConfig[];\n  nonce: number;\n}\nexport function makeCreateFarmInstruction(params: CreateFarmInstruction): InstructionReturn {\n  const data = Buffer.alloc(farmRewardLayout.span);\n  farmRewardLayout.encode(\n    {\n      instruction: 0,\n      nonce: new BN(params.nonce),\n      rewardTimeInfo: params.rewardInfoConfig,\n    },\n    data,\n  );\n\n  const keys = [\n    ...commonSystemAccountMeta,\n    accountMeta({ pubkey: params.farmId }),\n    accountMeta({ pubkey: params.farmAuthority, isWritable: false }),\n    accountMeta({ pubkey: params.lpVault }),\n    accountMeta({ pubkey: params.lpMint, isWritable: false }),\n    accountMeta({ pubkey: params.lockVault }),\n    accountMeta({ pubkey: params.lockMint, isWritable: false }),\n    accountMeta({ pubkey: params.lockUserAccount ?? SOLMint }),\n    accountMeta({ pubkey: params.owner, isWritable: false, isSigner: true }),\n  ];\n\n  for (const item of params.rewardInfo) {\n    keys.push(\n      ...[\n        accountMeta({ pubkey: item.rewardMint, isWritable: false }),\n        accountMeta({ pubkey: item.rewardVault }),\n        accountMeta({ pubkey: item.userRewardToken }),\n      ],\n    );\n  }\n\n  return {\n    instruction: new TransactionInstruction({ programId: params.programId, keys, data }),\n    instructionType: InstructionType.FarmV6Create,\n  };\n}\n\ninterface CreatorWithdrawFarmRewardInstruction {\n  id: PublicKey;\n  programId: PublicKey;\n  authority: PublicKey;\n  lpVault: PublicKey;\n  rewardVault: PublicKey;\n  userRewardToken: PublicKey;\n  owner: PublicKey;\n}\n\nexport function makeCreatorWithdrawFarmRewardInstruction(\n  params: CreatorWithdrawFarmRewardInstruction,\n): InstructionReturn {\n  const data = Buffer.alloc(withdrawRewardLayout.span);\n  withdrawRewardLayout.encode({ instruction: 5 }, data);\n\n  const keys = [\n    accountMeta({ pubkey: TOKEN_PROGRAM_ID, isWritable: false }),\n    accountMeta({ pubkey: params.id }),\n    accountMeta({ pubkey: params.authority, isWritable: false }),\n    accountMeta({ pubkey: params.lpVault, isWritable: false }),\n    accountMeta({ pubkey: params.rewardVault }),\n    accountMeta({ pubkey: params.userRewardToken }),\n    accountMeta({ pubkey: params.owner, isWritable: false, isSigner: true }),\n  ];\n\n  return {\n    instruction: new TransactionInstruction({ programId: params.programId, keys, data }),\n    instructionType: InstructionType.FarmV6CreatorWithdraw,\n  };\n}\n\nexport function voterStakeRegistryDeposit(\n  programId: PublicKey,\n  registrar: PublicKey,\n  voter: PublicKey,\n  voterVault: PublicKey,\n  depositToken: PublicKey,\n  depositAuthority: PublicKey,\n\n  userStakerInfoV2: PublicKey,\n  pool: PublicKey,\n  votingMint: PublicKey,\n  votingMintAuthority: PublicKey,\n  stakeProgramId: PublicKey,\n\n  depositEntryIndex: number,\n  amount: BN,\n): TransactionInstruction {\n  const dataLayout = struct([u8(\"depositEntryIndex\"), u64(\"amount\")]);\n\n  const keys = [\n    { pubkey: registrar, isSigner: false, isWritable: false },\n    { pubkey: voter, isSigner: false, isWritable: true },\n    { pubkey: voterVault, isSigner: false, isWritable: true },\n    { pubkey: depositToken, isSigner: false, isWritable: true },\n    { pubkey: depositAuthority, isSigner: false, isWritable: false },\n    { pubkey: TOKEN_PROGRAM_ID, isSigner: false, isWritable: false },\n\n    { pubkey: userStakerInfoV2, isSigner: false, isWritable: true },\n    { pubkey: pool, isSigner: false, isWritable: false },\n    { pubkey: votingMint, isSigner: false, isWritable: true },\n\n    { pubkey: votingMintAuthority, isSigner: false, isWritable: false },\n    { pubkey: stakeProgramId, isSigner: false, isWritable: false },\n    { pubkey: INSTRUCTION_PROGRAM_ID, isSigner: false, isWritable: false },\n  ];\n\n  const data = Buffer.alloc(dataLayout.span);\n  dataLayout.encode(\n    {\n      depositEntryIndex,\n      amount,\n    },\n    data,\n  );\n  const aData = Buffer.from([...anchorDataBuf.voterStakeRegistryDeposit, ...data]);\n\n  return new TransactionInstruction({\n    keys,\n    programId,\n    data: aData,\n  });\n}\n\nexport function voterStakeRegistryUpdateVoterWeightRecord(\n  programId: PublicKey,\n  registrar: PublicKey,\n  voter: PublicKey,\n  voterWeightRecord: PublicKey,\n): TransactionInstruction {\n  const dataLayout = struct([]);\n\n  const keys = [\n    { pubkey: registrar, isSigner: false, isWritable: false },\n    { pubkey: voter, isSigner: false, isWritable: false },\n    { pubkey: voterWeightRecord, isSigner: false, isWritable: true },\n    { pubkey: SystemProgram.programId, isSigner: false, isWritable: false },\n  ];\n\n  const data = Buffer.alloc(dataLayout.span);\n  dataLayout.encode({}, data);\n  const aData = Buffer.from([...anchorDataBuf.voterStakeRegistryUpdateVoterWeightRecord, ...data]);\n\n  return new TransactionInstruction({\n    keys,\n    programId,\n    data: aData,\n  });\n}\n\nexport function voterStakeRegistryWithdraw(\n  programId: PublicKey,\n  registrar: PublicKey,\n  voter: PublicKey,\n  voterAuthority: PublicKey,\n  tokenOwnerRecord: PublicKey,\n  voterWeightRecord: PublicKey,\n  vault: PublicKey,\n  destination: PublicKey,\n\n  userStakerInfoV2: PublicKey,\n  pool: PublicKey,\n  votingMint: PublicKey,\n  votingMintAuthority: PublicKey,\n  stakeProgramId: PublicKey,\n\n  depositEntryIndex: number,\n  amount: BN,\n): TransactionInstruction {\n  const dataLayout = struct([u8(\"depositEntryIndex\"), u64(\"amount\")]);\n\n  const keys = [\n    { pubkey: registrar, isSigner: false, isWritable: false },\n    { pubkey: voter, isSigner: false, isWritable: true },\n    { pubkey: voterAuthority, isSigner: true, isWritable: false },\n    { pubkey: tokenOwnerRecord, isSigner: false, isWritable: false },\n\n    { pubkey: voterWeightRecord, isSigner: false, isWritable: true },\n    { pubkey: vault, isSigner: false, isWritable: true },\n    { pubkey: destination, isSigner: false, isWritable: true },\n    { pubkey: TOKEN_PROGRAM_ID, isSigner: false, isWritable: false },\n\n    { pubkey: userStakerInfoV2, isSigner: false, isWritable: true },\n    { pubkey: pool, isSigner: false, isWritable: false },\n    { pubkey: votingMint, isSigner: false, isWritable: true },\n\n    { pubkey: votingMintAuthority, isSigner: false, isWritable: false },\n    { pubkey: stakeProgramId, isSigner: false, isWritable: false },\n    { pubkey: INSTRUCTION_PROGRAM_ID, isSigner: false, isWritable: false },\n  ];\n\n  const data = Buffer.alloc(dataLayout.span);\n  dataLayout.encode(\n    {\n      depositEntryIndex,\n      amount,\n    },\n    data,\n  );\n  const aData = Buffer.from([...anchorDataBuf.voterStakeRegistryWithdraw, ...data]);\n\n  return new TransactionInstruction({\n    keys,\n    programId,\n    data: aData,\n  });\n}\n\nexport function governanceCreateTokenOwnerRecord(\n  programId: PublicKey,\n  realm: PublicKey,\n  governingTokenOwner: PublicKey,\n  governingTokenMint: PublicKey,\n  payer: PublicKey,\n  tokenOwnerRecordAddress: PublicKey,\n): TransactionInstruction {\n  const dataLayout = struct([u8(\"ins\")]);\n\n  const keys = [\n    { pubkey: realm, isSigner: false, isWritable: false },\n    { pubkey: governingTokenOwner, isSigner: false, isWritable: false },\n\n    { pubkey: tokenOwnerRecordAddress, isSigner: false, isWritable: true },\n\n    { pubkey: governingTokenMint, isSigner: false, isWritable: false },\n\n    { pubkey: payer, isSigner: true, isWritable: true },\n\n    { pubkey: SystemProgram.programId, isSigner: false, isWritable: false },\n  ];\n\n  const data = Buffer.alloc(dataLayout.span);\n  dataLayout.encode({ ins: 23 }, data);\n\n  return new TransactionInstruction({\n    keys,\n    programId,\n    data,\n  });\n}\n\nexport function voterStakeRegistryCreateVoter(\n  programId: PublicKey,\n  registrar: PublicKey,\n  voter: PublicKey,\n  voterWeightRecord: PublicKey,\n  voterAuthority: PublicKey,\n  payer: PublicKey,\n\n  voterBump: number,\n  voterWeightRecordBump: number,\n): TransactionInstruction {\n  const dataLayout = struct([u8(\"voterBump\"), u8(\"voterWeightRecordBump\")]);\n\n  const keys = [\n    { pubkey: registrar, isSigner: false, isWritable: false },\n    { pubkey: voter, isSigner: false, isWritable: true },\n    { pubkey: voterAuthority, isSigner: true, isWritable: false },\n    { pubkey: voterWeightRecord, isSigner: false, isWritable: true },\n    { pubkey: payer, isSigner: true, isWritable: true },\n    { pubkey: SystemProgram.programId, isSigner: false, isWritable: false },\n    { pubkey: RENT_PROGRAM_ID, isSigner: false, isWritable: false },\n    { pubkey: INSTRUCTION_PROGRAM_ID, isSigner: false, isWritable: false },\n  ];\n\n  const data = Buffer.alloc(dataLayout.span);\n  dataLayout.encode({ voterBump, voterWeightRecordBump }, data);\n  const aData = Buffer.from([...anchorDataBuf.voterStakeRegistryCreateVoter, ...data]);\n\n  return new TransactionInstruction({\n    keys,\n    programId,\n    data: aData,\n  });\n}\n\nexport function voterStakeRegistryCreateDepositEntry(\n  programId: PublicKey,\n  registrar: PublicKey,\n  voter: PublicKey,\n  voterVault: PublicKey,\n  voterAuthority: PublicKey,\n  payer: PublicKey,\n  depositMint: PublicKey,\n\n  depositEntryIndex: number,\n  kind: number,\n  startTs: BN | undefined,\n  periods: number,\n  allowClawback: boolean,\n): TransactionInstruction {\n  const dataLayout = struct([\n    u8(\"depositEntryIndex\"),\n    u8(\"kind\"),\n    u8(\"option\"),\n    u64(\"startTs\"),\n    u32(\"periods\"),\n    bool(\"allowClawback\"),\n  ]);\n\n  const keys = [\n    { pubkey: registrar, isSigner: false, isWritable: false },\n    { pubkey: voter, isSigner: false, isWritable: true },\n    { pubkey: voterVault, isSigner: false, isWritable: true },\n    { pubkey: voterAuthority, isSigner: true, isWritable: false },\n    { pubkey: payer, isSigner: true, isWritable: true },\n    { pubkey: depositMint, isSigner: false, isWritable: false },\n    { pubkey: SystemProgram.programId, isSigner: false, isWritable: false },\n    { pubkey: TOKEN_PROGRAM_ID, isSigner: false, isWritable: false },\n    { pubkey: ASSOCIATED_TOKEN_PROGRAM_ID, isSigner: false, isWritable: false },\n    { pubkey: RENT_PROGRAM_ID, isSigner: false, isWritable: false },\n  ];\n\n  const data = Buffer.alloc(dataLayout.span);\n  dataLayout.encode(\n    {\n      depositEntryIndex,\n      kind,\n      option: startTs === undefined ? 0 : 1,\n      startTs: startTs!,\n      periods,\n      allowClawback,\n    },\n    data,\n  );\n  const aData = Buffer.from([...anchorDataBuf.voterStakeRegistryCreateDepositEntry, ...data]);\n\n  return new TransactionInstruction({\n    keys,\n    programId,\n    data: aData,\n  });\n}\n\nexport async function makeDepositTokenInstruction({\n  connection,\n  programId,\n  governanceProgramId,\n  voteWeightAddinProgramId,\n  realm,\n  communityTokenMint,\n  owner,\n  poolId,\n  tokenProgram,\n}: {\n  connection: Connection;\n  programId: PublicKey;\n  governanceProgramId: PublicKey;\n  voteWeightAddinProgramId: PublicKey;\n  realm: PublicKey;\n  communityTokenMint: PublicKey;\n  owner: PublicKey;\n  poolId: PublicKey;\n  tokenProgram?: PublicKey;\n}): Promise<TransactionInstruction[]> {\n  const registrar = getRegistrarAddress(voteWeightAddinProgramId, realm, communityTokenMint).publicKey;\n  const ownerPda = getAssociatedLedgerAccount({ programId, poolId, owner, version: 3 });\n  const ownerAccountInfo = await connection.getAccountInfo(ownerPda);\n  if (ownerAccountInfo === null) {\n    throw Error(\"user is not staker\");\n  }\n  const ownerInfo = farmLedgerLayoutV3_2.decode(ownerAccountInfo.data);\n  const mintAmount = ownerInfo.deposited.sub(ownerInfo.voteLockedBalance);\n  console.log(\"amount\", mintAmount.toString());\n  if (mintAmount.eq(new BN(0))) {\n    throw Error(\"user do not has new stake amount\");\n  }\n\n  const votingMint = getVotingTokenMint(programId, poolId).publicKey;\n  const votingMintAuthority = getVotingMintAuthority(programId, poolId).publicKey;\n  const { publicKey: voter, nonce: voterBump } = getVoterAddress(voteWeightAddinProgramId, registrar, owner);\n  const voterVault = getATAAddress(voter, votingMint, tokenProgram).publicKey;\n\n  const { publicKey: voterWeightRecord, nonce: voterWeightRecordBump } = getVoterWeightRecordAddress(\n    voteWeightAddinProgramId,\n    registrar,\n    owner,\n  );\n\n  const tokenOwnerRecordAddress = getTokenOwnerRecordAddress(\n    governanceProgramId,\n    realm,\n    communityTokenMint,\n    owner,\n  ).publicKey;\n\n  const instructions: TransactionInstruction[] = [];\n\n  const depositToken = getATAAddress(owner, votingMint, tokenProgram).publicKey;\n  const depositTokenAccountInfo = await connection.getAccountInfo(depositToken);\n  if (depositTokenAccountInfo === null) {\n    instructions.push(createAssociatedTokenAccountInstruction(owner, depositToken, owner, votingMint));\n  }\n  const voterAccountInfo = await connection.getAccountInfo(voter);\n  if (voterAccountInfo === null) {\n    const createTokenOwnerRecodeIns = governanceCreateTokenOwnerRecord(\n      governanceProgramId,\n      realm,\n      owner,\n      communityTokenMint,\n      owner,\n      tokenOwnerRecordAddress,\n    );\n\n    instructions.push(\n      createTokenOwnerRecodeIns,\n      voterStakeRegistryCreateVoter(\n        voteWeightAddinProgramId,\n        registrar,\n        voter,\n        voterWeightRecord,\n        owner,\n        owner,\n        voterBump,\n        voterWeightRecordBump,\n      ),\n    );\n  }\n\n  const { index: depositEntryIndex, isInit: depositEntryInit } = await getDepositEntryIndex(\n    connection,\n    registrar,\n    voter,\n    votingMint,\n  );\n  if (!depositEntryInit) {\n    instructions.push(\n      voterStakeRegistryCreateDepositEntry(\n        voteWeightAddinProgramId,\n        registrar,\n        voter,\n        voterVault,\n        owner,\n        owner,\n        votingMint,\n\n        depositEntryIndex,\n        0,\n        undefined,\n        0,\n        false,\n      ),\n    );\n  }\n\n  instructions.push(\n    voterStakeRegistryDeposit(\n      voteWeightAddinProgramId,\n      registrar,\n      voter,\n      voterVault,\n      depositToken,\n      owner,\n\n      ownerPda,\n      poolId,\n      votingMint,\n      votingMintAuthority,\n      programId,\n\n      depositEntryIndex,\n      mintAmount,\n    ),\n    voterStakeRegistryUpdateVoterWeightRecord(voteWeightAddinProgramId, registrar, voter, voterWeightRecord),\n  );\n\n  return instructions;\n}\n\nexport async function makeWithdrawTokenInstruction({\n  connection,\n  programId,\n  governanceProgramId,\n  voteWeightAddinProgramId,\n  realm,\n  communityTokenMint,\n  owner,\n  poolId,\n  tokenProgram,\n}: {\n  connection: Connection;\n  programId: PublicKey;\n\n  governanceProgramId: PublicKey;\n  voteWeightAddinProgramId: PublicKey;\n  realm: PublicKey;\n  communityTokenMint: PublicKey;\n  owner: PublicKey;\n  poolId: PublicKey;\n  tokenProgram?: PublicKey;\n}): Promise<TransactionInstruction[]> {\n  const registrar = getRegistrarAddress(voteWeightAddinProgramId, realm, communityTokenMint).publicKey;\n  const ownerPda = getAssociatedLedgerAccount({ programId, poolId, owner, version: 3 });\n  const ownerAccountInfo = await connection.getAccountInfo(ownerPda);\n  if (ownerAccountInfo === null) {\n    throw Error(\"user is not staker\");\n  }\n  const ownerInfo = farmLedgerLayoutV3_2.decode(ownerAccountInfo.data);\n  if (ownerInfo.voteLockedBalance.eq(new BN(0))) {\n    throw Error(\"user has vote locked balance = 0\");\n  }\n\n  const votingMint = getVotingTokenMint(programId, poolId).publicKey;\n  const votingMintAuthority = getVotingMintAuthority(programId, poolId).publicKey;\n  const { publicKey: voter } = getVoterAddress(voteWeightAddinProgramId, registrar, owner);\n  const voterVault = getATAAddress(voter, votingMint, tokenProgram).publicKey;\n  const { publicKey: voterWeightRecord } = getVoterWeightRecordAddress(voteWeightAddinProgramId, registrar, owner);\n\n  const tokenOwnerRecordAddress = getTokenOwnerRecordAddress(\n    governanceProgramId,\n    realm,\n    communityTokenMint,\n    owner,\n  ).publicKey;\n\n  const instructions: TransactionInstruction[] = [];\n\n  const { index: depositEntryIndex, isInit: depositEntryInit } = await getDepositEntryIndex(\n    connection,\n    registrar,\n    voter,\n    votingMint,\n  );\n  if (!depositEntryInit) throw Error(\"deposit entry index check error\");\n\n  instructions.push(\n    voterStakeRegistryWithdraw(\n      voteWeightAddinProgramId,\n      registrar,\n      voter,\n      owner,\n      tokenOwnerRecordAddress,\n      voterWeightRecord,\n      voterVault,\n      getATAAddress(owner, votingMint, tokenProgram).publicKey,\n      ownerPda,\n      poolId,\n      votingMint,\n      votingMintAuthority,\n      programId,\n\n      depositEntryIndex,\n      ownerInfo.voteLockedBalance,\n    ),\n  );\n\n  return instructions;\n}\n\nexport function makeRestartRewardInstruction({\n  payer,\n  rewardVault,\n  userRewardTokenPub,\n  farmKeys,\n  rewardInfo,\n}: {\n  payer: PublicKey;\n  rewardVault: PublicKey;\n  userRewardTokenPub: PublicKey;\n  farmKeys: {\n    id: PublicKey;\n    programId: PublicKey;\n    lpVault: PublicKey;\n  };\n  rewardInfo: {\n    openTime: number;\n    endTime: number;\n    perSecond: string;\n  };\n}): TransactionInstruction {\n  const data = Buffer.alloc(farmRewardRestartLayout.span);\n  farmRewardRestartLayout.encode(\n    {\n      instruction: 3,\n      rewardReopenTime: parseBigNumberish(rewardInfo.openTime),\n      rewardEndTime: parseBigNumberish(rewardInfo.endTime),\n      rewardPerSecond: parseBigNumberish(rewardInfo.perSecond),\n    },\n    data,\n  );\n\n  const keys = [\n    accountMeta({ pubkey: TOKEN_PROGRAM_ID, isWritable: false }),\n    accountMeta({ pubkey: farmKeys.id }),\n    accountMeta({ pubkey: farmKeys.lpVault, isWritable: false }),\n    accountMeta({ pubkey: rewardVault }),\n    accountMeta({ pubkey: userRewardTokenPub! }),\n    accountMeta({ pubkey: payer, isWritable: false, isSigner: true }),\n  ];\n\n  return new TransactionInstruction({ programId: farmKeys.programId, keys, data });\n}\n\nexport function makeAddNewRewardInstruction({\n  payer,\n  userRewardTokenPub,\n  farmKeys,\n  rewardVault,\n  rewardInfo,\n}: {\n  payer: PublicKey;\n  userRewardTokenPub: PublicKey;\n  rewardVault: PublicKey;\n  farmKeys: {\n    id: PublicKey;\n    programId: PublicKey;\n    authority: PublicKey;\n  };\n  rewardInfo: {\n    mint: PublicKey;\n    openTime: number;\n    endTime: number;\n    perSecond: string;\n    rewardType: RewardType;\n  };\n}): TransactionInstruction {\n  const data = Buffer.alloc(farmAddRewardLayout.span);\n  farmAddRewardLayout.encode(\n    {\n      instruction: 4,\n      isSet: new BN(1),\n      rewardPerSecond: parseBigNumberish(rewardInfo.perSecond),\n      rewardOpenTime: parseBigNumberish(rewardInfo.openTime),\n      rewardEndTime: parseBigNumberish(rewardInfo.endTime),\n      rewardType: parseBigNumberish(poolTypeV6[rewardInfo.rewardType]),\n    },\n    data,\n  );\n\n  const keys = [\n    ...commonSystemAccountMeta,\n    accountMeta({ pubkey: farmKeys.id }),\n    accountMeta({ pubkey: farmKeys.authority, isWritable: false }),\n    accountMeta({ pubkey: rewardInfo.mint, isWritable: false }),\n    accountMeta({ pubkey: rewardVault }),\n    accountMeta({ pubkey: userRewardTokenPub! }),\n    accountMeta({ pubkey: payer, isWritable: false, isSigner: true }),\n  ];\n\n  return new TransactionInstruction({ programId: farmKeys.programId, keys, data });\n}\n\nexport function makeDepositWithdrawInstruction(params: {\n  instruction: number;\n  amount: BN;\n  farmInfo: { id: string; programId: string };\n  farmKeys: FormatFarmKeyOut;\n  lpAccount: PublicKey;\n  owner: PublicKey;\n  rewardAccounts: PublicKey[];\n  deposit?: boolean;\n  version: 3 | 5 | 6;\n}): TransactionInstruction {\n  const { farmInfo, farmKeys, version, lpAccount, rewardAccounts, owner, instruction, amount, deposit } = params;\n\n  const [programId, id] = [new PublicKey(farmInfo.programId), new PublicKey(farmInfo.id)];\n\n  const ledgerAddress = getAssociatedLedgerAccount({\n    programId,\n    poolId: id,\n    owner,\n    version,\n  });\n\n  const data = Buffer.alloc(dwLayout.span);\n  dwLayout.encode(\n    {\n      instruction,\n      amount,\n    },\n    data,\n  );\n\n  const keys =\n    version === 6\n      ? [\n          accountMeta({ pubkey: TOKEN_PROGRAM_ID, isWritable: false }),\n          ...(deposit ? [accountMeta({ pubkey: SystemProgram.programId, isWritable: false })] : []),\n          accountMeta({ pubkey: id }),\n          accountMeta({ pubkey: new PublicKey(farmKeys.authority), isWritable: false }),\n          accountMeta({ pubkey: new PublicKey(farmKeys.lpVault) }),\n          accountMeta({ pubkey: ledgerAddress }),\n          accountMeta({ pubkey: owner, isWritable: false, isSigner: true }),\n          accountMeta({ pubkey: lpAccount }),\n        ]\n      : [\n          accountMeta({ pubkey: id }),\n          accountMeta({ pubkey: new PublicKey(farmKeys.authority), isWritable: false }),\n          accountMeta({ pubkey: ledgerAddress }),\n          accountMeta({ pubkey: owner, isWritable: false, isSigner: true }),\n          accountMeta({ pubkey: lpAccount }),\n          accountMeta({ pubkey: new PublicKey(farmKeys.lpVault) }),\n          accountMeta({ pubkey: rewardAccounts[0] }),\n          accountMeta({ pubkey: new PublicKey(farmKeys.rewardInfos[0].vault) }),\n          // system\n          accountMeta({ pubkey: SYSVAR_CLOCK_PUBKEY, isWritable: false }),\n          accountMeta({ pubkey: TOKEN_PROGRAM_ID, isWritable: false }),\n        ];\n\n  if (version === 5) {\n    for (let index = 1; index < farmKeys.rewardInfos.length; index++) {\n      keys.push(accountMeta({ pubkey: rewardAccounts[index] }));\n      keys.push(accountMeta({ pubkey: new PublicKey(farmKeys.rewardInfos[index].vault) }));\n    }\n  }\n\n  if (version === 6) {\n    for (let index = 0; index < farmKeys.rewardInfos.length; index++) {\n      keys.push(accountMeta({ pubkey: new PublicKey(farmKeys.rewardInfos[index].vault) }));\n      keys.push(accountMeta({ pubkey: rewardAccounts[index] }));\n    }\n  }\n\n  return new TransactionInstruction({ programId, keys, data });\n}\n\ninterface DepositWithdrawParams {\n  amount: BN;\n  farmInfo: { id: string; programId: string };\n  farmKeys: FormatFarmKeyOut;\n  lpAccount: PublicKey;\n  owner: PublicKey;\n  rewardAccounts: PublicKey[];\n  userAuxiliaryLedgers?: PublicKey[];\n}\n\nexport function makeWithdrawInstructionV6(params: DepositWithdrawParams): TransactionInstruction {\n  const { farmInfo, farmKeys, lpAccount, rewardAccounts, owner, amount } = params;\n  const [programId, id] = [new PublicKey(farmInfo.programId), new PublicKey(farmInfo.id)];\n\n  const ledgerAddress = getAssociatedLedgerAccount({\n    programId,\n    poolId: id,\n    owner,\n    version: 6,\n  });\n\n  const data = Buffer.alloc(dwLayout.span);\n  dwLayout.encode(\n    {\n      instruction: 2,\n      amount: parseBigNumberish(amount),\n    },\n    data,\n  );\n\n  const keys = [\n    accountMeta({ pubkey: TOKEN_PROGRAM_ID, isWritable: false }),\n\n    accountMeta({ pubkey: id }),\n\n    accountMeta({ pubkey: new PublicKey(farmKeys.authority), isWritable: false }),\n    accountMeta({ pubkey: new PublicKey(farmKeys.lpVault) }),\n    accountMeta({ pubkey: ledgerAddress }),\n    accountMeta({ pubkey: owner, isWritable: false, isSigner: true }),\n    accountMeta({ pubkey: lpAccount }),\n  ];\n\n  for (let index = 0; index < farmKeys.rewardInfos.length; index++) {\n    keys.push(accountMeta({ pubkey: new PublicKey(farmKeys.rewardInfos[index].vault) }));\n    keys.push(accountMeta({ pubkey: rewardAccounts[index] }));\n  }\n\n  return new TransactionInstruction({ programId, keys, data });\n}\n\nexport function makeWithdrawInstructionV5(params: DepositWithdrawParams): TransactionInstruction {\n  const { farmInfo, farmKeys, lpAccount, rewardAccounts, owner, amount, userAuxiliaryLedgers } = params;\n  const [programId, id] = [new PublicKey(farmInfo.programId), new PublicKey(farmInfo.id)];\n\n  const ledgerAddress = getAssociatedLedgerAccount({\n    programId,\n    poolId: id,\n    owner,\n    version: 5,\n  });\n\n  const data = Buffer.alloc(dwLayout.span);\n  dwLayout.encode(\n    {\n      instruction: 12,\n      amount: parseBigNumberish(amount),\n    },\n    data,\n  );\n\n  const keys = [\n    accountMeta({ pubkey: id }),\n    accountMeta({ pubkey: new PublicKey(farmKeys.authority), isWritable: false }),\n    accountMeta({ pubkey: ledgerAddress }),\n    accountMeta({ pubkey: owner, isWritable: false, isSigner: true }),\n    accountMeta({ pubkey: lpAccount }),\n    accountMeta({ pubkey: new PublicKey(farmKeys.lpVault) }),\n    accountMeta({ pubkey: rewardAccounts[0] }),\n    accountMeta({ pubkey: new PublicKey(farmKeys.rewardInfos[0].vault) }),\n    // system\n    accountMeta({ pubkey: SYSVAR_CLOCK_PUBKEY, isWritable: false }),\n    accountMeta({ pubkey: TOKEN_PROGRAM_ID, isWritable: false }),\n  ];\n\n  for (let index = 1; index < farmKeys.rewardInfos.length; index++) {\n    keys.push(accountMeta({ pubkey: rewardAccounts[index] }));\n    keys.push(accountMeta({ pubkey: new PublicKey(farmKeys.rewardInfos[index].vault) }));\n  }\n\n  if (userAuxiliaryLedgers) {\n    for (const auxiliaryLedger of userAuxiliaryLedgers) {\n      keys.push(accountMeta({ pubkey: auxiliaryLedger }));\n    }\n  }\n\n  return new TransactionInstruction({ programId, keys, data });\n}\n\nexport function makeWithdrawInstructionV3(params: DepositWithdrawParams): TransactionInstruction {\n  const { farmInfo, farmKeys, lpAccount, rewardAccounts, owner, amount, userAuxiliaryLedgers } = params;\n  const [programId, id] = [new PublicKey(farmInfo.programId), new PublicKey(farmInfo.id)];\n\n  const ledgerAddress = getAssociatedLedgerAccount({\n    programId,\n    poolId: id,\n    owner,\n    version: 3,\n  });\n\n  const data = Buffer.alloc(dwLayout.span);\n  dwLayout.encode(\n    {\n      instruction: 11,\n      amount: parseBigNumberish(amount),\n    },\n    data,\n  );\n\n  const keys = [\n    accountMeta({ pubkey: id }),\n    accountMeta({ pubkey: new PublicKey(farmKeys.authority), isWritable: false }),\n    accountMeta({ pubkey: ledgerAddress }),\n    accountMeta({ pubkey: owner, isWritable: false, isSigner: true }),\n    accountMeta({ pubkey: lpAccount }),\n    accountMeta({ pubkey: new PublicKey(farmKeys.lpVault) }),\n    accountMeta({ pubkey: rewardAccounts[0] }),\n    accountMeta({ pubkey: new PublicKey(farmKeys.rewardInfos[0].vault) }),\n    // system\n    accountMeta({ pubkey: SYSVAR_CLOCK_PUBKEY, isWritable: false }),\n    accountMeta({ pubkey: TOKEN_PROGRAM_ID, isWritable: false }),\n  ];\n\n  if (userAuxiliaryLedgers) {\n    for (const auxiliaryLedger of userAuxiliaryLedgers) {\n      keys.push(accountMeta({ pubkey: auxiliaryLedger }));\n    }\n  }\n\n  return new TransactionInstruction({ programId, keys, data });\n}\n\nexport function makeDepositInstructionV3(params: DepositWithdrawParams): TransactionInstruction {\n  const { farmInfo, farmKeys, lpAccount, rewardAccounts, owner, amount, userAuxiliaryLedgers } = params;\n  const [programId, id] = [new PublicKey(farmInfo.programId), new PublicKey(farmInfo.id)];\n\n  const ledgerAddress = getAssociatedLedgerAccount({\n    programId,\n    poolId: id,\n    owner,\n    version: 3,\n  });\n\n  const data = Buffer.alloc(dwLayout.span);\n  dwLayout.encode(\n    {\n      instruction: 10,\n      amount: parseBigNumberish(amount),\n    },\n    data,\n  );\n\n  const keys = [\n    accountMeta({ pubkey: id }),\n    accountMeta({ pubkey: new PublicKey(farmKeys.authority), isWritable: false }),\n    accountMeta({ pubkey: ledgerAddress }),\n    accountMeta({ pubkey: owner, isWritable: false, isSigner: true }),\n    accountMeta({ pubkey: lpAccount }),\n    accountMeta({ pubkey: new PublicKey(farmKeys.lpVault) }),\n    accountMeta({ pubkey: rewardAccounts[0] }),\n    accountMeta({ pubkey: new PublicKey(farmKeys.rewardInfos[0].vault) }),\n    // system\n    accountMeta({ pubkey: SYSVAR_CLOCK_PUBKEY, isWritable: false }),\n    accountMeta({ pubkey: TOKEN_PROGRAM_ID, isWritable: false }),\n  ];\n\n  if (userAuxiliaryLedgers) {\n    for (const auxiliaryLedger of userAuxiliaryLedgers) {\n      keys.push(accountMeta({ pubkey: auxiliaryLedger }));\n    }\n  }\n\n  return new TransactionInstruction({ programId, keys, data });\n}\n\nexport function makeDepositInstructionV5(params: DepositWithdrawParams): TransactionInstruction {\n  const { farmInfo, farmKeys, lpAccount, rewardAccounts, owner, amount, userAuxiliaryLedgers } = params;\n  const [programId, id] = [new PublicKey(farmInfo.programId), new PublicKey(farmInfo.id)];\n\n  const ledgerAddress = getAssociatedLedgerAccount({\n    programId,\n    poolId: id,\n    owner,\n    version: 5,\n  });\n\n  const data = Buffer.alloc(dwLayout.span);\n  dwLayout.encode(\n    {\n      instruction: 11,\n      amount: parseBigNumberish(amount),\n    },\n    data,\n  );\n\n  const keys = [\n    accountMeta({ pubkey: id }),\n    accountMeta({ pubkey: new PublicKey(farmKeys.authority), isWritable: false }),\n    accountMeta({ pubkey: ledgerAddress }),\n    accountMeta({ pubkey: owner, isWritable: false, isSigner: true }),\n    accountMeta({ pubkey: lpAccount }),\n    accountMeta({ pubkey: new PublicKey(farmKeys.lpVault) }),\n    accountMeta({ pubkey: rewardAccounts[0] }),\n    accountMeta({ pubkey: new PublicKey(farmKeys.rewardInfos[0].vault) }),\n    // system\n    accountMeta({ pubkey: SYSVAR_CLOCK_PUBKEY, isWritable: false }),\n    accountMeta({ pubkey: TOKEN_PROGRAM_ID, isWritable: false }),\n  ];\n\n  for (let index = 1; index < farmKeys.rewardInfos.length; index++) {\n    keys.push(accountMeta({ pubkey: rewardAccounts[index] }));\n    keys.push(accountMeta({ pubkey: new PublicKey(farmKeys.rewardInfos[index].vault) }));\n  }\n\n  if (userAuxiliaryLedgers) {\n    for (const auxiliaryLedger of userAuxiliaryLedgers) {\n      keys.push(accountMeta({ pubkey: auxiliaryLedger }));\n    }\n  }\n\n  return new TransactionInstruction({ programId, keys, data });\n}\n\nexport function makeDepositInstructionV6(params: DepositWithdrawParams): TransactionInstruction {\n  const { farmInfo, farmKeys, lpAccount, rewardAccounts, owner, amount } = params;\n  const [programId, id] = [new PublicKey(farmInfo.programId), new PublicKey(farmInfo.id)];\n\n  const ledgerAddress = getAssociatedLedgerAccount({\n    programId,\n    poolId: id,\n    owner,\n    version: 6,\n  });\n\n  const data = Buffer.alloc(dwLayout.span);\n  dwLayout.encode(\n    {\n      instruction: 1,\n      amount: parseBigNumberish(amount),\n    },\n    data,\n  );\n\n  const keys = [\n    accountMeta({ pubkey: TOKEN_PROGRAM_ID, isWritable: false }),\n    accountMeta({ pubkey: SystemProgram.programId, isWritable: false }),\n    accountMeta({ pubkey: id }),\n    accountMeta({ pubkey: new PublicKey(farmKeys.authority), isWritable: false }),\n    accountMeta({ pubkey: new PublicKey(farmKeys.lpVault) }),\n    accountMeta({ pubkey: ledgerAddress }),\n    accountMeta({ pubkey: owner, isWritable: false, isSigner: true }),\n    accountMeta({ pubkey: lpAccount }),\n  ];\n\n  for (let index = 0; index < farmKeys.rewardInfos.length; index++) {\n    keys.push(accountMeta({ pubkey: new PublicKey(farmKeys.rewardInfos[index].vault) }));\n    keys.push(accountMeta({ pubkey: rewardAccounts[index] }));\n  }\n\n  return new TransactionInstruction({ programId, keys, data });\n}\n","import { PublicKey } from \"@solana/web3.js\";\n\nimport { findProgramAddress } from \"@/common/txTool/txUtils\";\n\nexport function getRegistrarAddress(\n  programId: PublicKey,\n  realm: PublicKey,\n  communityTokenMint: PublicKey,\n): {\n  publicKey: PublicKey;\n  nonce: number;\n} {\n  return findProgramAddress(\n    [realm.toBuffer(), Buffer.from(\"registrar\", \"utf8\"), communityTokenMint.toBuffer()],\n    programId,\n  );\n}\n\nexport function getVotingTokenMint(\n  programId: PublicKey,\n  poolId: PublicKey,\n): {\n  publicKey: PublicKey;\n  nonce: number;\n} {\n  return findProgramAddress([poolId.toBuffer(), Buffer.from(\"voting_mint_seed\", \"utf8\")], programId);\n}\n\nexport function getVotingMintAuthority(\n  programId: PublicKey,\n  poolId: PublicKey,\n): {\n  publicKey: PublicKey;\n  nonce: number;\n} {\n  return findProgramAddress([poolId.toBuffer()], programId);\n}\n\nexport function getVoterAddress(\n  programId: PublicKey,\n  registrar: PublicKey,\n  authority: PublicKey,\n): {\n  publicKey: PublicKey;\n  nonce: number;\n} {\n  return findProgramAddress([registrar.toBuffer(), Buffer.from(\"voter\", \"utf8\"), authority.toBuffer()], programId);\n}\n\nexport function getVoterWeightRecordAddress(\n  programId: PublicKey,\n  registrar: PublicKey,\n  authority: PublicKey,\n): {\n  publicKey: PublicKey;\n  nonce: number;\n} {\n  return findProgramAddress(\n    [registrar.toBuffer(), Buffer.from(\"voter-weight-record\", \"utf8\"), authority.toBuffer()],\n    programId,\n  );\n}\n\nexport function getTokenOwnerRecordAddress(\n  programId: PublicKey,\n  realm: PublicKey,\n  governingTokenMint: PublicKey,\n  governingTokenOwner: PublicKey,\n): {\n  publicKey: PublicKey;\n  nonce: number;\n} {\n  return findProgramAddress(\n    [\n      Buffer.from(\"governance\", \"utf8\"),\n      realm.toBuffer(),\n      governingTokenMint.toBuffer(),\n      governingTokenOwner.toBuffer(),\n    ],\n    programId,\n  );\n}\n","import { Connection, PublicKey } from \"@solana/web3.js\";\nimport BN from \"bn.js\";\n\nimport { GetMultipleAccountsInfoConfig, getMultipleAccountsInfoWithCustomFlags } from \"@/common/accountInfo\";\nimport { parseBigNumberish } from \"@/common/bignumber\";\nimport { createLogger } from \"@/common/logger\";\nimport { findProgramAddress, ProgramAddress } from \"@/common/txTool/txUtils\";\nimport { DateParam, isDateAfter, isDateBefore } from \"@/common/date\";\nimport { jsonInfo2PoolKeys } from \"@/common/utility\";\nimport { RewardInfoV6 } from \"@/api/type\";\n\nimport { splAccountLayout } from \"../account/layout\";\nimport { SplAccount } from \"../account/types\";\nimport { FARM_VERSION_TO_LEDGER_LAYOUT, FARM_VERSION_TO_STATE_LAYOUT, poolTypeV6 } from \"./config\";\nimport { FarmLedger, FarmLedgerLayout, FarmState, FarmStateLayout } from \"./layout\";\nimport { FarmRewardInfo, FarmRewardInfoConfig } from \"./type\";\n\nimport { VoterRegistrar, Voter } from \"./layout\";\n\nconst logger = createLogger(\"Raydium.farm.util\");\ninterface AssociatedLedgerPoolAccount {\n  programId: PublicKey;\n  poolId: PublicKey;\n  mint: PublicKey;\n  type: \"lpVault\" | \"rewardVault\";\n}\n\nexport function getAssociatedLedgerPoolAccount({\n  programId,\n  poolId,\n  mint,\n  type,\n}: AssociatedLedgerPoolAccount): PublicKey {\n  const { publicKey } = findProgramAddress(\n    [\n      poolId.toBuffer(),\n      mint.toBuffer(),\n      Buffer.from(\n        type === \"lpVault\" ? \"lp_vault_associated_seed\" : type === \"rewardVault\" ? \"reward_vault_associated_seed\" : \"\",\n        \"utf-8\",\n      ),\n    ],\n    programId,\n  );\n  return publicKey;\n}\n\nexport function getAssociatedLedgerAccount({\n  programId,\n  poolId,\n  owner,\n  version,\n}: {\n  programId: PublicKey;\n  poolId: PublicKey;\n  owner: PublicKey;\n  version: 6 | 5 | 3;\n}): PublicKey {\n  const { publicKey } = findProgramAddress(\n    [\n      poolId.toBuffer(),\n      owner.toBuffer(),\n      Buffer.from(version === 6 ? \"farmer_info_associated_seed\" : \"staker_info_v2_associated_seed\", \"utf-8\"),\n    ],\n    programId,\n  );\n  return publicKey;\n}\n\nexport const getAssociatedAuthority = ({\n  programId,\n  poolId,\n}: {\n  programId: PublicKey;\n  poolId: PublicKey;\n}): ProgramAddress => findProgramAddress([poolId.toBuffer()], programId);\n\nexport function farmRewardInfoToConfig(data: FarmRewardInfo): FarmRewardInfoConfig {\n  return {\n    isSet: new BN(1),\n    rewardPerSecond: parseBigNumberish(data.perSecond),\n    rewardOpenTime: parseBigNumberish(data.openTime),\n    rewardEndTime: parseBigNumberish(data.endTime),\n    rewardType: parseBigNumberish(poolTypeV6[data.rewardType]),\n  };\n}\n\nexport function calFarmRewardAmount(data: Pick<RewardInfoV6, \"openTime\" | \"endTime\"> & { perSecond: string }): BN {\n  return parseBigNumberish(data.endTime).sub(parseBigNumberish(data.openTime)).mul(parseBigNumberish(data.perSecond));\n}\n\nexport function getFarmLedgerLayout(version: number): FarmLedgerLayout | undefined {\n  const ledgerLayout = FARM_VERSION_TO_LEDGER_LAYOUT[version];\n  if (!ledgerLayout) logger.logWithError(\"invalid version\", version);\n  return ledgerLayout;\n}\n\nexport function getFarmStateLayout(version: number): FarmStateLayout | undefined {\n  const stateLayout = FARM_VERSION_TO_STATE_LAYOUT[version];\n  if (!stateLayout) logger.logWithError(\"invalid version\", version);\n  return stateLayout;\n}\n\nexport function updateFarmPoolInfo(\n  poolInfo: FarmState,\n  lpVault: SplAccount,\n  slot: number,\n  chainTime: number,\n): FarmState {\n  if (poolInfo.version === 3 || poolInfo.version === 5) {\n    if (poolInfo.lastSlot.gte(new BN(slot))) return poolInfo;\n\n    const spread = new BN(slot).sub(poolInfo.lastSlot);\n    poolInfo.lastSlot = new BN(slot);\n\n    for (const itemRewardInfo of poolInfo.rewardInfos) {\n      if (lpVault.amount.eq(new BN(0))) continue;\n\n      const reward = itemRewardInfo.perSlotReward.mul(spread);\n      itemRewardInfo.perShareReward = itemRewardInfo.perShareReward.add(\n        reward.mul(new BN(10).pow(new BN(poolInfo.version === 3 ? 9 : 15))).div(lpVault.amount),\n      );\n      itemRewardInfo.totalReward = itemRewardInfo.totalReward.add(reward);\n    }\n  } else if (poolInfo.version === 6) {\n    for (const itemRewardInfo of poolInfo.rewardInfos) {\n      if (itemRewardInfo.rewardState.eq(new BN(0))) continue;\n      const updateTime = BN.min(new BN(chainTime), itemRewardInfo.rewardEndTime);\n      if (itemRewardInfo.rewardOpenTime.gte(updateTime)) continue;\n      const spread = updateTime.sub(itemRewardInfo.rewardLastUpdateTime);\n      let reward = spread.mul(itemRewardInfo.rewardPerSecond);\n      const leftReward = itemRewardInfo.totalReward.sub(itemRewardInfo.totalRewardEmissioned);\n      if (leftReward.lt(reward)) {\n        reward = leftReward;\n        itemRewardInfo.rewardLastUpdateTime = itemRewardInfo.rewardLastUpdateTime.add(\n          leftReward.div(itemRewardInfo.rewardPerSecond),\n        );\n      } else {\n        itemRewardInfo.rewardLastUpdateTime = updateTime;\n      }\n      if (lpVault.amount.eq(new BN(0))) continue;\n      itemRewardInfo.accRewardPerShare = itemRewardInfo.accRewardPerShare.add(\n        reward.mul(poolInfo.rewardMultiplier).div(lpVault.amount),\n      );\n      itemRewardInfo.totalRewardEmissioned = itemRewardInfo.totalRewardEmissioned.add(reward);\n    }\n  }\n  return poolInfo;\n}\n\ninterface FarmPoolsInfo {\n  [id: string]: {\n    state: FarmState;\n    lpVault: SplAccount;\n    ledger?: FarmLedger;\n    wrapped?: { pendingRewards: BN[] };\n  };\n}\n\nexport interface FarmFetchMultipleInfoParams {\n  connection: Connection;\n  farmPools: any[];\n  owner?: PublicKey;\n  config?: GetMultipleAccountsInfoConfig;\n  chainTime: number;\n}\n\nexport async function fetchMultipleFarmInfoAndUpdate({\n  connection,\n  farmPools,\n  owner,\n  config,\n  chainTime,\n}: FarmFetchMultipleInfoParams): Promise<FarmPoolsInfo> {\n  let hasNotV6Pool = false;\n  let hasV6Pool = false;\n  const tenBN = new BN(10);\n\n  const publicKeys: {\n    pubkey: PublicKey;\n    version: number;\n    key: \"state\" | \"lpVault\" | \"ledger\";\n    poolId: PublicKey;\n  }[] = [];\n\n  for (const poolInfo of farmPools) {\n    const pool = jsonInfo2PoolKeys(poolInfo);\n    if (pool.version === 6) hasV6Pool = true;\n    else hasNotV6Pool = true;\n\n    publicKeys.push(\n      {\n        pubkey: pool.id,\n        version: pool.version,\n        key: \"state\",\n        poolId: pool.id,\n      },\n      {\n        pubkey: pool.lpVault,\n        version: pool.version,\n        key: \"lpVault\",\n        poolId: pool.id,\n      },\n    );\n\n    if (owner) {\n      publicKeys.push({\n        pubkey: getAssociatedLedgerAccount({\n          programId: pool.programId,\n          poolId: pool.id,\n          owner,\n          version: poolInfo.version as 6 | 5 | 3,\n        }),\n        version: pool.version,\n        key: \"ledger\",\n        poolId: pool.id,\n      });\n    }\n  }\n\n  const poolsInfo: FarmPoolsInfo = {};\n  const accountsInfo = await getMultipleAccountsInfoWithCustomFlags(connection, publicKeys, config);\n  for (const { pubkey, version, key, poolId, accountInfo } of accountsInfo) {\n    const _poolId = poolId.toBase58();\n    poolsInfo[_poolId] = { ...poolsInfo[_poolId] };\n    if (key === \"state\") {\n      const stateLayout = getFarmStateLayout(version);\n      if (!accountInfo || !accountInfo.data || accountInfo.data.length !== stateLayout!.span)\n        logger.logWithError(`invalid farm state account info, pools.id, ${pubkey}`);\n      poolsInfo[_poolId].state = stateLayout!.decode(accountInfo!.data);\n    } else if (key === \"lpVault\") {\n      if (!accountInfo || !accountInfo.data || accountInfo.data.length !== splAccountLayout.span)\n        logger.logWithError(`invalid farm lp vault account info, pools.lpVault, ${pubkey}`);\n      poolsInfo[_poolId].lpVault = splAccountLayout.decode(accountInfo!.data);\n    } else if (key === \"ledger\") {\n      const legerLayout = getFarmLedgerLayout(version)!;\n      if (accountInfo && accountInfo.data) {\n        if (accountInfo.data.length !== legerLayout.span)\n          logger.logWithError(`invalid farm ledger account info, ledger, ${pubkey}`);\n        poolsInfo[_poolId].ledger = legerLayout.decode(accountInfo.data);\n      }\n    }\n  }\n\n  const slot = hasV6Pool || hasNotV6Pool ? await connection.getSlot() : 0;\n\n  for (const poolId of Object.keys(poolsInfo)) {\n    if (poolsInfo[poolId] === undefined) continue;\n    poolsInfo[poolId].state = updateFarmPoolInfo(poolsInfo[poolId].state, poolsInfo[poolId].lpVault, slot, chainTime);\n  }\n\n  for (const [poolId, { state, ledger }] of Object.entries(poolsInfo)) {\n    if (ledger) {\n      const multiplier =\n        state.version === 6\n          ? state.rewardMultiplier\n          : state.rewardInfos.length === 1\n          ? tenBN.pow(new BN(9))\n          : tenBN.pow(new BN(15));\n\n      const pendingRewards = state.rewardInfos.map((rewardInfo, index) => {\n        const rewardDebt = ledger.rewardDebts[index];\n        const pendingReward = ledger.deposited\n          .mul(state.version === 6 ? rewardInfo.accRewardPerShare : rewardInfo.perShareReward)\n          .div(multiplier)\n          .sub(rewardDebt);\n\n        return pendingReward;\n      });\n\n      poolsInfo[poolId].wrapped = {\n        ...poolsInfo[poolId].wrapped,\n        pendingRewards,\n      };\n    }\n  }\n\n  return poolsInfo;\n}\n/** deprecated */\nexport function judgeFarmType(\n  info: any,\n  currentTime: DateParam = Date.now(),\n): \"closed pool\" | \"normal fusion pool\" | \"dual fusion pool\" | undefined | \"upcoming pool\" {\n  if (info.version === 6) {\n    const rewardInfos = info.state.rewardInfos;\n    if (rewardInfos.every(({ rewardOpenTime }) => isDateBefore(currentTime, rewardOpenTime.toNumber(), { unit: \"s\" })))\n      return \"upcoming pool\";\n    if (rewardInfos.every(({ rewardEndTime }) => isDateAfter(currentTime, rewardEndTime.toNumber(), { unit: \"s\" })))\n      return \"closed pool\";\n  } else {\n    const perSlotRewards = info.state.rewardInfos.map(({ perSlotReward }) => perSlotReward);\n    if (perSlotRewards.length === 2) {\n      // v5\n      if (String(perSlotRewards[0]) === \"0\" && String(perSlotRewards[1]) !== \"0\") {\n        return \"normal fusion pool\"; // reward xxx token\n      }\n      if (String(perSlotRewards[0]) !== \"0\" && String(perSlotRewards[1]) !== \"0\") {\n        return \"dual fusion pool\"; // reward ray and xxx token\n      }\n      if (String(perSlotRewards[0]) === \"0\" && String(perSlotRewards[1]) === \"0\") {\n        return \"closed pool\";\n      }\n    } else if (perSlotRewards.length === 1) {\n      // v3\n      if (String(perSlotRewards[0]) === \"0\") {\n        return \"closed pool\";\n      }\n    }\n  }\n}\n\nexport async function getDepositEntryIndex(\n  connection: Connection,\n  registrar: PublicKey,\n  voter: PublicKey,\n  voterMint: PublicKey,\n): Promise<{ index: number; isInit: boolean }> {\n  const registrarAccountData = await connection.getAccountInfo(registrar);\n  if (registrarAccountData === null) throw Error(\"registrar info check error\");\n  const registrarData = VoterRegistrar.decode(registrarAccountData.data);\n\n  const votingMintConfigIndex = registrarData.votingMints.findIndex((i) => i.mint.equals(voterMint));\n\n  if (votingMintConfigIndex === -1) throw Error(\"find voter mint error\");\n\n  const voterAccountData = await connection.getAccountInfo(voter);\n  if (voterAccountData === null) return { index: votingMintConfigIndex, isInit: false }; // throw Error('voter info check error')\n\n  const voterData = Voter.decode(voterAccountData.data);\n\n  const depositEntryIndex = voterData.deposits.findIndex(\n    (i) => i.isUsed && i.votingMintConfigIdx === votingMintConfigIndex,\n  );\n  if (depositEntryIndex === -1) return { index: votingMintConfigIndex, isInit: false };\n  else return { index: depositEntryIndex, isInit: true };\n}\n","import { PublicKey } from \"@solana/web3.js\";\nimport { NATIVE_MINT, TOKEN_PROGRAM_ID } from \"@solana/spl-token\";\nimport {\n  ApiV3PoolInfoConcentratedItem,\n  ApiV3PoolInfoStandardItem,\n  AmmV4Keys,\n  AmmV5Keys,\n  FormatFarmInfoOutV6,\n} from \"@/api/type\";\nimport { Token, TokenAmount, Percent } from \"@/module\";\nimport { toToken } from \"../token\";\nimport { AMM_V4 } from \"@/common/programId\";\nimport { BN_ZERO, divCeil } from \"@/common/bignumber\";\nimport { getATAAddress } from \"@/common/pda\";\nimport { InstructionType, TxVersion } from \"@/common/txTool/txType\";\nimport { MakeMultiTxData, MakeTxData } from \"@/common/txTool/txTool\";\nimport { BNDivCeil } from \"@/common/transfer\";\n\nimport ModuleBase, { ModuleBaseProps } from \"../moduleBase\";\nimport {\n  AmountSide,\n  AddLiquidityParams,\n  RemoveParams,\n  CreatePoolParam,\n  CreatePoolAddress,\n  ComputeAmountOutParam,\n  SwapParam,\n} from \"./type\";\nimport {\n  makeAddLiquidityInstruction,\n  removeLiquidityInstruction,\n  createPoolV4InstructionV2,\n  makeAMMSwapInstruction,\n} from \"./instruction\";\nimport { ComputeBudgetConfig } from \"../type\";\nimport { ClmmInstrument } from \"../clmm/instrument\";\nimport { getAssociatedPoolKeys, getAssociatedConfigId } from \"./utils\";\nimport { createPoolFeeLayout } from \"./layout\";\nimport {\n  FARM_PROGRAM_TO_VERSION,\n  makeWithdrawInstructionV3,\n  makeWithdrawInstructionV5,\n  makeWithdrawInstructionV6,\n} from \"@/raydium/farm\";\nimport { StableLayout, getStablePrice, getDyByDxBaseIn, getDxByDyBaseIn } from \"./stable\";\nimport { LIQUIDITY_FEES_NUMERATOR, LIQUIDITY_FEES_DENOMINATOR } from \"./constant\";\n\nimport BN from \"bn.js\";\nimport Decimal from \"decimal.js\";\n\nexport default class LiquidityModule extends ModuleBase {\n  private stableLayout: StableLayout;\n\n  constructor(params: ModuleBaseProps) {\n    super(params);\n    this.stableLayout = new StableLayout({ connection: this.scope.connection });\n  }\n\n  public async initLayout(): Promise<void> {\n    await this.stableLayout.initStableModelLayout();\n  }\n\n  public async load(): Promise<void> {\n    this.checkDisabled();\n  }\n\n  public computePairAmount({\n    poolInfo,\n    amount,\n    // anotherToken,\n    slippage,\n    baseIn,\n  }: {\n    poolInfo: ApiV3PoolInfoStandardItem;\n    amount: string | Decimal;\n    slippage: Percent;\n    baseIn?: boolean;\n  }): { anotherAmount: TokenAmount; maxAnotherAmount: TokenAmount; liquidity: BN } {\n    const inputAmount = new BN(new Decimal(amount).mul(10 ** poolInfo[baseIn ? \"mintA\" : \"mintB\"].decimals).toFixed(0));\n    const _anotherToken = toToken(poolInfo[baseIn ? \"mintB\" : \"mintA\"]);\n\n    const [baseReserve, quoteReserve] = [\n      new BN(new Decimal(poolInfo.mintAmountA).mul(10 ** poolInfo.mintA.decimals).toString()),\n      new BN(new Decimal(poolInfo.mintAmountB).mul(10 ** poolInfo.mintB.decimals).toString()),\n    ];\n    const lpAmount = new BN(\n      new Decimal(poolInfo.lpAmount).mul(10 ** poolInfo.lpMint.decimals).toFixed(0, Decimal.ROUND_DOWN),\n    );\n    this.logDebug(\"baseReserve:\", baseReserve.toString(), \"quoteReserve:\", quoteReserve.toString());\n\n    this.logDebug(\n      \"tokenIn:\",\n      baseIn ? poolInfo.mintA.symbol : poolInfo.mintB.symbol,\n      \"amountIn:\",\n      inputAmount.toString(),\n      \"anotherToken:\",\n      baseIn ? poolInfo.mintB.symbol : poolInfo.mintA.symbol,\n      \"slippage:\",\n      `${slippage.toSignificant()}%`,\n      \"baseReserve\",\n      baseReserve.toString(),\n      \"quoteReserve\",\n      quoteReserve.toString(),\n    );\n\n    // input is fixed\n    const input = baseIn ? \"base\" : \"quote\";\n    this.logDebug(\"input side:\", input);\n\n    // round up\n    let amountRaw = BN_ZERO;\n    if (!inputAmount.isZero()) {\n      amountRaw =\n        input === \"base\"\n          ? divCeil(inputAmount.mul(quoteReserve), baseReserve)\n          : divCeil(inputAmount.mul(baseReserve), quoteReserve);\n    }\n\n    this.logDebug(\"amountRaw:\", amountRaw.toString(), \"lpAmount:\", lpAmount.toString());\n\n    const liquidity = divCeil(inputAmount.mul(lpAmount), input === \"base\" ? baseReserve : quoteReserve);\n\n    this.logDebug(\"liquidity:\", liquidity.toString());\n\n    const _slippage = new Percent(new BN(1)).add(slippage);\n    const slippageAdjustedAmount = _slippage.mul(amountRaw).quotient;\n\n    const _anotherAmount = new TokenAmount(_anotherToken, amountRaw);\n    const _maxAnotherAmount = new TokenAmount(_anotherToken, slippageAdjustedAmount);\n    this.logDebug(\"anotherAmount:\", _anotherAmount.toFixed(), \"maxAnotherAmount:\", _maxAnotherAmount.toFixed());\n\n    return {\n      anotherAmount: _anotherAmount,\n      maxAnotherAmount: _maxAnotherAmount,\n      liquidity,\n    };\n  }\n\n  public async getAmmPoolKeys(poolId: string): Promise<AmmV4Keys | AmmV5Keys> {\n    return ((await this.scope.api.fetchPoolKeysById({ idList: [poolId] })) as (AmmV4Keys | AmmV5Keys)[])[0];\n  }\n\n  public async addLiquidity<T extends TxVersion>(params: AddLiquidityParams<T>): Promise<MakeTxData<T>> {\n    const { poolInfo, amountInA, amountInB, fixedSide, config, txVersion, computeBudgetConfig } = params;\n\n    if (this.scope.availability.addStandardPosition === false)\n      this.logAndCreateError(\"add liquidity feature disabled in your region\");\n\n    this.logDebug(\"amountInA:\", amountInA, \"amountInB:\", amountInB);\n    if (amountInA.isZero() || amountInB.isZero())\n      this.logAndCreateError(\"amounts must greater than zero\", \"amountInA & amountInB\", {\n        amountInA: amountInA.toFixed(),\n        amountInB: amountInB.toFixed(),\n      });\n    const { account } = this.scope;\n    const { bypassAssociatedCheck, checkCreateATAOwner } = {\n      // default\n      ...{ bypassAssociatedCheck: false, checkCreateATAOwner: false },\n      // custom\n      ...config,\n    };\n    const [tokenA, tokenB] = [amountInA.token, amountInB.token];\n    const tokenAccountA = await account.getCreatedTokenAccount({\n      mint: tokenA.mint,\n      associatedOnly: false,\n    });\n    const tokenAccountB = await account.getCreatedTokenAccount({\n      mint: tokenB.mint,\n      associatedOnly: false,\n    });\n    if (!tokenAccountA && !tokenAccountB)\n      this.logAndCreateError(\"cannot found target token accounts\", \"tokenAccounts\", account.tokenAccounts);\n\n    const lpTokenAccount = await account.getCreatedTokenAccount({\n      mint: new PublicKey(poolInfo.lpMint.address),\n    });\n\n    const tokens = [tokenA, tokenB];\n    const _tokenAccounts = [tokenAccountA, tokenAccountB];\n    const rawAmounts = [amountInA.raw, amountInB.raw];\n\n    // handle amount a & b and direction\n    const sideA = amountInA.token.mint.toBase58() === poolInfo.mintA.address ? \"base\" : \"quote\";\n    let _fixedSide: AmountSide = \"base\";\n    if (![\"quote\", \"base\"].includes(sideA)) this.logAndCreateError(\"invalid fixedSide\", \"fixedSide\", fixedSide);\n    if (sideA === \"quote\") {\n      tokens.reverse();\n      _tokenAccounts.reverse();\n      rawAmounts.reverse();\n      _fixedSide = fixedSide === \"a\" ? \"quote\" : \"base\";\n    } else if (sideA === \"base\") {\n      _fixedSide = fixedSide === \"a\" ? \"base\" : \"quote\";\n    }\n\n    const [baseToken, quoteToken] = tokens;\n    const [baseTokenAccount, quoteTokenAccount] = _tokenAccounts;\n    const [baseAmountRaw, quoteAmountRaw] = rawAmounts;\n\n    const poolKeys = await this.getAmmPoolKeys(poolInfo.id);\n\n    const txBuilder = this.createTxBuilder();\n\n    const { tokenAccount: _baseTokenAccount, ...baseInstruction } = await account.handleTokenAccount({\n      side: \"in\",\n      amount: baseAmountRaw,\n      mint: baseToken.mint,\n      tokenAccount: baseTokenAccount,\n      bypassAssociatedCheck,\n      checkCreateATAOwner,\n    });\n    txBuilder.addInstruction(baseInstruction);\n    const { tokenAccount: _quoteTokenAccount, ...quoteInstruction } = await account.handleTokenAccount({\n      side: \"in\",\n      amount: quoteAmountRaw,\n      mint: quoteToken.mint,\n      tokenAccount: quoteTokenAccount,\n      bypassAssociatedCheck,\n      checkCreateATAOwner,\n    });\n    txBuilder.addInstruction(quoteInstruction);\n    const { tokenAccount: _lpTokenAccount, ...lpInstruction } = await account.handleTokenAccount({\n      side: \"out\",\n      amount: 0,\n      mint: new PublicKey(poolInfo.lpMint.address),\n      tokenAccount: lpTokenAccount,\n      bypassAssociatedCheck,\n      checkCreateATAOwner,\n    });\n    txBuilder.addInstruction(lpInstruction);\n    txBuilder.addInstruction({\n      instructions: [\n        makeAddLiquidityInstruction({\n          poolInfo,\n          poolKeys: poolKeys as AmmV4Keys | AmmV5Keys,\n          userKeys: {\n            baseTokenAccount: _baseTokenAccount!,\n            quoteTokenAccount: _quoteTokenAccount!,\n            lpTokenAccount: _lpTokenAccount!,\n            owner: this.scope.ownerPubKey,\n          },\n          baseAmountIn: baseAmountRaw,\n          quoteAmountIn: quoteAmountRaw,\n          fixedSide: _fixedSide,\n        }),\n      ],\n      instructionTypes: [\n        poolInfo.pooltype.includes(\"StablePool\")\n          ? InstructionType.AmmV5AddLiquidity\n          : InstructionType.AmmV4AddLiquidity,\n      ],\n      lookupTableAddress: poolKeys.lookupTableAccount ? [poolKeys.lookupTableAccount] : [],\n    });\n    txBuilder.addCustomComputeBudget(computeBudgetConfig);\n    if (txVersion === TxVersion.V0) (await txBuilder.buildV0()) as MakeTxData<T>;\n    return txBuilder.build() as MakeTxData<T>;\n  }\n\n  public async removeLiquidity<T extends TxVersion>(params: RemoveParams<T>): Promise<Promise<MakeTxData<T>>> {\n    if (this.scope.availability.removeStandardPosition === false)\n      this.logAndCreateError(\"remove liquidity feature disabled in your region\");\n    const { poolInfo, amountIn, config, txVersion, computeBudgetConfig } = params;\n    const poolKeys = await this.getAmmPoolKeys(poolInfo.id);\n    const [baseMint, quoteMint, lpMint] = [\n      new PublicKey(poolInfo.mintA.address),\n      new PublicKey(poolInfo.mintB.address),\n      new PublicKey(poolInfo.lpMint.address),\n    ];\n    this.logDebug(\"amountIn:\", amountIn);\n    if (amountIn.isZero()) this.logAndCreateError(\"amount must greater than zero\", \"amountIn\", amountIn.toString());\n\n    const { account } = this.scope;\n    const lpTokenAccount = await account.getCreatedTokenAccount({\n      mint: lpMint,\n      associatedOnly: false,\n    });\n    if (!lpTokenAccount) this.logAndCreateError(\"cannot found lpTokenAccount\", \"tokenAccounts\", account.tokenAccounts);\n\n    const baseTokenAccount = await account.getCreatedTokenAccount({\n      mint: baseMint,\n    });\n    const quoteTokenAccount = await account.getCreatedTokenAccount({\n      mint: quoteMint,\n    });\n\n    const txBuilder = this.createTxBuilder();\n    const { bypassAssociatedCheck, checkCreateATAOwner } = {\n      // default\n      ...{ bypassAssociatedCheck: false, checkCreateATAOwner: false },\n      // custom\n      ...config,\n    };\n\n    const { tokenAccount: _baseTokenAccount, ...baseInstruction } = await account.handleTokenAccount({\n      side: \"out\",\n      amount: 0,\n      mint: baseMint,\n      tokenAccount: baseTokenAccount,\n      bypassAssociatedCheck,\n      checkCreateATAOwner,\n    });\n    txBuilder.addInstruction(baseInstruction);\n    const { tokenAccount: _quoteTokenAccount, ...quoteInstruction } = await account.handleTokenAccount({\n      side: \"out\",\n      amount: 0,\n      mint: quoteMint,\n      tokenAccount: quoteTokenAccount,\n      bypassAssociatedCheck,\n      checkCreateATAOwner,\n    });\n    txBuilder.addInstruction(quoteInstruction);\n\n    txBuilder.addInstruction({\n      instructions: [\n        removeLiquidityInstruction({\n          poolInfo,\n          poolKeys,\n          userKeys: {\n            lpTokenAccount: lpTokenAccount!,\n            baseTokenAccount: _baseTokenAccount!,\n            quoteTokenAccount: _quoteTokenAccount!,\n            owner: this.scope.ownerPubKey,\n          },\n          amountIn,\n        }),\n      ],\n      lookupTableAddress: poolKeys.lookupTableAccount ? [poolKeys.lookupTableAccount] : [],\n      instructionTypes: [\n        poolInfo.pooltype.includes(\"StablePool\")\n          ? InstructionType.AmmV5RemoveLiquidity\n          : InstructionType.AmmV4RemoveLiquidity,\n      ],\n    });\n    txBuilder.addCustomComputeBudget(computeBudgetConfig);\n    if (txVersion === TxVersion.V0) return (await txBuilder.buildV0()) as MakeTxData<T>;\n    return txBuilder.build() as MakeTxData<T>;\n  }\n\n  public async removeAllLpAndCreateClmmPosition<T extends TxVersion>({\n    poolInfo,\n    clmmPoolInfo,\n    removeLpAmount,\n    createPositionInfo,\n    farmInfo,\n    userFarmLpAmount,\n    base,\n    computeBudgetConfig,\n    payer,\n    tokenProgram = TOKEN_PROGRAM_ID,\n    checkCreateATAOwner = true,\n    getEphemeralSigners,\n    txVersion,\n  }: {\n    poolInfo: ApiV3PoolInfoStandardItem;\n    clmmPoolInfo: ApiV3PoolInfoConcentratedItem;\n    removeLpAmount: BN;\n    createPositionInfo: {\n      tickLower: number;\n      tickUpper: number;\n      baseAmount: BN;\n      otherAmountMax: BN;\n    };\n    farmInfo?: FormatFarmInfoOutV6;\n    userFarmLpAmount?: BN;\n    base: \"MintA\" | \"MintB\";\n    payer?: PublicKey;\n    computeBudgetConfig?: ComputeBudgetConfig;\n    tokenProgram?: PublicKey;\n    checkCreateATAOwner?: boolean;\n    txVersion?: T;\n    getEphemeralSigners?: (k: number) => any;\n  }): Promise<MakeMultiTxData<T>> {\n    if (\n      this.scope.availability.removeStandardPosition === false ||\n      this.scope.availability.createConcentratedPosition === false\n    )\n      this.logAndCreateError(\"remove liquidity or create position feature disabled in your region\");\n\n    if (\n      !(poolInfo.mintA.address === clmmPoolInfo.mintA.address || poolInfo.mintA.address === clmmPoolInfo.mintB.address)\n    )\n      throw Error(\"mint check error\");\n    if (\n      !(poolInfo.mintB.address === clmmPoolInfo.mintA.address || poolInfo.mintB.address === clmmPoolInfo.mintB.address)\n    )\n      throw Error(\"mint check error\");\n\n    const txBuilder = this.createTxBuilder();\n    txBuilder.addCustomComputeBudget(computeBudgetConfig);\n    const mintToAccount: { [mint: string]: PublicKey } = {};\n    for (const item of this.scope.account.tokenAccountRawInfos) {\n      if (\n        mintToAccount[item.accountInfo.mint.toString()] === undefined ||\n        getATAAddress(this.scope.ownerPubKey, item.accountInfo.mint, TOKEN_PROGRAM_ID).publicKey.equals(item.pubkey)\n      ) {\n        mintToAccount[item.accountInfo.mint.toString()] = item.pubkey;\n      }\n    }\n\n    const lpTokenAccount = mintToAccount[poolInfo.lpMint.address];\n    if (lpTokenAccount === undefined) throw Error(\"find lp account error in trade accounts\");\n\n    const amountIn = removeLpAmount.add(userFarmLpAmount ?? new BN(0));\n    const mintBaseUseSOLBalance = poolInfo.mintA.address === Token.WSOL.mint.toString();\n    const mintQuoteUseSOLBalance = poolInfo.mintB.address === Token.WSOL.mint.toString();\n\n    const { account: baseTokenAccount, instructionParams: ownerTokenAccountBaseInstruction } =\n      await this.scope.account.getOrCreateTokenAccount({\n        tokenProgram: TOKEN_PROGRAM_ID,\n        mint: new PublicKey(poolInfo.mintA.address),\n        owner: this.scope.ownerPubKey,\n\n        createInfo: mintBaseUseSOLBalance\n          ? {\n              payer: this.scope.ownerPubKey,\n            }\n          : undefined,\n        skipCloseAccount: !mintBaseUseSOLBalance,\n        notUseTokenAccount: mintBaseUseSOLBalance,\n        associatedOnly: true,\n        checkCreateATAOwner,\n      });\n    txBuilder.addInstruction(ownerTokenAccountBaseInstruction || {});\n    if (baseTokenAccount === undefined) throw new Error(\"base token account not found\");\n\n    const { account: quoteTokenAccount, instructionParams: ownerTokenAccountQuoteInstruction } =\n      await this.scope.account.getOrCreateTokenAccount({\n        tokenProgram: TOKEN_PROGRAM_ID,\n        mint: new PublicKey(poolInfo.mintB.address),\n        owner: this.scope.ownerPubKey,\n        createInfo: mintQuoteUseSOLBalance\n          ? {\n              payer: this.scope.ownerPubKey!,\n              amount: 0,\n            }\n          : undefined,\n        skipCloseAccount: !mintQuoteUseSOLBalance,\n        notUseTokenAccount: mintQuoteUseSOLBalance,\n        associatedOnly: true,\n        checkCreateATAOwner,\n      });\n    txBuilder.addInstruction(ownerTokenAccountQuoteInstruction || {});\n    if (quoteTokenAccount === undefined) throw new Error(\"quote token account not found\");\n\n    mintToAccount[poolInfo.mintA.address] = baseTokenAccount;\n    mintToAccount[poolInfo.mintB.address] = quoteTokenAccount;\n\n    if (farmInfo !== undefined && !userFarmLpAmount?.isZero()) {\n      const rewardTokenAccounts: PublicKey[] = [];\n      for (const item of farmInfo.rewardInfos) {\n        const rewardIsWsol = item.mint.address === Token.WSOL.mint.toString();\n        if (mintToAccount[item.mint.address]) rewardTokenAccounts.push(mintToAccount[item.mint.address]);\n        else {\n          const { account: farmRewardAccount, instructionParams: ownerTokenAccountFarmInstruction } =\n            await this.scope.account.getOrCreateTokenAccount({\n              mint: new PublicKey(item.mint.address),\n              tokenProgram,\n              owner: this.scope.ownerPubKey,\n              skipCloseAccount: !rewardIsWsol,\n              createInfo: {\n                payer: payer || this.scope.ownerPubKey,\n              },\n              associatedOnly: true,\n              checkCreateATAOwner,\n            });\n          if (!farmRewardAccount) this.logAndCreateError(\"farm reward account not found:\", item.mint.address);\n          ownerTokenAccountFarmInstruction && txBuilder.addInstruction(ownerTokenAccountFarmInstruction);\n          rewardTokenAccounts.push(farmRewardAccount!);\n        }\n      }\n      const farmKeys = (await this.scope.api.fetchFarmKeysById({ ids: farmInfo.id }))[0];\n      const insParams = {\n        amount: userFarmLpAmount!,\n        owner: this.scope.ownerPubKey,\n        farmInfo,\n        farmKeys,\n        lpAccount: lpTokenAccount,\n        rewardAccounts: rewardTokenAccounts,\n      };\n      const version = FARM_PROGRAM_TO_VERSION[farmInfo.programId];\n      const newInstruction =\n        version === 6\n          ? makeWithdrawInstructionV6(insParams)\n          : version === 5\n          ? makeWithdrawInstructionV5(insParams)\n          : makeWithdrawInstructionV3(insParams);\n      const insType = {\n        3: InstructionType.FarmV3Withdraw,\n        5: InstructionType.FarmV5Withdraw,\n        6: InstructionType.FarmV6Withdraw,\n      };\n      txBuilder.addInstruction({\n        instructions: [newInstruction],\n        instructionTypes: [insType[version]],\n      });\n    }\n\n    const poolKeys = await this.getAmmPoolKeys(poolInfo.id);\n\n    const removeIns = removeLiquidityInstruction({\n      poolInfo,\n      poolKeys,\n      userKeys: {\n        lpTokenAccount,\n        baseTokenAccount,\n        quoteTokenAccount,\n        owner: this.scope.ownerPubKey,\n      },\n      amountIn,\n    });\n\n    txBuilder.addInstruction({\n      instructions: [removeIns],\n      instructionTypes: [\n        !poolInfo.pooltype.includes(\"StablePool\")\n          ? InstructionType.AmmV4RemoveLiquidity\n          : InstructionType.AmmV5RemoveLiquidity,\n      ],\n      lookupTableAddress: poolKeys.lookupTableAccount ? [poolKeys.lookupTableAccount] : [],\n    });\n\n    const [tokenAccountA, tokenAccountB] =\n      poolInfo.mintA.address === clmmPoolInfo.mintA.address\n        ? [baseTokenAccount, quoteTokenAccount]\n        : [quoteTokenAccount, baseTokenAccount];\n\n    const clmmPoolKeys = await this.scope.clmm.getClmmPoolKeys(poolInfo.id);\n\n    const createPositionIns = await ClmmInstrument.openPositionFromBaseInstructions({\n      poolInfo: clmmPoolInfo,\n      poolKeys: clmmPoolKeys,\n      ownerInfo: {\n        feePayer: this.scope.ownerPubKey,\n        wallet: this.scope.ownerPubKey,\n        tokenAccountA,\n        tokenAccountB,\n      },\n      withMetadata: \"create\",\n      ...createPositionInfo,\n      base,\n      getEphemeralSigners,\n    });\n\n    txBuilder.addInstruction({\n      instructions: [...createPositionIns.instructions],\n      signers: createPositionIns.signers,\n      instructionTypes: [...createPositionIns.instructionTypes],\n      lookupTableAddress: clmmPoolKeys.lookupTableAccount ? [clmmPoolKeys.lookupTableAccount] : [],\n    });\n\n    if (txVersion === TxVersion.V0) return txBuilder.sizeCheckBuildV0() as Promise<MakeMultiTxData<T>>;\n    return txBuilder.sizeCheckBuild() as Promise<MakeMultiTxData<T>>;\n  }\n\n  public async createPoolV4<T extends TxVersion>({\n    programId,\n    marketInfo,\n    baseMintInfo,\n    quoteMintInfo,\n    baseAmount,\n    quoteAmount,\n    startTime,\n    ownerInfo,\n    associatedOnly = false,\n    checkCreateATAOwner = false,\n    tokenProgram,\n    txVersion,\n    feeDestinationId,\n    computeBudgetConfig,\n  }: CreatePoolParam<T>): Promise<MakeTxData<T, { address: CreatePoolAddress }>> {\n    const payer = ownerInfo.feePayer || this.scope.owner?.publicKey;\n    const mintAUseSOLBalance = ownerInfo.useSOLBalance && baseMintInfo.mint.equals(NATIVE_MINT);\n    const mintBUseSOLBalance = ownerInfo.useSOLBalance && quoteMintInfo.mint.equals(NATIVE_MINT);\n\n    const txBuilder = this.createTxBuilder();\n\n    const { account: ownerTokenAccountBase, instructionParams: ownerTokenAccountBaseInstruction } =\n      await this.scope.account.getOrCreateTokenAccount({\n        mint: baseMintInfo.mint,\n        owner: this.scope.ownerPubKey,\n        createInfo: mintAUseSOLBalance\n          ? {\n              payer: payer!,\n              amount: baseAmount,\n            }\n          : undefined,\n        notUseTokenAccount: mintAUseSOLBalance,\n        skipCloseAccount: !mintAUseSOLBalance,\n        associatedOnly: mintAUseSOLBalance ? false : associatedOnly,\n        checkCreateATAOwner,\n      });\n    txBuilder.addInstruction(ownerTokenAccountBaseInstruction || {});\n\n    const { account: ownerTokenAccountQuote, instructionParams: ownerTokenAccountQuoteInstruction } =\n      await this.scope.account.getOrCreateTokenAccount({\n        mint: quoteMintInfo.mint,\n        owner: this.scope.ownerPubKey,\n        createInfo: mintBUseSOLBalance\n          ? {\n              payer: payer!,\n              amount: quoteAmount,\n            }\n          : undefined,\n\n        notUseTokenAccount: mintBUseSOLBalance,\n        skipCloseAccount: !mintBUseSOLBalance,\n        associatedOnly: mintBUseSOLBalance ? false : associatedOnly,\n        checkCreateATAOwner,\n      });\n    txBuilder.addInstruction(ownerTokenAccountQuoteInstruction || {});\n\n    if (ownerTokenAccountBase === undefined || ownerTokenAccountQuote === undefined)\n      throw Error(\"you don't has some token account\");\n\n    const poolInfo = getAssociatedPoolKeys({\n      version: 4,\n      marketVersion: 3,\n      marketId: marketInfo.marketId,\n      baseMint: baseMintInfo.mint,\n      quoteMint: quoteMintInfo.mint,\n      baseDecimals: baseMintInfo.decimals,\n      quoteDecimals: quoteMintInfo.decimals,\n      programId,\n      marketProgramId: marketInfo.programId,\n    });\n\n    const createPoolKeys = {\n      programId,\n      ammId: poolInfo.id,\n      ammAuthority: poolInfo.authority,\n      ammOpenOrders: poolInfo.openOrders,\n      lpMint: poolInfo.lpMint,\n      coinMint: poolInfo.baseMint,\n      pcMint: poolInfo.quoteMint,\n      coinVault: poolInfo.baseVault,\n      pcVault: poolInfo.quoteVault,\n      withdrawQueue: poolInfo.withdrawQueue,\n      ammTargetOrders: poolInfo.targetOrders,\n      poolTempLp: poolInfo.lpVault,\n      marketProgramId: poolInfo.marketProgramId,\n      marketId: poolInfo.marketId,\n      ammConfigId: poolInfo.configId,\n      feeDestinationId,\n    };\n\n    const { instruction, instructionType } = createPoolV4InstructionV2({\n      ...createPoolKeys,\n      userWallet: this.scope.ownerPubKey,\n      userCoinVault: ownerTokenAccountBase,\n      userPcVault: ownerTokenAccountQuote,\n      userLpVault: getATAAddress(this.scope.ownerPubKey, poolInfo.lpMint, tokenProgram).publicKey,\n\n      nonce: poolInfo.nonce,\n      openTime: startTime,\n      coinAmount: baseAmount,\n      pcAmount: quoteAmount,\n    });\n\n    txBuilder.addInstruction({\n      instructions: [instruction],\n      instructionTypes: [instructionType],\n    });\n\n    txBuilder.addCustomComputeBudget(computeBudgetConfig);\n\n    return txBuilder.versionBuild({\n      txVersion,\n      extInfo: {\n        address: createPoolKeys,\n      },\n    }) as Promise<MakeTxData<T, { address: CreatePoolAddress }>>;\n  }\n\n  public async getCreatePoolFee({ programId }: { programId: PublicKey }): Promise<BN> {\n    const configId = getAssociatedConfigId({ programId });\n\n    const account = await this.scope.connection.getAccountInfo(configId, { dataSlice: { offset: 536, length: 8 } });\n    if (account === null) throw Error(\"get config account error\");\n\n    return createPoolFeeLayout.decode(account.data).fee;\n  }\n\n  public computeAmountOut({ poolInfo, amountIn, mintIn, mintOut, slippage }: ComputeAmountOutParam): {\n    amountOut: BN;\n    minAmountOut: BN;\n    currentPrice: Decimal;\n    executionPrice: Decimal;\n    priceImpact: Decimal;\n    fee: BN;\n  } {\n    if (mintIn !== poolInfo.mintA.address && mintIn !== poolInfo.mintA.address) throw new Error(\"toke not match\");\n    if (mintOut !== poolInfo.mintB.address && mintOut !== poolInfo.mintB.address) throw new Error(\"toke not match\");\n\n    const { baseReserve, quoteReserve } = poolInfo;\n\n    const reserves = [baseReserve, quoteReserve];\n\n    // input is fixed\n    const input = mintIn == poolInfo.mintA.address ? \"base\" : \"quote\";\n    if (input === \"quote\") {\n      reserves.reverse();\n    }\n\n    const [reserveIn, reserveOut] = reserves;\n    const isVersion4 = poolInfo.programId === AMM_V4.toBase58();\n    let currentPrice: Decimal;\n    if (isVersion4) {\n      currentPrice = new Decimal(reserveOut.toString()).div(reserveIn.toString());\n    } else {\n      const p = getStablePrice(\n        this.stableLayout.stableModelData,\n        baseReserve.toNumber(),\n        quoteReserve.toNumber(),\n        false,\n      );\n      if (input === \"quote\") currentPrice = new Decimal(1e6).div(p * 1e6);\n      else currentPrice = new Decimal(p * 1e6).div(1e6);\n    }\n\n    const amountInRaw = amountIn;\n    let amountOutRaw = new BN(0);\n    let feeRaw = new BN(0);\n\n    if (!amountInRaw.isZero()) {\n      if (isVersion4) {\n        feeRaw = BNDivCeil(amountInRaw.mul(LIQUIDITY_FEES_NUMERATOR), LIQUIDITY_FEES_DENOMINATOR);\n        const amountInWithFee = amountInRaw.sub(feeRaw);\n\n        const denominator = reserveIn.add(amountInWithFee);\n        amountOutRaw = reserveOut.mul(amountInWithFee).div(denominator);\n      } else {\n        feeRaw = amountInRaw.mul(new BN(2)).div(new BN(10000));\n        const amountInWithFee = amountInRaw.sub(feeRaw);\n        if (input === \"quote\")\n          amountOutRaw = new BN(\n            getDyByDxBaseIn(\n              this.stableLayout.stableModelData,\n              quoteReserve.toNumber(),\n              baseReserve.toNumber(),\n              amountInWithFee.toNumber(),\n            ),\n          );\n        else {\n          amountOutRaw = new BN(\n            getDxByDyBaseIn(\n              this.stableLayout.stableModelData,\n              quoteReserve.toNumber(),\n              baseReserve.toNumber(),\n              amountInWithFee.toNumber(),\n            ),\n          );\n        }\n      }\n    }\n\n    const minAmountOutRaw = new BN(new Decimal(amountOutRaw.toString()).mul(1 - slippage).toFixed(0));\n\n    const amountOut = amountOutRaw;\n    const minAmountOut = minAmountOutRaw;\n\n    let executionPrice = new Decimal(amountOutRaw.toString()).div(\n      new Decimal(amountInRaw.sub(feeRaw).toString()).toFixed(0),\n    );\n    if (!amountInRaw.isZero() && !amountOutRaw.isZero()) {\n      // executionPrice = new Price(currencyIn, amountInRaw.sub(feeRaw), currencyOut, amountOutRaw);\n      executionPrice = new Decimal(amountOutRaw.toString()).div(amountInRaw.sub(feeRaw).toString());\n    }\n\n    const priceImpact = currentPrice.sub(executionPrice).div(currentPrice).mul(100);\n\n    // logger.debug(\"priceImpact:\", `${priceImpact.toSignificant()}%`);\n\n    const fee = feeRaw;\n\n    return {\n      amountOut,\n      minAmountOut,\n      currentPrice,\n      executionPrice,\n      priceImpact,\n      fee,\n    };\n  }\n\n  public async swap<T extends TxVersion>({\n    poolInfo,\n    amountIn,\n    amountOut,\n    inputMint,\n    fixedSide,\n    txVersion,\n    computeBudgetConfig,\n  }: SwapParam<T>): Promise<MakeTxData<T>> {\n    const txBuilder = this.createTxBuilder();\n    const [tokenIn, tokenOut] =\n      inputMint === poolInfo.mintA.address ? [poolInfo.mintA, poolInfo.mintB] : [poolInfo.mintB, poolInfo.mintA];\n    const tokenAccountIn = await this.scope.account.getCreatedTokenAccount({\n      mint: new PublicKey(tokenIn.address),\n      programId: new PublicKey(tokenIn.programId),\n      associatedOnly: false,\n    });\n\n    const tokenAccountOut = await this.scope.account.getCreatedTokenAccount({\n      mint: new PublicKey(tokenOut.address),\n      programId: new PublicKey(tokenOut.programId),\n      associatedOnly: false,\n    });\n\n    const { tokenAccount: _tokenAccountIn, ...accountInIns } = await this.scope.account.handleTokenAccount({\n      side: \"in\",\n      amount: amountIn,\n      mint: new PublicKey(tokenIn.address),\n      tokenAccount: tokenAccountIn,\n      bypassAssociatedCheck: false,\n      checkCreateATAOwner: false,\n    });\n    txBuilder.addInstruction(accountInIns);\n\n    const { tokenAccount: _tokenAccountOut, ...accountOutIns } = await this.scope.account.handleTokenAccount({\n      side: \"out\",\n      amount: 0,\n      mint: new PublicKey(tokenOut.address),\n      tokenAccount: tokenAccountOut,\n      bypassAssociatedCheck: false,\n      checkCreateATAOwner: false,\n    });\n    txBuilder.addInstruction(accountOutIns);\n\n    const poolKeys = await this.getAmmPoolKeys(poolInfo.id);\n    let version = 4;\n    if (poolInfo.pooltype.includes(\"StablePool\")) version = 5;\n\n    txBuilder.addInstruction({\n      instructions: [\n        makeAMMSwapInstruction({\n          version,\n          poolKeys,\n          userKeys: {\n            tokenAccountIn: _tokenAccountIn,\n            tokenAccountOut: _tokenAccountOut,\n            owner: this.scope.ownerPubKey,\n          },\n          amountIn,\n          amountOut,\n          fixedSide,\n        }),\n      ],\n      instructionTypes: [version === 4 ? InstructionType.AmmV4SwapBaseIn : InstructionType.AmmV5SwapBaseIn],\n    });\n\n    txBuilder.addCustomComputeBudget(computeBudgetConfig);\n\n    return txBuilder.versionBuild({\n      txVersion,\n    }) as Promise<MakeTxData<T>>;\n  }\n}\n","import { publicKey, struct, u32, u64, u8 } from \"@/marshmallow\";\n\nexport const SPL_MINT_LAYOUT = struct([\n  u32(\"mintAuthorityOption\"),\n  publicKey(\"mintAuthority\"),\n  u64(\"supply\"),\n  u8(\"decimals\"),\n  u8(\"isInitialized\"),\n  u32(\"freezeAuthorityOption\"),\n  publicKey(\"freezeAuthority\"),\n]);\n\nexport type SplMintLayout = typeof SPL_MINT_LAYOUT;\n","import { Connection, PublicKey } from \"@solana/web3.js\";\nimport { MintLayout, RawMint, TOKEN_PROGRAM_ID } from \"@solana/spl-token\";\nimport { Token, TokenAmount } from \"@/module\";\nimport { BigNumberish } from \"@/common/bignumber\";\nimport { TokenInfo } from \"./type\";\nimport { SOL_INFO, TOKEN_WSOL } from \"./constant\";\n\nimport { ApiV3Token } from \"@/api\";\n\nexport const parseTokenInfo = async ({\n  connection,\n  mint,\n}: {\n  connection: Connection;\n  mint: PublicKey | string;\n}): Promise<RawMint | undefined> => {\n  const accountData = await connection.getAccountInfo(new PublicKey(mint));\n  if (!accountData || accountData.data.length !== MintLayout.span) return;\n  const tokenInfo = MintLayout.decode(accountData.data);\n  return tokenInfo;\n};\n\nexport const toTokenInfo = ({\n  mint,\n  decimals,\n  programId = TOKEN_PROGRAM_ID,\n  logoURI = \"\",\n  priority = 3,\n}: {\n  mint: PublicKey;\n  decimals: number;\n  programId?: PublicKey | string;\n  priority?: number;\n  logoURI?: string;\n}): TokenInfo => {\n  const pubStr = mint.toBase58().substring(0, 6);\n  return {\n    address: mint.toBase58(),\n    decimals,\n    symbol: pubStr,\n    logoURI,\n    extensions: {},\n    chainId: 101,\n    programId: programId.toString(),\n    name: pubStr,\n    tags: [],\n    priority,\n  };\n};\n\nexport const toToken = (props: Omit<TokenInfo, \"priority\">): Token =>\n  new Token({\n    mint: props.address,\n    decimals: props.decimals,\n    symbol: props.symbol,\n    name: props.name,\n  });\n\nexport const toTokenAmount = ({\n  amount,\n  isRaw,\n  name,\n  ...props\n}: Omit<TokenInfo, \"priority\"> & {\n  amount: BigNumberish;\n  isRaw?: boolean;\n  name?: string;\n}): TokenAmount =>\n  new TokenAmount(\n    new Token({\n      mint: props.address,\n      decimals: props.decimals,\n      symbol: props.symbol,\n      name,\n    }),\n    amount,\n    isRaw,\n    name,\n  );\n\nexport function solToWSolToken<T extends ApiV3Token | TokenInfo>(token: T): T {\n  if (token.address === SOL_INFO.address) return TOKEN_WSOL as T;\n  return token;\n}\n\nexport function wSolToSolToken<T extends ApiV3Token | TokenInfo>(token: T): T {\n  if (token.address === TOKEN_WSOL.address) return SOL_INFO as T;\n  return token;\n}\n","import { TOKEN_PROGRAM_ID, ASSOCIATED_TOKEN_PROGRAM_ID } from \"@solana/spl-token\";\nimport { PublicKey, TransactionInstruction, SystemProgram, SYSVAR_RENT_PUBKEY } from \"@solana/web3.js\";\n\nimport { parseBigNumberish, BN_ZERO, BN_ONE } from \"@/common/bignumber\";\nimport { InstructionType } from \"@/common/txTool/txType\";\nimport { createLogger } from \"@/common/logger\";\nimport { accountMeta, RENT_PROGRAM_ID } from \"@/common/pubKey\";\nimport { AmmV4Keys, AmmV5Keys } from \"@/api/type\";\nimport { struct, u8, u64 } from \"@/marshmallow\";\n\nimport {\n  addLiquidityLayout,\n  removeLiquidityLayout,\n  fixedSwapInLayout,\n  fixedSwapOutLayout,\n  initPoolLayout,\n} from \"./layout\";\nimport { MODEL_DATA_PUBKEY } from \"./stable\";\nimport {\n  LiquidityAddInstructionParams,\n  RemoveLiquidityInstruction,\n  SwapFixedInInstructionParamsV4,\n  SwapFixedOutInstructionParamsV4,\n  SwapInstructionParams,\n  InitPoolInstructionParamsV4,\n} from \"./type\";\nimport { jsonInfo2PoolKeys } from \"@/common/utility\";\nimport { InstructionReturn } from \"../type\";\nimport BN from \"bn.js\";\n\nconst logger = createLogger(\"Raydium_liquidity_instruction\");\nexport function makeAddLiquidityInstruction(params: LiquidityAddInstructionParams): TransactionInstruction {\n  const { poolInfo, poolKeys, userKeys, baseAmountIn, quoteAmountIn, fixedSide } = params;\n\n  const data = Buffer.alloc(addLiquidityLayout.span);\n  addLiquidityLayout.encode(\n    {\n      instruction: 3,\n      baseAmountIn: parseBigNumberish(baseAmountIn),\n      quoteAmountIn: parseBigNumberish(quoteAmountIn),\n      fixedSide: fixedSide === \"base\" ? BN_ZERO : BN_ONE,\n    },\n    data,\n  );\n\n  const keys = [\n    accountMeta({ pubkey: TOKEN_PROGRAM_ID, isWritable: false }),\n    // amm\n    accountMeta({ pubkey: new PublicKey(poolInfo.id) }),\n    accountMeta({ pubkey: new PublicKey(poolKeys.authority), isWritable: false }),\n    accountMeta({ pubkey: new PublicKey(poolKeys.openOrders), isWritable: false }),\n    accountMeta({ pubkey: new PublicKey(poolKeys.targetOrders) }),\n    accountMeta({ pubkey: new PublicKey(poolInfo.lpMint.address) }),\n    accountMeta({ pubkey: new PublicKey(poolKeys.vault.A) }),\n    accountMeta({ pubkey: new PublicKey(poolKeys.vault.B) }),\n  ];\n\n  if (poolInfo.pooltype.includes(\"StablePool\")) {\n    keys.push(accountMeta({ pubkey: MODEL_DATA_PUBKEY }));\n  }\n\n  keys.push(\n    // serum\n    accountMeta({ pubkey: new PublicKey(poolInfo.marketId), isWritable: false }),\n    // user\n    accountMeta({ pubkey: userKeys.baseTokenAccount }),\n    accountMeta({ pubkey: userKeys.quoteTokenAccount }),\n    accountMeta({ pubkey: userKeys.lpTokenAccount }),\n    accountMeta({ pubkey: userKeys.owner, isWritable: false, isSigner: true }),\n    accountMeta({ pubkey: new PublicKey(poolKeys.marketEventQueue), isWritable: false }),\n  );\n\n  return new TransactionInstruction({\n    programId: new PublicKey(poolInfo.programId),\n    keys,\n    data,\n  });\n}\n\nexport function removeLiquidityInstruction(params: RemoveLiquidityInstruction): TransactionInstruction {\n  const { poolInfo, poolKeys: poolKeyProps, userKeys, amountIn } = params;\n  const poolKeys = jsonInfo2PoolKeys(poolKeyProps);\n\n  let version = 4;\n  if (poolInfo.pooltype.includes(\"StablePool\")) version = 5;\n\n  if (version === 4 || version === 5) {\n    const data = Buffer.alloc(removeLiquidityLayout.span);\n    removeLiquidityLayout.encode(\n      {\n        instruction: 4,\n        amountIn: parseBigNumberish(amountIn),\n      },\n      data,\n    );\n\n    const keys = [\n      // system\n      accountMeta({ pubkey: TOKEN_PROGRAM_ID, isWritable: false }),\n      // amm\n      accountMeta({ pubkey: poolKeys.id }),\n      accountMeta({ pubkey: poolKeys.authority, isWritable: false }),\n      accountMeta({ pubkey: poolKeys.openOrders }),\n      accountMeta({ pubkey: poolKeys.targetOrders }),\n      accountMeta({ pubkey: poolKeys.mintLp.address }),\n      accountMeta({ pubkey: poolKeys.vault.A }),\n      accountMeta({ pubkey: poolKeys.vault.B }),\n    ];\n\n    if (version === 5) {\n      keys.push(accountMeta({ pubkey: MODEL_DATA_PUBKEY }));\n    } else {\n      keys.push(accountMeta({ pubkey: poolKeys.id }));\n      keys.push(accountMeta({ pubkey: poolKeys.id }));\n    }\n\n    keys.push(\n      // serum\n      accountMeta({ pubkey: poolKeys.marketProgramId, isWritable: false }),\n      accountMeta({ pubkey: poolKeys.marketId }),\n      accountMeta({ pubkey: poolKeys.marketBaseVault }),\n      accountMeta({ pubkey: poolKeys.marketQuoteVault }),\n      accountMeta({ pubkey: poolKeys.marketAuthority, isWritable: false }),\n      // user\n      accountMeta({ pubkey: userKeys.lpTokenAccount }),\n      accountMeta({ pubkey: userKeys.baseTokenAccount }),\n      accountMeta({ pubkey: userKeys.quoteTokenAccount }),\n      accountMeta({ pubkey: userKeys.owner, isWritable: false, isSigner: true }),\n      // serum orderbook\n      accountMeta({ pubkey: poolKeys.marketEventQueue }),\n      accountMeta({ pubkey: poolKeys.marketBids }),\n      accountMeta({ pubkey: poolKeys.marketAsks }),\n    );\n\n    return new TransactionInstruction({\n      programId: poolKeys.programId,\n      keys,\n      data,\n    });\n  }\n\n  // logger.logWithError(\"invalid version\", \"poolKeys.version\", version);\n  return new TransactionInstruction({ programId: poolKeys.programId, keys: [] }); // won't reach\n}\n\nexport function createPoolV4InstructionV2({\n  programId,\n  ammId,\n  ammAuthority,\n  ammOpenOrders,\n  lpMint,\n  coinMint,\n  pcMint,\n  coinVault,\n  pcVault,\n  withdrawQueue,\n  ammTargetOrders,\n  poolTempLp,\n  marketProgramId,\n  marketId,\n  userWallet,\n  userCoinVault,\n  userPcVault,\n  userLpVault,\n  nonce,\n  openTime,\n  coinAmount,\n  pcAmount,\n  ammConfigId,\n  feeDestinationId,\n}: {\n  programId: PublicKey;\n  ammId: PublicKey;\n  ammAuthority: PublicKey;\n  ammOpenOrders: PublicKey;\n  lpMint: PublicKey;\n  coinMint: PublicKey;\n  pcMint: PublicKey;\n  coinVault: PublicKey;\n  pcVault: PublicKey;\n  withdrawQueue: PublicKey;\n  ammTargetOrders: PublicKey;\n  poolTempLp: PublicKey;\n  marketProgramId: PublicKey;\n  marketId: PublicKey;\n  userWallet: PublicKey;\n  userCoinVault: PublicKey;\n  userPcVault: PublicKey;\n  userLpVault: PublicKey;\n  ammConfigId: PublicKey;\n  feeDestinationId: PublicKey;\n\n  nonce: number;\n  openTime: BN;\n  coinAmount: BN;\n  pcAmount: BN;\n}): InstructionReturn {\n  const dataLayout = struct([u8(\"instruction\"), u8(\"nonce\"), u64(\"openTime\"), u64(\"pcAmount\"), u64(\"coinAmount\")]);\n\n  const keys = [\n    { pubkey: TOKEN_PROGRAM_ID, isSigner: false, isWritable: false },\n    { pubkey: ASSOCIATED_TOKEN_PROGRAM_ID, isSigner: false, isWritable: false },\n    { pubkey: SystemProgram.programId, isSigner: false, isWritable: false },\n    { pubkey: RENT_PROGRAM_ID, isSigner: false, isWritable: false },\n    { pubkey: ammId, isSigner: false, isWritable: true },\n    { pubkey: ammAuthority, isSigner: false, isWritable: false },\n    { pubkey: ammOpenOrders, isSigner: false, isWritable: true },\n    { pubkey: lpMint, isSigner: false, isWritable: true },\n    { pubkey: coinMint, isSigner: false, isWritable: false },\n    { pubkey: pcMint, isSigner: false, isWritable: false },\n    { pubkey: coinVault, isSigner: false, isWritable: true },\n    { pubkey: pcVault, isSigner: false, isWritable: true }, //12\n    { pubkey: ammTargetOrders, isSigner: false, isWritable: true }, //13\n    { pubkey: ammConfigId, isSigner: false, isWritable: false },\n    { pubkey: feeDestinationId, isSigner: false, isWritable: true },\n    { pubkey: marketProgramId, isSigner: false, isWritable: false },\n    { pubkey: marketId, isSigner: false, isWritable: false },\n    { pubkey: userWallet, isSigner: true, isWritable: true },\n    { pubkey: userCoinVault, isSigner: false, isWritable: true },\n    { pubkey: userPcVault, isSigner: false, isWritable: true },\n    { pubkey: userLpVault, isSigner: false, isWritable: true },\n  ];\n\n  const data = Buffer.alloc(dataLayout.span);\n  dataLayout.encode({ instruction: 1, nonce, openTime, coinAmount, pcAmount }, data);\n\n  return {\n    instruction: new TransactionInstruction({\n      keys,\n      programId,\n      data,\n    }),\n    instructionType: InstructionType.AmmV4CreatePool,\n  };\n}\n\nexport function simulatePoolInfoInstruction(poolKeys: AmmV4Keys | AmmV5Keys): TransactionInstruction {\n  const simulatePoolLayout = struct([u8(\"instruction\"), u8(\"simulateType\")]);\n  const data = Buffer.alloc(simulatePoolLayout.span);\n  simulatePoolLayout.encode(\n    {\n      instruction: 12,\n      simulateType: 0,\n    },\n    data,\n  );\n\n  const keys = [\n    // amm\n    accountMeta({ pubkey: new PublicKey(poolKeys.id), isWritable: false }),\n    accountMeta({ pubkey: new PublicKey(poolKeys.authority), isWritable: false }),\n    accountMeta({ pubkey: new PublicKey(poolKeys.openOrders), isWritable: false }),\n    accountMeta({ pubkey: new PublicKey(poolKeys.vault.A), isWritable: false }),\n    accountMeta({ pubkey: new PublicKey(poolKeys.vault.B), isWritable: false }),\n    accountMeta({ pubkey: new PublicKey(poolKeys.mintLp.address), isWritable: false }),\n    // serum\n    accountMeta({ pubkey: new PublicKey(poolKeys.marketId), isWritable: false }),\n    accountMeta({ pubkey: new PublicKey(poolKeys.marketEventQueue), isWritable: false }),\n  ];\n\n  return new TransactionInstruction({\n    programId: new PublicKey(poolKeys.programId),\n    keys,\n    data,\n  });\n}\n\nexport function makeSwapFixedInInstruction(\n  { poolKeys: propPoolKeys, userKeys, amountIn, minAmountOut }: SwapFixedInInstructionParamsV4,\n  version: number,\n): TransactionInstruction {\n  const poolKeys = jsonInfo2PoolKeys(propPoolKeys);\n  const data = Buffer.alloc(fixedSwapInLayout.span);\n  fixedSwapInLayout.encode(\n    {\n      instruction: 9,\n      amountIn: parseBigNumberish(amountIn),\n      minAmountOut: parseBigNumberish(minAmountOut),\n    },\n    data,\n  );\n  const keys = [\n    // amm\n    accountMeta({ pubkey: TOKEN_PROGRAM_ID, isWritable: false }),\n    accountMeta({ pubkey: poolKeys.id }),\n    accountMeta({ pubkey: poolKeys.authority, isWritable: false }),\n    accountMeta({ pubkey: poolKeys.openOrders }),\n  ];\n\n  if (version === 4) keys.push(accountMeta({ pubkey: poolKeys.targetOrders }));\n  keys.push(accountMeta({ pubkey: poolKeys.vault.A }), accountMeta({ pubkey: poolKeys.vault.B }));\n  if (version === 5) keys.push(accountMeta({ pubkey: MODEL_DATA_PUBKEY }));\n  keys.push(\n    // serum\n    accountMeta({ pubkey: poolKeys.marketProgramId, isWritable: false }),\n    accountMeta({ pubkey: poolKeys.marketId }),\n    accountMeta({ pubkey: poolKeys.marketBids }),\n    accountMeta({ pubkey: poolKeys.marketAsks }),\n    accountMeta({ pubkey: poolKeys.marketEventQueue }),\n    accountMeta({ pubkey: poolKeys.marketBaseVault }),\n    accountMeta({ pubkey: poolKeys.marketQuoteVault }),\n    accountMeta({ pubkey: poolKeys.marketAuthority, isWritable: false }),\n    // user\n    accountMeta({ pubkey: userKeys.tokenAccountIn }),\n    accountMeta({ pubkey: userKeys.tokenAccountOut }),\n    accountMeta({ pubkey: userKeys.owner, isWritable: false }),\n  );\n\n  return new TransactionInstruction({\n    programId: poolKeys.programId,\n    keys,\n    data,\n  });\n}\n\nexport function makeSwapFixedOutInstruction(\n  { poolKeys: propPoolKeys, userKeys, maxAmountIn, amountOut }: SwapFixedOutInstructionParamsV4,\n  version: number,\n): TransactionInstruction {\n  const poolKeys = jsonInfo2PoolKeys(propPoolKeys);\n  const data = Buffer.alloc(fixedSwapOutLayout.span);\n  fixedSwapOutLayout.encode(\n    {\n      instruction: 11,\n      maxAmountIn: parseBigNumberish(maxAmountIn),\n      amountOut: parseBigNumberish(amountOut),\n    },\n    data,\n  );\n\n  const keys = [\n    accountMeta({ pubkey: SystemProgram.programId, isWritable: false }),\n    // amm\n    accountMeta({ pubkey: poolKeys.id }),\n    accountMeta({ pubkey: poolKeys.authority, isWritable: false }),\n    accountMeta({ pubkey: poolKeys.openOrders }),\n    accountMeta({ pubkey: poolKeys.targetOrders }),\n    accountMeta({ pubkey: poolKeys.vault.A }),\n    accountMeta({ pubkey: poolKeys.vault.B }),\n  ];\n\n  if (version === 5) keys.push(accountMeta({ pubkey: MODEL_DATA_PUBKEY }));\n\n  keys.push(\n    // serum\n    accountMeta({ pubkey: poolKeys.marketProgramId, isWritable: false }),\n    accountMeta({ pubkey: poolKeys.marketId }),\n    accountMeta({ pubkey: poolKeys.marketBids }),\n    accountMeta({ pubkey: poolKeys.marketAsks }),\n    accountMeta({ pubkey: poolKeys.marketEventQueue }),\n    accountMeta({ pubkey: poolKeys.marketBaseVault }),\n    accountMeta({ pubkey: poolKeys.marketQuoteVault }),\n    accountMeta({ pubkey: poolKeys.marketAuthority, isWritable: false }),\n    accountMeta({ pubkey: userKeys.tokenAccountIn }),\n    accountMeta({ pubkey: userKeys.tokenAccountOut }),\n    accountMeta({ pubkey: userKeys.owner, isWritable: false, isSigner: true }),\n  );\n\n  return new TransactionInstruction({\n    programId: poolKeys.programId,\n    keys,\n    data,\n  });\n}\n\nexport function makeAMMSwapInstruction(params: SwapInstructionParams): TransactionInstruction {\n  const { poolKeys, version, userKeys, amountIn, amountOut, fixedSide } = params;\n  if (version === 4 || version === 5) {\n    const props = { poolKeys, userKeys };\n    if (fixedSide === \"in\") {\n      return makeSwapFixedInInstruction(\n        {\n          ...props,\n          amountIn,\n          minAmountOut: amountOut,\n        },\n        version,\n      );\n    } else if (fixedSide === \"out\") {\n      return makeSwapFixedOutInstruction(\n        {\n          ...props,\n          maxAmountIn: amountIn,\n          amountOut,\n        },\n        version,\n      );\n    }\n    logger.logWithError(\"invalid params\", \"params\", params);\n  }\n\n  logger.logWithError(\"invalid version\", \"poolKeys.version\", version);\n  throw new Error(\"invalid version\");\n}\n\nexport function makeInitPoolInstructionV4({\n  poolKeys: propPoolKeys,\n  userKeys,\n  startTime,\n}: InitPoolInstructionParamsV4): TransactionInstruction {\n  const data = Buffer.alloc(initPoolLayout.span);\n  initPoolLayout.encode(\n    {\n      instruction: 0,\n      // nonce: poolKeys.nonce, // to do fix\n      nonce: 5,\n      startTime: parseBigNumberish(startTime),\n    },\n    data,\n  );\n  const poolKeys = jsonInfo2PoolKeys(propPoolKeys);\n\n  const keys = [\n    // system\n    accountMeta({ pubkey: TOKEN_PROGRAM_ID, isWritable: false }),\n    accountMeta({ pubkey: SystemProgram.programId, isWritable: false }),\n    accountMeta({ pubkey: SYSVAR_RENT_PUBKEY, isWritable: false }),\n    // amm\n    accountMeta({ pubkey: poolKeys.id }),\n    accountMeta({ pubkey: poolKeys.authority, isWritable: false }),\n    accountMeta({ pubkey: poolKeys.openOrders }),\n    accountMeta({ pubkey: poolKeys.mintLp.address }),\n    accountMeta({ pubkey: poolKeys.mintA.address, isWritable: false }),\n    accountMeta({ pubkey: poolKeys.mintB.address, isWritable: false }),\n    accountMeta({ pubkey: poolKeys.vault.A, isWritable: false }),\n    accountMeta({ pubkey: poolKeys.vault.B, isWritable: false }),\n    accountMeta({ pubkey: poolKeys.id }),\n    accountMeta({ pubkey: poolKeys.targetOrders }),\n    accountMeta({ pubkey: userKeys.lpTokenAccount }),\n    accountMeta({ pubkey: poolKeys.id, isWritable: false }),\n    // serum\n    accountMeta({ pubkey: poolKeys.marketProgramId, isWritable: false }),\n    accountMeta({ pubkey: poolKeys.marketId, isWritable: false }),\n    // user\n    accountMeta({ pubkey: userKeys.payer, isSigner: true }),\n  ];\n\n  return new TransactionInstruction({\n    programId: poolKeys.programId,\n    keys,\n    data,\n  });\n}\n\nexport function makeSimulatePoolInfoInstruction({ poolKeys }: { poolKeys: AmmV4Keys | AmmV5Keys }): {\n  instruction: TransactionInstruction;\n} {\n  const LAYOUT = struct([u8(\"instruction\"), u8(\"simulateType\")]);\n  const data = Buffer.alloc(LAYOUT.span);\n  LAYOUT.encode(\n    {\n      instruction: 12,\n      simulateType: 0,\n    },\n    data,\n  );\n\n  const keys = [\n    // amm\n    accountMeta({ pubkey: new PublicKey(poolKeys.id), isWritable: false }),\n    accountMeta({ pubkey: new PublicKey(poolKeys.authority), isWritable: false }),\n    accountMeta({ pubkey: new PublicKey(poolKeys.openOrders), isWritable: false }),\n    accountMeta({ pubkey: new PublicKey(poolKeys.vault.A), isWritable: false }),\n    accountMeta({ pubkey: new PublicKey(poolKeys.vault.B), isWritable: false }),\n    accountMeta({ pubkey: new PublicKey(poolKeys.mintLp.address), isWritable: false }),\n    // serum\n    accountMeta({ pubkey: new PublicKey(poolKeys.marketId), isWritable: false }),\n    accountMeta({ pubkey: new PublicKey(poolKeys.marketEventQueue), isWritable: false }),\n  ];\n\n  return {\n    instruction: new TransactionInstruction({\n      programId: new PublicKey(poolKeys.programId),\n      keys,\n      data,\n    }),\n  };\n}\n","import { GetStructureSchema, publicKey, seq, struct, u128, u64, u8, u16, blob, bool } from \"@/marshmallow\";\n\nexport const fixedSwapInLayout = struct([u8(\"instruction\"), u64(\"amountIn\"), u64(\"minAmountOut\")]);\nexport const fixedSwapOutLayout = struct([u8(\"instruction\"), u64(\"maxAmountIn\"), u64(\"amountOut\")]);\n\nexport const createPoolV4Layout = struct([u8(\"instruction\"), u8(\"nonce\")]);\nexport const initPoolLayout = struct([u8(\"instruction\"), u8(\"nonce\"), u64(\"startTime\")]);\n/* ================= state layouts ================= */\nexport const liquidityStateV4Layout = struct([\n  u64(\"status\"),\n  u64(\"nonce\"),\n  u64(\"maxOrder\"),\n  u64(\"depth\"),\n  u64(\"baseDecimal\"),\n  u64(\"quoteDecimal\"),\n  u64(\"state\"),\n  u64(\"resetFlag\"),\n  u64(\"minSize\"),\n  u64(\"volMaxCutRatio\"),\n  u64(\"amountWaveRatio\"),\n  u64(\"baseLotSize\"),\n  u64(\"quoteLotSize\"),\n  u64(\"minPriceMultiplier\"),\n  u64(\"maxPriceMultiplier\"),\n  u64(\"systemDecimalValue\"),\n  u64(\"minSeparateNumerator\"),\n  u64(\"minSeparateDenominator\"),\n  u64(\"tradeFeeNumerator\"),\n  u64(\"tradeFeeDenominator\"),\n  u64(\"pnlNumerator\"),\n  u64(\"pnlDenominator\"),\n  u64(\"swapFeeNumerator\"),\n  u64(\"swapFeeDenominator\"),\n  u64(\"baseNeedTakePnl\"),\n  u64(\"quoteNeedTakePnl\"),\n  u64(\"quoteTotalPnl\"),\n  u64(\"baseTotalPnl\"),\n  u64(\"poolOpenTime\"),\n  u64(\"punishPcAmount\"),\n  u64(\"punishCoinAmount\"),\n  u64(\"orderbookToInitTime\"),\n  // u128('poolTotalDepositPc'),\n  // u128('poolTotalDepositCoin'),\n  u128(\"swapBaseInAmount\"),\n  u128(\"swapQuoteOutAmount\"),\n  u64(\"swapBase2QuoteFee\"),\n  u128(\"swapQuoteInAmount\"),\n  u128(\"swapBaseOutAmount\"),\n  u64(\"swapQuote2BaseFee\"),\n  // amm vault\n  publicKey(\"baseVault\"),\n  publicKey(\"quoteVault\"),\n  // mint\n  publicKey(\"baseMint\"),\n  publicKey(\"quoteMint\"),\n  publicKey(\"lpMint\"),\n  // market\n  publicKey(\"openOrders\"),\n  publicKey(\"marketId\"),\n  publicKey(\"marketProgramId\"),\n  publicKey(\"targetOrders\"),\n  publicKey(\"withdrawQueue\"),\n  publicKey(\"lpVault\"),\n  publicKey(\"owner\"),\n  // true circulating supply without lock up\n  u64(\"lpReserve\"),\n  seq(u64(), 3, \"padding\"),\n]);\n\nexport type LiquidityStateLayoutV4 = typeof liquidityStateV4Layout;\nexport type LiquidityStateV4 = GetStructureSchema<LiquidityStateLayoutV4>;\n\nexport const liquidityStateV5Layout = struct([\n  u64(\"accountType\"),\n  u64(\"status\"),\n  u64(\"nonce\"),\n  u64(\"maxOrder\"),\n  u64(\"depth\"),\n  u64(\"baseDecimal\"),\n  u64(\"quoteDecimal\"),\n  u64(\"state\"),\n  u64(\"resetFlag\"),\n  u64(\"minSize\"),\n  u64(\"volMaxCutRatio\"),\n  u64(\"amountWaveRatio\"),\n  u64(\"baseLotSize\"),\n  u64(\"quoteLotSize\"),\n  u64(\"minPriceMultiplier\"),\n  u64(\"maxPriceMultiplier\"),\n  u64(\"systemDecimalsValue\"),\n  u64(\"abortTradeFactor\"),\n  u64(\"priceTickMultiplier\"),\n  u64(\"priceTick\"),\n  // Fees\n  u64(\"minSeparateNumerator\"),\n  u64(\"minSeparateDenominator\"),\n  u64(\"tradeFeeNumerator\"),\n  u64(\"tradeFeeDenominator\"),\n  u64(\"pnlNumerator\"),\n  u64(\"pnlDenominator\"),\n  u64(\"swapFeeNumerator\"),\n  u64(\"swapFeeDenominator\"),\n  // OutPutData\n  u64(\"baseNeedTakePnl\"),\n  u64(\"quoteNeedTakePnl\"),\n  u64(\"quoteTotalPnl\"),\n  u64(\"baseTotalPnl\"),\n  u64(\"poolOpenTime\"),\n  u64(\"punishPcAmount\"),\n  u64(\"punishCoinAmount\"),\n  u64(\"orderbookToInitTime\"),\n  u128(\"swapBaseInAmount\"),\n  u128(\"swapQuoteOutAmount\"),\n  u128(\"swapQuoteInAmount\"),\n  u128(\"swapBaseOutAmount\"),\n  u64(\"swapQuote2BaseFee\"),\n  u64(\"swapBase2QuoteFee\"),\n\n  publicKey(\"baseVault\"),\n  publicKey(\"quoteVault\"),\n  publicKey(\"baseMint\"),\n  publicKey(\"quoteMint\"),\n  publicKey(\"lpMint\"),\n\n  publicKey(\"modelDataAccount\"),\n  publicKey(\"openOrders\"),\n  publicKey(\"marketId\"),\n  publicKey(\"marketProgramId\"),\n  publicKey(\"targetOrders\"),\n  publicKey(\"owner\"),\n  seq(u64(), 64, \"padding\"),\n]);\n\nexport const addLiquidityLayout = struct([\n  u8(\"instruction\"),\n  u64(\"baseAmountIn\"),\n  u64(\"quoteAmountIn\"),\n  u64(\"fixedSide\"),\n]);\n\nexport const removeLiquidityLayout = struct([u8(\"instruction\"), u64(\"amountIn\")]);\n\nexport type LiquidityStateLayoutV5 = typeof liquidityStateV5Layout;\nexport type LiquidityStateV5 = GetStructureSchema<LiquidityStateLayoutV5>;\n\nexport type LiquidityState = LiquidityStateV4 | LiquidityStateV5;\nexport type LiquidityStateLayout = LiquidityStateLayoutV4 | LiquidityStateLayoutV5;\n\n/* ================= index ================= */\n// version => liquidity state layout\nexport const LIQUIDITY_VERSION_TO_STATE_LAYOUT: {\n  [version: number]: LiquidityStateLayout;\n} = {\n  4: liquidityStateV4Layout,\n  5: liquidityStateV5Layout,\n};\nexport const createPoolFeeLayout = struct([u64(\"fee\")]);\n","import { Connection, PublicKey } from \"@solana/web3.js\";\n\nimport { seq, struct, u64 } from \"@/marshmallow\";\n\nexport const MODEL_DATA_PUBKEY = new PublicKey(\"CDSr3ssLcRB6XYPJwAfFt18MZvEZp4LjHcvzBVZ45duo\");\nconst ELEMENT_SIZE = 50000;\n\nexport const DataElement = struct([u64(\"x\"), u64(\"y\"), u64(\"price\")]);\n\nexport const modelDataInfoLayout = struct([\n  u64(\"accountType\"),\n  u64(\"status\"),\n  u64(\"multiplier\"),\n  u64(\"validDataCount\"),\n  seq(DataElement, ELEMENT_SIZE, \"DataElement\"),\n]);\n\nexport interface StableModelLayout {\n  accountType: number;\n  status: number;\n  multiplier: number;\n  validDataCount: number;\n  DataElement: { x: number; y: number; price: number }[];\n}\n\nfunction estimateRangeByXyReal(_xReal: number, _yReal: number): number[] {\n  return [0, ELEMENT_SIZE - 2];\n}\n\nfunction estimateRangeByX(_x: number): number[] {\n  return [0, ELEMENT_SIZE - 2];\n}\n\nfunction estimateRangeByY(_y: number): number[] {\n  return [0, ELEMENT_SIZE - 2];\n}\n\nfunction getMininumRangeByXyReal(\n  layoutData: StableModelLayout,\n  xReal: number,\n  yReal: number,\n): [number, number, boolean] {\n  const [min, max] = estimateRangeByXyReal(xReal, yReal);\n  let minRangeIdx = min;\n  let maxRangeIdx = max;\n  let mid = 0;\n  const target = (xReal * layoutData.multiplier) / yReal;\n  while (minRangeIdx <= maxRangeIdx) {\n    mid = Math.floor((maxRangeIdx + minRangeIdx) / 2);\n    if (mid === 0 || mid >= ELEMENT_SIZE - 2) {\n      return [mid, mid, false];\n    }\n    const cur = (layoutData.DataElement[mid].x * layoutData.multiplier) / layoutData.DataElement[mid].y;\n    const left = (layoutData.DataElement[mid - 1].x * layoutData.multiplier) / layoutData.DataElement[mid - 1].y;\n    const right = (layoutData.DataElement[mid + 1].x * layoutData.multiplier) / layoutData.DataElement[mid + 1].y;\n\n    if (target === cur) {\n      return [mid, mid, true];\n    } else if (target === left) {\n      return [mid - 1, mid - 1, true];\n    } else if (target === right) {\n      return [mid + 1, mid + 1, true];\n    } else if (target < left) {\n      maxRangeIdx = mid - 1;\n    } else if (target > left && target < cur) {\n      return [mid - 1, mid, true];\n    } else if (target > cur && target < right) {\n      return [mid, mid + 1, true];\n    } else {\n      minRangeIdx = mid + 1;\n    }\n  }\n  return [mid, mid, false];\n}\nfunction getRatio(layoutData: StableModelLayout, xReal: number, yReal: number): number {\n  const [minRangeIdx, maxRangeIdx, find] = getMininumRangeByXyReal(layoutData, xReal, yReal);\n\n  if (!find) {\n    return 0;\n  }\n\n  if (minRangeIdx === maxRangeIdx) {\n    const x = layoutData.DataElement[minRangeIdx].x;\n    const ratio = (xReal * layoutData.multiplier) / x;\n    return ratio;\n  } else {\n    const x1 = layoutData.DataElement[minRangeIdx].x;\n    const y1 = layoutData.DataElement[minRangeIdx].y;\n    const x2 = layoutData.DataElement[maxRangeIdx].x;\n    const y2 = layoutData.DataElement[maxRangeIdx].y;\n\n    const xDenominator = yReal * (x2 * y1 - x1 * y2);\n    const xNumerator1 = x1 * xDenominator;\n    const xNumerator2 = (x2 - x1) * (xReal * y1 - x1 * yReal) * y2;\n\n    const xNumerator = xNumerator1 + xNumerator2;\n    const ratio = (xReal * layoutData.multiplier * xDenominator) / xNumerator;\n    return ratio;\n  }\n}\n\nfunction realToTable(layoutData: StableModelLayout, realValue: number, ratio: number): number {\n  return (realValue * layoutData.multiplier) / ratio;\n}\n\nfunction tableToReal(layoutData: StableModelLayout, tableValue: number, ratio: number): number {\n  return (tableValue * ratio) / layoutData.multiplier;\n}\n\nfunction getMinimumRangeByX(layoutData: StableModelLayout, x: number): [number, number, boolean] {\n  const [min, max] = estimateRangeByX(x);\n  let minRangeIdx = min;\n  let maxRangeIdx = max;\n  let mid = 0;\n  const target = x;\n  while (minRangeIdx < maxRangeIdx) {\n    mid = Math.floor((maxRangeIdx + minRangeIdx) / 2);\n\n    if (mid <= 0 || mid > ELEMENT_SIZE - 2) {\n      return [mid, mid, false];\n    }\n    const cur = layoutData.DataElement[mid].x;\n    const left = layoutData.DataElement[mid - 1].x;\n    const right = layoutData.DataElement[mid + 1].x;\n\n    if (target === cur) return [mid, mid, true];\n    else if (target === left) return [mid - 1, mid - 1, true];\n    else if (target === right) return [mid + 1, mid + 1, true];\n    else if (target < left) maxRangeIdx = mid - 1;\n    else if (target > left && target < cur) return [mid - 1, mid, true];\n    else if (target > cur && target < right) return [mid, mid + 1, true];\n    else minRangeIdx = mid + 1;\n  }\n  return [mid, mid, false];\n}\n\nfunction getMinimumRangeByY(layoutData: StableModelLayout, y: number): [number, number, boolean] {\n  const [min, max] = estimateRangeByY(y);\n  let minRangeIdx = min;\n  let maxRangeIdx = max;\n  let mid = 0;\n  const target = y;\n  while (minRangeIdx <= maxRangeIdx) {\n    mid = Math.floor((maxRangeIdx + minRangeIdx) / 2);\n    if (mid <= 0 || mid >= ELEMENT_SIZE - 2) {\n      return [mid, mid, false];\n    }\n\n    const cur = layoutData.DataElement[mid].y;\n    const left = layoutData.DataElement[mid - 1].y;\n    const right = layoutData.DataElement[mid + 1].y;\n    if (target === cur) return [mid, mid, true];\n    else if (target === left) return [mid - 1, mid - 1, true];\n    else if (target === right) return [mid + 1, mid + 1, true];\n    else if (target < right) {\n      minRangeIdx = mid + 1;\n    } else if (target < left && target > cur) return [mid - 1, mid, true];\n    else if (target < cur && target > right) return [mid, mid + 1, true];\n    else maxRangeIdx = mid - 1;\n  }\n  return [mid, mid, false];\n}\n\nfunction getDataByX(\n  layoutData: StableModelLayout,\n  x: number,\n  dx: number,\n  priceUp: boolean,\n): [number, number, boolean, boolean] {\n  const xWithDx = priceUp ? x + dx : x - dx;\n  const [minIdx, maxIdx, find] = getMinimumRangeByX(layoutData, xWithDx);\n  if (!find) return [0, 0, false, find];\n\n  if (minIdx === maxIdx) return [layoutData.DataElement[maxIdx].price, layoutData.DataElement[maxIdx].y, false, find];\n  else {\n    const x1 = layoutData.DataElement[minIdx].x;\n    const x2 = layoutData.DataElement[maxIdx].x;\n    const p1 = layoutData.DataElement[minIdx].price;\n    const p2 = layoutData.DataElement[maxIdx].price;\n    const y1 = layoutData.DataElement[minIdx].y;\n    const y2 = layoutData.DataElement[maxIdx].y;\n\n    if (x >= x1 && x <= x2) {\n      if (priceUp) return [p2, y2, true, find];\n      else return [p1, y1, true, find];\n    } else {\n      let p, y;\n      if (priceUp) {\n        p = p1 + ((p2 - p1) * (x - x1)) / (x2 - x1);\n        y = y1 - ((xWithDx - x1) * layoutData.multiplier) / p2;\n      } else {\n        p = p1 + ((p2 - p1) * (x - x1)) / (x2 - x1);\n        y = y2 + ((x2 - xWithDx) * layoutData.multiplier) / p1;\n      }\n      return [p, y, false, find];\n    }\n  }\n}\n\nfunction getDataByY(\n  layoutData: StableModelLayout,\n  y: number,\n  dy: number,\n  priceUp: boolean,\n): [number, number, boolean, boolean] {\n  const yWithDy = priceUp ? y - dy : y + dy;\n  const [minIdx, maxIdx, find] = getMinimumRangeByY(layoutData, yWithDy);\n  if (!find) return [0, 0, false, find];\n  if (minIdx === maxIdx) return [layoutData.DataElement[maxIdx].price, layoutData.DataElement[maxIdx].x, false, find];\n  else {\n    const x1 = layoutData.DataElement[minIdx].x;\n    const x2 = layoutData.DataElement[maxIdx].x;\n    const p1 = layoutData.DataElement[minIdx].price;\n    const p2 = layoutData.DataElement[maxIdx].price;\n    const y1 = layoutData.DataElement[minIdx].y;\n    const y2 = layoutData.DataElement[maxIdx].y;\n\n    if (y >= y2 && y <= y1) {\n      return priceUp ? [p2, x2, true, find] : [p1, x1, true, find];\n    } else {\n      let p, x;\n      if (priceUp) {\n        p = p1 + ((p2 - p1) * (y1 - y)) / (y1 - y2);\n        x = x1 + (p2 * (y1 - yWithDy)) / layoutData.multiplier;\n      } else {\n        p = p1 + ((p2 - p1) * (y1 - y)) / (y1 - y2);\n        x = x2 - (p1 * (yWithDy - y2)) / layoutData.multiplier;\n      }\n      return [p, x, false, find];\n    }\n  }\n}\n\nfunction getMidPrice(layoutData: StableModelLayout, x: number): number {\n  const ret = getDataByX(layoutData, x, 0, false);\n  if (ret[3]) return ret[0];\n  else return 0;\n}\n\nexport function getDyByDxBaseIn(layoutData: StableModelLayout, xReal: number, yReal: number, dxReal: number): number {\n  const ratio = getRatio(layoutData, xReal, yReal);\n  const x = realToTable(layoutData, xReal, ratio);\n  const y = realToTable(layoutData, yReal, ratio);\n  const dx = realToTable(layoutData, dxReal, ratio);\n  const priceUp = true;\n  const [p, y2, lessTrade, find] = getDataByX(layoutData, x, dx, priceUp);\n  if (!find) return 0;\n  if (lessTrade) {\n    const dyReal = (dxReal * layoutData.multiplier) / p;\n    return dyReal;\n  } else {\n    const dy = y - y2;\n    const dyReal = tableToReal(layoutData, dy, ratio);\n    return dyReal;\n  }\n}\n\nexport function getDxByDyBaseIn(layoutData: StableModelLayout, xReal: number, yReal: number, dyReal: number): number {\n  const ratio = getRatio(layoutData, xReal, yReal);\n  const x = realToTable(layoutData, xReal, ratio);\n  const y = realToTable(layoutData, yReal, ratio);\n  const dy = realToTable(layoutData, dyReal, ratio);\n  const priceUp = false;\n  const [p, x2, lessTrade, find] = getDataByY(layoutData, y, dy, priceUp);\n  if (!find) return 0;\n  if (lessTrade) {\n    const dxReal = (dyReal * p) / layoutData.multiplier;\n    return dxReal;\n  } else {\n    const dx = x - x2;\n    const dxReal = tableToReal(layoutData, dx, ratio);\n    return dxReal;\n  }\n}\n\nexport function formatLayout(buffer: Buffer): StableModelLayout {\n  const layoutInfo = modelDataInfoLayout.decode(buffer);\n  return {\n    accountType: layoutInfo.accountType.toNumber(),\n    status: layoutInfo.status.toNumber(),\n    multiplier: layoutInfo.multiplier.toNumber(),\n    validDataCount: layoutInfo.validDataCount.toNumber(),\n    DataElement: layoutInfo.DataElement.map((item: any) => ({\n      x: item.x.toNumber(),\n      y: item.y.toNumber(),\n      price: item.price.toNumber(),\n    })),\n  };\n}\n\nexport function getStablePrice(\n  layoutData: StableModelLayout,\n  coinReal: number,\n  pcReal: number,\n  baseCoin: boolean,\n): number {\n  const price =\n    getMidPrice(layoutData, realToTable(layoutData, coinReal, getRatio(layoutData, coinReal, pcReal))) /\n    layoutData.multiplier;\n  return baseCoin ? price : 1 / price;\n}\n\nexport class StableLayout {\n  private readonly connection: Connection;\n  private _layoutData: StableModelLayout = {\n    accountType: 0,\n    status: 0,\n    multiplier: 0,\n    validDataCount: 0,\n    DataElement: [],\n  };\n\n  constructor({ connection }: { connection: Connection }) {\n    this.connection = connection;\n  }\n\n  get stableModelData(): StableModelLayout {\n    return this._layoutData;\n  }\n\n  public async initStableModelLayout(): Promise<void> {\n    if (this._layoutData.validDataCount === 0) {\n      if (this.connection) {\n        const acc = await this.connection.getAccountInfo(MODEL_DATA_PUBKEY);\n        if (acc) this._layoutData = formatLayout(acc?.data);\n      }\n    }\n  }\n}\n","import { TOKEN_PROGRAM_ID, TOKEN_2022_PROGRAM_ID, ASSOCIATED_TOKEN_PROGRAM_ID } from \"@solana/spl-token\";\nimport {\n  PublicKey,\n  TransactionInstruction,\n  ComputeBudgetProgram,\n  SystemProgram,\n  Connection,\n  Keypair,\n  Signer,\n} from \"@solana/web3.js\";\nimport BN from \"bn.js\";\nimport {\n  createLogger,\n  parseBigNumberish,\n  RENT_PROGRAM_ID,\n  METADATA_PROGRAM_ID,\n  InstructionType,\n  getATAAddress,\n  MEMO_PROGRAM_ID,\n} from \"@/common\";\nimport { bool, s32, struct, u128, u64, u8 } from \"@/marshmallow\";\nimport {\n  ReturnTypeMakeInstructions,\n  ClmmPoolPersonalPosition,\n  OpenPositionFromLiquidityExtInfo,\n  ManipulateLiquidityExtInfo,\n  ClosePositionExtInfo,\n  InitRewardExtInfo,\n  OpenPositionFromBaseExtInfo,\n} from \"./type\";\nimport { ClmmPositionLayout, ObservationInfoLayout } from \"./layout\";\nimport {\n  getPdaPoolId,\n  getPdaPoolVaultId,\n  getPdaTickArrayAddress,\n  getPdaMetadataKey,\n  getPdaProtocolPositionAddress,\n  getPdaPersonalPositionAddress,\n  getPdaOperationAccount,\n  getPdaExBitmapAccount,\n  getPdaPoolRewardVaulId,\n} from \"./utils/pda\";\nimport { TickUtils } from \"./utils/tick\";\nimport { PoolUtils } from \"./utils/pool\";\nimport { generatePubKey } from \"../account/util\";\nimport { ApiV3Token, ApiV3PoolInfoConcentratedItem, ClmmKeys } from \"@/api/type\";\n\nconst logger = createLogger(\"Raydium_Clmm\");\n\nconst anchorDataBuf = {\n  createPool: [233, 146, 209, 142, 207, 104, 64, 188],\n  initReward: [95, 135, 192, 196, 242, 129, 230, 68],\n  setRewardEmissions: [112, 52, 167, 75, 32, 201, 211, 137],\n  openPosition: [77, 184, 74, 214, 112, 86, 241, 199],\n  closePosition: [123, 134, 81, 0, 49, 68, 98, 98],\n  increaseLiquidity: [133, 29, 89, 223, 69, 238, 176, 10],\n  decreaseLiquidity: [58, 127, 188, 62, 79, 82, 196, 96],\n  swap: [43, 4, 237, 11, 26, 201, 30, 98], // [248, 198, 158, 145, 225, 117, 135, 200],\n  collectReward: [18, 237, 166, 197, 34, 16, 213, 144],\n};\n\ninterface CreatePoolInstruction {\n  connection: Connection;\n  programId: PublicKey;\n  owner: PublicKey;\n  mintA: ApiV3Token;\n  mintB: ApiV3Token;\n  ammConfigId: PublicKey;\n  initialPriceX64: BN;\n  startTime: BN;\n  forerunCreate?: boolean;\n}\n\nexport class ClmmInstrument {\n  static createPoolInstruction(\n    programId: PublicKey,\n    poolId: PublicKey,\n    poolCreator: PublicKey,\n    ammConfigId: PublicKey,\n    observationId: PublicKey,\n    mintA: PublicKey,\n    mintVaultA: PublicKey,\n    mintProgramIdA: PublicKey,\n    mintB: PublicKey,\n    mintVaultB: PublicKey,\n    mintProgramIdB: PublicKey,\n    exTickArrayBitmap: PublicKey,\n    sqrtPriceX64: BN,\n    startTime: BN,\n  ): TransactionInstruction {\n    const dataLayout = struct([u128(\"sqrtPriceX64\"), u64(\"startTime\")]);\n\n    const keys = [\n      { pubkey: poolCreator, isSigner: true, isWritable: true },\n      { pubkey: ammConfigId, isSigner: false, isWritable: false },\n      { pubkey: poolId, isSigner: false, isWritable: true },\n      { pubkey: mintA, isSigner: false, isWritable: false },\n      { pubkey: mintB, isSigner: false, isWritable: false },\n      { pubkey: mintVaultA, isSigner: false, isWritable: true },\n      { pubkey: mintVaultB, isSigner: false, isWritable: true },\n      { pubkey: observationId, isSigner: false, isWritable: false },\n      { pubkey: exTickArrayBitmap, isSigner: false, isWritable: true },\n      { pubkey: mintProgramIdA, isSigner: false, isWritable: false },\n      { pubkey: mintProgramIdB, isSigner: false, isWritable: false },\n      { pubkey: SystemProgram.programId, isSigner: false, isWritable: false },\n      { pubkey: RENT_PROGRAM_ID, isSigner: false, isWritable: false },\n    ];\n\n    const data = Buffer.alloc(dataLayout.span);\n    dataLayout.encode(\n      {\n        sqrtPriceX64,\n        startTime,\n      },\n      data,\n    );\n    const aData = Buffer.from([...anchorDataBuf.createPool, ...data]);\n\n    return new TransactionInstruction({\n      keys,\n      programId,\n      data: aData,\n    });\n  }\n\n  static async createPoolInstructions(props: CreatePoolInstruction): Promise<\n    ReturnTypeMakeInstructions<{\n      poolId: PublicKey;\n      observationId: PublicKey;\n      mintAVault: PublicKey;\n      mintBVault: PublicKey;\n    }>\n  > {\n    const { connection, programId, owner, mintA, mintB, ammConfigId, initialPriceX64, startTime, forerunCreate } =\n      props;\n    const observationId = generatePubKey({ fromPublicKey: owner, programId });\n    const [mintAAddress, mintBAddress] = [new PublicKey(mintA.address), new PublicKey(mintB.address)];\n    const ins = [\n      SystemProgram.createAccountWithSeed({\n        fromPubkey: owner,\n        basePubkey: owner,\n        seed: observationId.seed,\n        newAccountPubkey: observationId.publicKey,\n        lamports: forerunCreate ? 0 : await connection.getMinimumBalanceForRentExemption(ObservationInfoLayout.span),\n        space: ObservationInfoLayout.span,\n        programId,\n      }),\n    ];\n\n    const { publicKey: poolId } = getPdaPoolId(programId, ammConfigId, mintAAddress, mintBAddress);\n    const { publicKey: mintAVault } = getPdaPoolVaultId(programId, poolId, mintAAddress);\n    const { publicKey: mintBVault } = getPdaPoolVaultId(programId, poolId, mintBAddress);\n\n    ins.push(\n      this.createPoolInstruction(\n        programId,\n        poolId,\n        owner,\n        ammConfigId,\n        observationId.publicKey,\n        mintAAddress,\n        mintAVault,\n        new PublicKey(mintA.programId || TOKEN_PROGRAM_ID),\n        mintBAddress,\n        mintBVault,\n        new PublicKey(mintB.programId || TOKEN_PROGRAM_ID),\n        getPdaExBitmapAccount(programId, poolId).publicKey,\n        initialPriceX64,\n        startTime,\n      ),\n    );\n\n    return {\n      signers: [],\n      instructions: ins,\n      instructionTypes: [InstructionType.CreateAccount, InstructionType.ClmmCreatePool],\n      address: { poolId, observationId: observationId.publicKey, mintAVault, mintBVault },\n      lookupTableAddress: [],\n    };\n  }\n\n  static openPositionFromLiquidityInstruction(\n    programId: PublicKey,\n    payer: PublicKey,\n    poolId: PublicKey,\n    positionNftOwner: PublicKey,\n    positionNftMint: PublicKey,\n    positionNftAccount: PublicKey,\n    metadataAccount: PublicKey,\n    protocolPosition: PublicKey,\n    tickArrayLower: PublicKey,\n    tickArrayUpper: PublicKey,\n    personalPosition: PublicKey,\n    ownerTokenAccountA: PublicKey,\n    ownerTokenAccountB: PublicKey,\n    tokenVaultA: PublicKey,\n    tokenVaultB: PublicKey,\n    tokenMintA: PublicKey,\n    tokenMintB: PublicKey,\n\n    tickLowerIndex: number,\n    tickUpperIndex: number,\n    tickArrayLowerStartIndex: number,\n    tickArrayUpperStartIndex: number,\n    liquidity: BN,\n    amountMaxA: BN,\n    amountMaxB: BN,\n    withMetadata: \"create\" | \"no-create\",\n\n    exTickArrayBitmap?: PublicKey,\n  ): TransactionInstruction {\n    const dataLayout = struct([\n      s32(\"tickLowerIndex\"),\n      s32(\"tickUpperIndex\"),\n      s32(\"tickArrayLowerStartIndex\"),\n      s32(\"tickArrayUpperStartIndex\"),\n      u128(\"liquidity\"),\n      u64(\"amountMaxA\"),\n      u64(\"amountMaxB\"),\n      bool(\"withMetadata\"),\n      u8(\"optionBaseFlag\"),\n      bool(\"baseFlag\"),\n    ]);\n\n    const remainingAccounts = [\n      ...(exTickArrayBitmap ? [{ pubkey: exTickArrayBitmap, isSigner: false, isWritable: true }] : []),\n    ];\n\n    const keys = [\n      { pubkey: payer, isSigner: true, isWritable: true },\n      { pubkey: positionNftOwner, isSigner: false, isWritable: false },\n      { pubkey: positionNftMint, isSigner: true, isWritable: true },\n      { pubkey: positionNftAccount, isSigner: false, isWritable: true },\n      { pubkey: metadataAccount, isSigner: false, isWritable: true },\n      { pubkey: poolId, isSigner: false, isWritable: true },\n      { pubkey: protocolPosition, isSigner: false, isWritable: true },\n      { pubkey: tickArrayLower, isSigner: false, isWritable: true },\n      { pubkey: tickArrayUpper, isSigner: false, isWritable: true },\n      { pubkey: personalPosition, isSigner: false, isWritable: true },\n      { pubkey: ownerTokenAccountA, isSigner: false, isWritable: true },\n      { pubkey: ownerTokenAccountB, isSigner: false, isWritable: true },\n      { pubkey: tokenVaultA, isSigner: false, isWritable: true },\n      { pubkey: tokenVaultB, isSigner: false, isWritable: true },\n\n      { pubkey: RENT_PROGRAM_ID, isSigner: false, isWritable: false },\n      { pubkey: SystemProgram.programId, isSigner: false, isWritable: false },\n      { pubkey: TOKEN_PROGRAM_ID, isSigner: false, isWritable: false },\n      { pubkey: ASSOCIATED_TOKEN_PROGRAM_ID, isSigner: false, isWritable: false },\n      { pubkey: METADATA_PROGRAM_ID, isSigner: false, isWritable: false },\n      { pubkey: TOKEN_2022_PROGRAM_ID, isSigner: false, isWritable: false },\n\n      { pubkey: tokenMintA, isSigner: false, isWritable: false },\n      { pubkey: tokenMintB, isSigner: false, isWritable: false },\n\n      ...remainingAccounts,\n    ];\n\n    const data = Buffer.alloc(dataLayout.span);\n    dataLayout.encode(\n      {\n        tickLowerIndex,\n        tickUpperIndex,\n        tickArrayLowerStartIndex,\n        tickArrayUpperStartIndex,\n        liquidity,\n        amountMaxA,\n        amountMaxB,\n        withMetadata: withMetadata === \"create\",\n        baseFlag: false,\n        optionBaseFlag: 0,\n      },\n      data,\n    );\n\n    const aData = Buffer.from([...anchorDataBuf.openPosition, ...data]);\n\n    return new TransactionInstruction({\n      keys,\n      programId,\n      data: aData,\n    });\n  }\n\n  static async openPositionInstructions({\n    poolInfo,\n    poolKeys,\n    ownerInfo,\n    tickLower,\n    tickUpper,\n    liquidity,\n    amountMaxA,\n    amountMaxB,\n    withMetadata,\n    getEphemeralSigners,\n  }: {\n    poolInfo: ApiV3PoolInfoConcentratedItem;\n    poolKeys: ClmmKeys;\n    ownerInfo: {\n      feePayer: PublicKey;\n      wallet: PublicKey;\n      tokenAccountA: PublicKey;\n      tokenAccountB: PublicKey;\n    };\n\n    tickLower: number;\n    tickUpper: number;\n    liquidity: BN;\n    amountMaxA: BN;\n    amountMaxB: BN;\n    withMetadata: \"create\" | \"no-create\";\n    getEphemeralSigners?: (k: number) => any;\n  }): Promise<ReturnTypeMakeInstructions> {\n    const signers: Signer[] = [];\n    const [programId, id] = [new PublicKey(poolInfo.programId), new PublicKey(poolInfo.id)];\n\n    let nftMintAccount;\n    if (getEphemeralSigners) {\n      nftMintAccount = new PublicKey((await getEphemeralSigners(1))[0]);\n    } else {\n      const _k = Keypair.generate();\n      signers.push(_k);\n      nftMintAccount = _k.publicKey;\n    }\n\n    const tickArrayLowerStartIndex = TickUtils.getTickArrayStartIndexByTick(tickLower, poolInfo.config.tickSpacing);\n    const tickArrayUpperStartIndex = TickUtils.getTickArrayStartIndexByTick(tickUpper, poolInfo.config.tickSpacing);\n\n    const { publicKey: tickArrayLower } = getPdaTickArrayAddress(programId, id, tickArrayLowerStartIndex);\n    const { publicKey: tickArrayUpper } = getPdaTickArrayAddress(programId, id, tickArrayUpperStartIndex);\n\n    const { publicKey: positionNftAccount } = getATAAddress(ownerInfo.wallet, nftMintAccount, TOKEN_PROGRAM_ID);\n    const { publicKey: metadataAccount } = getPdaMetadataKey(nftMintAccount);\n    const { publicKey: personalPosition } = getPdaPersonalPositionAddress(programId, nftMintAccount);\n    const { publicKey: protocolPosition } = getPdaProtocolPositionAddress(programId, id, tickLower, tickUpper);\n\n    const ins = this.openPositionFromLiquidityInstruction(\n      programId,\n      ownerInfo.feePayer,\n      id,\n      ownerInfo.wallet,\n      nftMintAccount,\n      positionNftAccount,\n      metadataAccount,\n      protocolPosition,\n      tickArrayLower,\n      tickArrayUpper,\n      personalPosition,\n      ownerInfo.tokenAccountA,\n      ownerInfo.tokenAccountB,\n      new PublicKey(poolKeys.vault.A),\n      new PublicKey(poolKeys.vault.B),\n      new PublicKey(poolInfo.mintA.address),\n      new PublicKey(poolInfo.mintB.address),\n\n      tickLower,\n      tickUpper,\n      tickArrayLowerStartIndex,\n      tickArrayUpperStartIndex,\n      liquidity,\n      amountMaxA,\n      amountMaxB,\n      withMetadata,\n    );\n\n    return {\n      signers,\n      instructions: [ins],\n      instructionTypes: [InstructionType.ClmmOpenPosition],\n      lookupTableAddress: poolKeys.lookupTableAccount ? [poolKeys.lookupTableAccount] : [],\n      address: {\n        nftMint: nftMintAccount,\n        tickArrayLower,\n        tickArrayUpper,\n        positionNftAccount,\n        metadataAccount,\n        personalPosition,\n        protocolPosition,\n      },\n    };\n  }\n\n  static async openPositionFromBaseInstructions({\n    poolInfo,\n    poolKeys,\n    ownerInfo,\n    tickLower,\n    tickUpper,\n    base,\n    baseAmount,\n    otherAmountMax,\n    withMetadata,\n    getEphemeralSigners,\n  }: {\n    poolInfo: ApiV3PoolInfoConcentratedItem;\n    poolKeys: ClmmKeys;\n    ownerInfo: {\n      feePayer: PublicKey;\n      wallet: PublicKey;\n      tokenAccountA: PublicKey;\n      tokenAccountB: PublicKey;\n    };\n\n    tickLower: number;\n    tickUpper: number;\n\n    base: \"MintA\" | \"MintB\";\n    baseAmount: BN;\n\n    otherAmountMax: BN;\n    withMetadata: \"create\" | \"no-create\";\n    getEphemeralSigners?: (k: number) => any;\n  }): Promise<ReturnTypeMakeInstructions<OpenPositionFromBaseExtInfo>> {\n    const signers: Signer[] = [];\n    const [programId, id] = [new PublicKey(poolInfo.programId), new PublicKey(poolInfo.id)];\n\n    let nftMintAccount: PublicKey;\n    if (getEphemeralSigners) {\n      nftMintAccount = new PublicKey((await getEphemeralSigners(1))[0]);\n    } else {\n      const _k = Keypair.generate();\n      signers.push(_k);\n      nftMintAccount = _k.publicKey;\n    }\n\n    const tickArrayLowerStartIndex = TickUtils.getTickArrayStartIndexByTick(tickLower, poolInfo.config.tickSpacing);\n    const tickArrayUpperStartIndex = TickUtils.getTickArrayStartIndexByTick(tickUpper, poolInfo.config.tickSpacing);\n\n    const { publicKey: tickArrayLower } = getPdaTickArrayAddress(programId, id, tickArrayLowerStartIndex);\n    const { publicKey: tickArrayUpper } = getPdaTickArrayAddress(programId, id, tickArrayUpperStartIndex);\n\n    const { publicKey: positionNftAccount } = getATAAddress(ownerInfo.wallet, nftMintAccount, TOKEN_PROGRAM_ID);\n    const { publicKey: metadataAccount } = getPdaMetadataKey(nftMintAccount);\n    const { publicKey: personalPosition } = getPdaPersonalPositionAddress(programId, nftMintAccount);\n    const { publicKey: protocolPosition } = getPdaProtocolPositionAddress(programId, id, tickLower, tickUpper);\n\n    const ins = this.openPositionFromBaseInstruction(\n      programId,\n      ownerInfo.feePayer,\n      id,\n      ownerInfo.wallet,\n      nftMintAccount,\n      positionNftAccount,\n      metadataAccount,\n      protocolPosition,\n      tickArrayLower,\n      tickArrayUpper,\n      personalPosition,\n      ownerInfo.tokenAccountA,\n      ownerInfo.tokenAccountB,\n      new PublicKey(poolKeys.vault.A),\n      new PublicKey(poolKeys.vault.B),\n      new PublicKey(poolInfo.mintA.address),\n      new PublicKey(poolInfo.mintB.address),\n\n      tickLower,\n      tickUpper,\n      tickArrayLowerStartIndex,\n      tickArrayUpperStartIndex,\n\n      withMetadata,\n\n      base,\n      baseAmount,\n\n      otherAmountMax,\n      PoolUtils.isOverflowDefaultTickarrayBitmap(poolInfo.config.tickSpacing, [\n        tickArrayLowerStartIndex,\n        tickArrayUpperStartIndex,\n      ])\n        ? getPdaExBitmapAccount(programId, id).publicKey\n        : undefined,\n    );\n\n    return {\n      address: {\n        nftMint: nftMintAccount,\n        tickArrayLower,\n        tickArrayUpper,\n        positionNftAccount,\n        metadataAccount,\n        personalPosition,\n        protocolPosition,\n      },\n      instructions: [ins],\n      signers,\n      instructionTypes: [InstructionType.ClmmOpenPosition],\n      lookupTableAddress: poolKeys.lookupTableAccount ? [poolKeys.lookupTableAccount] : [],\n    };\n  }\n\n  static openPositionFromBaseInstruction(\n    programId: PublicKey,\n    payer: PublicKey,\n    poolId: PublicKey,\n    positionNftOwner: PublicKey,\n    positionNftMint: PublicKey,\n    positionNftAccount: PublicKey,\n    metadataAccount: PublicKey,\n    protocolPosition: PublicKey,\n    tickArrayLower: PublicKey,\n    tickArrayUpper: PublicKey,\n    personalPosition: PublicKey,\n    ownerTokenAccountA: PublicKey,\n    ownerTokenAccountB: PublicKey,\n    tokenVaultA: PublicKey,\n    tokenVaultB: PublicKey,\n    tokenMintA: PublicKey,\n    tokenMintB: PublicKey,\n\n    tickLowerIndex: number,\n    tickUpperIndex: number,\n    tickArrayLowerStartIndex: number,\n    tickArrayUpperStartIndex: number,\n\n    withMetadata: \"create\" | \"no-create\",\n    base: \"MintA\" | \"MintB\",\n    baseAmount: BN,\n\n    otherAmountMax: BN,\n\n    exTickArrayBitmap?: PublicKey,\n  ): TransactionInstruction {\n    const dataLayout = struct([\n      s32(\"tickLowerIndex\"),\n      s32(\"tickUpperIndex\"),\n      s32(\"tickArrayLowerStartIndex\"),\n      s32(\"tickArrayUpperStartIndex\"),\n      u128(\"liquidity\"),\n      u64(\"amountMaxA\"),\n      u64(\"amountMaxB\"),\n      bool(\"withMetadata\"),\n      u8(\"optionBaseFlag\"),\n      bool(\"baseFlag\"),\n    ]);\n\n    const remainingAccounts = [\n      ...(exTickArrayBitmap ? [{ pubkey: exTickArrayBitmap, isSigner: false, isWritable: true }] : []),\n    ];\n\n    const keys = [\n      { pubkey: payer, isSigner: true, isWritable: true },\n      { pubkey: positionNftOwner, isSigner: false, isWritable: false },\n      { pubkey: positionNftMint, isSigner: true, isWritable: true },\n      { pubkey: positionNftAccount, isSigner: false, isWritable: true },\n      { pubkey: metadataAccount, isSigner: false, isWritable: true },\n      { pubkey: poolId, isSigner: false, isWritable: true },\n      { pubkey: protocolPosition, isSigner: false, isWritable: true },\n      { pubkey: tickArrayLower, isSigner: false, isWritable: true },\n      { pubkey: tickArrayUpper, isSigner: false, isWritable: true },\n      { pubkey: personalPosition, isSigner: false, isWritable: true },\n      { pubkey: ownerTokenAccountA, isSigner: false, isWritable: true },\n      { pubkey: ownerTokenAccountB, isSigner: false, isWritable: true },\n      { pubkey: tokenVaultA, isSigner: false, isWritable: true },\n      { pubkey: tokenVaultB, isSigner: false, isWritable: true },\n\n      { pubkey: RENT_PROGRAM_ID, isSigner: false, isWritable: false },\n      { pubkey: SystemProgram.programId, isSigner: false, isWritable: false },\n      { pubkey: TOKEN_PROGRAM_ID, isSigner: false, isWritable: false },\n      { pubkey: ASSOCIATED_TOKEN_PROGRAM_ID, isSigner: false, isWritable: false },\n      { pubkey: METADATA_PROGRAM_ID, isSigner: false, isWritable: false },\n      { pubkey: TOKEN_2022_PROGRAM_ID, isSigner: false, isWritable: false },\n\n      { pubkey: tokenMintA, isSigner: false, isWritable: false },\n      { pubkey: tokenMintB, isSigner: false, isWritable: false },\n\n      ...remainingAccounts,\n    ];\n\n    const data = Buffer.alloc(dataLayout.span);\n    dataLayout.encode(\n      {\n        tickLowerIndex,\n        tickUpperIndex,\n        tickArrayLowerStartIndex,\n        tickArrayUpperStartIndex,\n        liquidity: new BN(0),\n        amountMaxA: base === \"MintA\" ? baseAmount : otherAmountMax,\n        amountMaxB: base === \"MintA\" ? otherAmountMax : baseAmount,\n        withMetadata: withMetadata === \"create\",\n        baseFlag: base === \"MintA\",\n        optionBaseFlag: 1,\n      },\n      data,\n    );\n\n    const aData = Buffer.from([...anchorDataBuf.openPosition, ...data]);\n\n    return new TransactionInstruction({\n      keys,\n      programId,\n      data: aData,\n    });\n  }\n\n  static async openPositionFromLiquidityInstructions({\n    poolInfo,\n    poolKeys,\n    ownerInfo,\n    tickLower,\n    tickUpper,\n    liquidity,\n    amountMaxA,\n    amountMaxB,\n    withMetadata,\n    getEphemeralSigners,\n  }: {\n    poolInfo: ApiV3PoolInfoConcentratedItem;\n    poolKeys: ClmmKeys;\n    ownerInfo: {\n      wallet: PublicKey;\n      tokenAccountA: PublicKey;\n      tokenAccountB: PublicKey;\n    };\n\n    tickLower: number;\n    tickUpper: number;\n    liquidity: BN;\n    amountMaxA: BN;\n    amountMaxB: BN;\n    withMetadata: \"create\" | \"no-create\";\n    getEphemeralSigners?: (k: number) => any;\n  }): Promise<ReturnTypeMakeInstructions<OpenPositionFromLiquidityExtInfo[\"address\"]>> {\n    let nftMintAccount: PublicKey;\n    const signers: Keypair[] = [];\n    if (getEphemeralSigners) {\n      nftMintAccount = new PublicKey((await getEphemeralSigners(1))[0]);\n    } else {\n      const _k = Keypair.generate();\n      signers.push(_k);\n      nftMintAccount = _k.publicKey;\n    }\n\n    const [programId, id] = [new PublicKey(poolInfo.programId), new PublicKey(poolInfo.id)];\n\n    const tickArrayLowerStartIndex = TickUtils.getTickArrayStartIndexByTick(tickLower, poolInfo.config.tickSpacing);\n    const tickArrayUpperStartIndex = TickUtils.getTickArrayStartIndexByTick(tickUpper, poolInfo.config.tickSpacing);\n\n    const { publicKey: tickArrayLower } = getPdaTickArrayAddress(programId, id, tickArrayLowerStartIndex);\n    const { publicKey: tickArrayUpper } = getPdaTickArrayAddress(programId, id, tickArrayUpperStartIndex);\n\n    const { publicKey: positionNftAccount } = getATAAddress(ownerInfo.wallet, nftMintAccount, TOKEN_PROGRAM_ID);\n    const { publicKey: metadataAccount } = getPdaMetadataKey(nftMintAccount);\n    const { publicKey: personalPosition } = getPdaPersonalPositionAddress(programId, nftMintAccount);\n    const { publicKey: protocolPosition } = getPdaProtocolPositionAddress(programId, id, tickLower, tickUpper);\n\n    const ins = this.openPositionFromLiquidityInstruction(\n      programId,\n      ownerInfo.wallet,\n      id,\n      ownerInfo.wallet,\n      nftMintAccount,\n      positionNftAccount,\n      metadataAccount,\n      protocolPosition,\n      tickArrayLower,\n      tickArrayUpper,\n      personalPosition,\n      ownerInfo.tokenAccountA,\n      ownerInfo.tokenAccountB,\n      new PublicKey(poolKeys.vault.A),\n      new PublicKey(poolKeys.vault.B),\n      new PublicKey(poolKeys.mintA.address),\n      new PublicKey(poolKeys.mintB.address),\n\n      tickLower,\n      tickUpper,\n      tickArrayLowerStartIndex,\n      tickArrayUpperStartIndex,\n      liquidity,\n      amountMaxA,\n      amountMaxB,\n      withMetadata,\n      PoolUtils.isOverflowDefaultTickarrayBitmap(poolInfo.config.tickSpacing, [\n        tickArrayLowerStartIndex,\n        tickArrayUpperStartIndex,\n      ])\n        ? getPdaExBitmapAccount(programId, id).publicKey\n        : undefined,\n    );\n\n    return {\n      address: {\n        nftMint: nftMintAccount,\n        tickArrayLower,\n        tickArrayUpper,\n        positionNftAccount,\n        metadataAccount,\n        personalPosition,\n        protocolPosition,\n      },\n      instructions: [ins],\n      signers,\n      instructionTypes: [InstructionType.ClmmOpenPosition],\n      lookupTableAddress: poolKeys.lookupTableAccount ? [poolKeys.lookupTableAccount] : [],\n    };\n  }\n\n  static closePositionInstruction(\n    programId: PublicKey,\n    positionNftOwner: PublicKey,\n    positionNftMint: PublicKey,\n    positionNftAccount: PublicKey,\n    personalPosition: PublicKey,\n  ): TransactionInstruction {\n    const dataLayout = struct([]);\n\n    const keys = [\n      { pubkey: positionNftOwner, isSigner: true, isWritable: true },\n      { pubkey: positionNftMint, isSigner: false, isWritable: true },\n      { pubkey: positionNftAccount, isSigner: false, isWritable: true },\n      { pubkey: personalPosition, isSigner: false, isWritable: true },\n\n      { pubkey: SystemProgram.programId, isSigner: false, isWritable: false },\n      { pubkey: TOKEN_PROGRAM_ID, isSigner: false, isWritable: false },\n    ];\n\n    const data = Buffer.alloc(dataLayout.span);\n    dataLayout.encode({}, data);\n\n    const aData = Buffer.from([...anchorDataBuf.closePosition, ...data]);\n\n    return new TransactionInstruction({\n      keys,\n      programId,\n      data: aData,\n    });\n  }\n\n  static closePositionInstructions({\n    poolInfo,\n    poolKeys,\n    ownerInfo,\n    ownerPosition,\n  }: {\n    poolInfo: ApiV3PoolInfoConcentratedItem;\n    poolKeys: ClmmKeys;\n    ownerPosition: ClmmPositionLayout;\n    ownerInfo: {\n      wallet: PublicKey;\n    };\n  }): ReturnTypeMakeInstructions<ClosePositionExtInfo[\"address\"]> {\n    const programId = new PublicKey(poolInfo.programId);\n    const { publicKey: positionNftAccount } = getATAAddress(ownerInfo.wallet, ownerPosition.nftMint, TOKEN_PROGRAM_ID);\n    const { publicKey: personalPosition } = getPdaPersonalPositionAddress(programId, ownerPosition.nftMint);\n\n    const ins: TransactionInstruction[] = [];\n    ins.push(\n      this.closePositionInstruction(\n        programId,\n        ownerInfo.wallet,\n        ownerPosition.nftMint,\n        positionNftAccount,\n        personalPosition,\n      ),\n    );\n\n    return {\n      address: {\n        positionNftAccount,\n        personalPosition,\n      },\n      signers: [],\n      instructions: ins,\n      instructionTypes: [InstructionType.ClmmClosePosition],\n      lookupTableAddress: poolKeys.lookupTableAccount ? [poolKeys.lookupTableAccount] : [],\n    };\n  }\n\n  static increasePositionFromLiquidityInstruction(\n    programId: PublicKey,\n    positionNftOwner: PublicKey,\n    positionNftAccount: PublicKey,\n    personalPosition: PublicKey,\n\n    poolId: PublicKey,\n    protocolPosition: PublicKey,\n    tickArrayLower: PublicKey,\n    tickArrayUpper: PublicKey,\n    ownerTokenAccountA: PublicKey,\n    ownerTokenAccountB: PublicKey,\n    mintVaultA: PublicKey,\n    mintVaultB: PublicKey,\n    mintMintA: PublicKey,\n    mintMintB: PublicKey,\n\n    liquidity: BN,\n    amountMaxA: BN,\n    amountMaxB: BN,\n\n    exTickArrayBitmap?: PublicKey,\n  ): TransactionInstruction {\n    const dataLayout = struct([\n      u128(\"liquidity\"),\n      u64(\"amountMaxA\"),\n      u64(\"amountMaxB\"),\n      u8(\"optionBaseFlag\"),\n      bool(\"baseFlag\"),\n    ]);\n\n    const remainingAccounts = [\n      ...(exTickArrayBitmap ? [{ pubkey: exTickArrayBitmap, isSigner: false, isWritable: true }] : []),\n    ];\n\n    const keys = [\n      { pubkey: positionNftOwner, isSigner: true, isWritable: false },\n      { pubkey: positionNftAccount, isSigner: false, isWritable: false },\n      { pubkey: poolId, isSigner: false, isWritable: true },\n      { pubkey: protocolPosition, isSigner: false, isWritable: true },\n      { pubkey: personalPosition, isSigner: false, isWritable: true },\n      { pubkey: tickArrayLower, isSigner: false, isWritable: true },\n      { pubkey: tickArrayUpper, isSigner: false, isWritable: true },\n      { pubkey: ownerTokenAccountA, isSigner: false, isWritable: true },\n      { pubkey: ownerTokenAccountB, isSigner: false, isWritable: true },\n      { pubkey: mintVaultA, isSigner: false, isWritable: true },\n      { pubkey: mintVaultB, isSigner: false, isWritable: true },\n\n      { pubkey: TOKEN_PROGRAM_ID, isSigner: false, isWritable: false },\n      { pubkey: TOKEN_2022_PROGRAM_ID, isSigner: false, isWritable: false },\n\n      { pubkey: mintMintA, isSigner: false, isWritable: false },\n      { pubkey: mintMintB, isSigner: false, isWritable: false },\n\n      ...remainingAccounts,\n    ];\n\n    const data = Buffer.alloc(dataLayout.span);\n    dataLayout.encode(\n      {\n        liquidity,\n        amountMaxA,\n        amountMaxB,\n        optionBaseFlag: 0,\n        baseFlag: false,\n      },\n      data,\n    );\n\n    const aData = Buffer.from([...anchorDataBuf.increaseLiquidity, ...data]);\n\n    return new TransactionInstruction({\n      keys,\n      programId,\n      data: aData,\n    });\n  }\n\n  static increasePositionFromLiquidityInstructions({\n    poolInfo,\n    poolKeys,\n    ownerPosition,\n    ownerInfo,\n    liquidity,\n    amountMaxA,\n    amountMaxB,\n  }: {\n    poolInfo: ApiV3PoolInfoConcentratedItem;\n    poolKeys: ClmmKeys;\n    ownerPosition: ClmmPositionLayout;\n\n    ownerInfo: {\n      wallet: PublicKey;\n      tokenAccountA: PublicKey;\n      tokenAccountB: PublicKey;\n    };\n\n    liquidity: BN;\n    amountMaxA: BN;\n    amountMaxB: BN;\n  }): ReturnTypeMakeInstructions<ManipulateLiquidityExtInfo[\"address\"]> {\n    const [programId, id] = [new PublicKey(poolInfo.programId), new PublicKey(poolInfo.id)];\n    const tickArrayLowerStartIndex = TickUtils.getTickArrayStartIndexByTick(\n      ownerPosition.tickLower,\n      poolInfo.config.tickSpacing,\n    );\n    const tickArrayUpperStartIndex = TickUtils.getTickArrayStartIndexByTick(\n      ownerPosition.tickUpper,\n      poolInfo.config.tickSpacing,\n    );\n\n    const { publicKey: tickArrayLower } = getPdaTickArrayAddress(programId, id, tickArrayLowerStartIndex);\n    const { publicKey: tickArrayUpper } = getPdaTickArrayAddress(programId, id, tickArrayUpperStartIndex);\n\n    const { publicKey: positionNftAccount } = getATAAddress(ownerInfo.wallet, ownerPosition.nftMint, TOKEN_PROGRAM_ID);\n\n    const { publicKey: personalPosition } = getPdaPersonalPositionAddress(programId, ownerPosition.nftMint);\n    const { publicKey: protocolPosition } = getPdaProtocolPositionAddress(\n      programId,\n      id,\n      ownerPosition.tickLower,\n      ownerPosition.tickUpper,\n    );\n\n    const ins = this.increasePositionFromLiquidityInstruction(\n      programId,\n      ownerInfo.wallet,\n      positionNftAccount,\n      personalPosition,\n      id,\n      protocolPosition,\n      tickArrayLower,\n      tickArrayUpper,\n      ownerInfo.tokenAccountA,\n      ownerInfo.tokenAccountB,\n      new PublicKey(poolKeys.vault.A),\n      new PublicKey(poolKeys.vault.B),\n      new PublicKey(poolInfo.mintA.address),\n      new PublicKey(poolInfo.mintB.address),\n\n      liquidity,\n      amountMaxA,\n      amountMaxB,\n      PoolUtils.isOverflowDefaultTickarrayBitmap(poolInfo.config.tickSpacing, [\n        tickArrayLowerStartIndex,\n        tickArrayUpperStartIndex,\n      ])\n        ? getPdaExBitmapAccount(programId, id).publicKey\n        : undefined,\n    );\n\n    return {\n      address: {\n        tickArrayLower,\n        tickArrayUpper,\n        positionNftAccount,\n        personalPosition,\n        protocolPosition,\n      },\n      signers: [],\n      instructions: [ins],\n      instructionTypes: [InstructionType.ClmmIncreasePosition],\n      lookupTableAddress: poolKeys.lookupTableAccount ? [poolKeys.lookupTableAccount] : [],\n    };\n  }\n\n  static increasePositionFromBaseInstructions({\n    poolInfo,\n    poolKeys,\n    ownerPosition,\n    ownerInfo,\n    base,\n    baseAmount,\n    otherAmountMax,\n  }: {\n    poolInfo: ApiV3PoolInfoConcentratedItem;\n    poolKeys: ClmmKeys;\n    ownerPosition: ClmmPoolPersonalPosition;\n\n    ownerInfo: {\n      wallet: PublicKey;\n      tokenAccountA: PublicKey;\n      tokenAccountB: PublicKey;\n    };\n\n    base: \"MintA\" | \"MintB\";\n    baseAmount: BN;\n\n    otherAmountMax: BN;\n  }): ReturnTypeMakeInstructions<ManipulateLiquidityExtInfo[\"address\"]> {\n    const [programId, id] = [new PublicKey(poolInfo.programId), new PublicKey(poolInfo.id)];\n    const tickArrayLowerStartIndex = TickUtils.getTickArrayStartIndexByTick(\n      ownerPosition.tickLower,\n      poolInfo.config.tickSpacing,\n    );\n    const tickArrayUpperStartIndex = TickUtils.getTickArrayStartIndexByTick(\n      ownerPosition.tickUpper,\n      poolInfo.config.tickSpacing,\n    );\n\n    const { publicKey: tickArrayLower } = getPdaTickArrayAddress(programId, id, tickArrayLowerStartIndex);\n    const { publicKey: tickArrayUpper } = getPdaTickArrayAddress(programId, id, tickArrayUpperStartIndex);\n\n    const { publicKey: positionNftAccount } = getATAAddress(ownerInfo.wallet, ownerPosition.nftMint, TOKEN_PROGRAM_ID);\n\n    const { publicKey: personalPosition } = getPdaPersonalPositionAddress(programId, ownerPosition.nftMint);\n    const { publicKey: protocolPosition } = getPdaProtocolPositionAddress(\n      programId,\n      id,\n      ownerPosition.tickLower,\n      ownerPosition.tickUpper,\n    );\n\n    return {\n      address: {\n        tickArrayLower,\n        tickArrayUpper,\n        positionNftAccount,\n        personalPosition,\n        protocolPosition,\n      },\n      instructions: [\n        this.increasePositionFromBaseInstruction(\n          programId,\n          ownerInfo.wallet,\n          positionNftAccount,\n          personalPosition,\n          id,\n          protocolPosition,\n          tickArrayLower,\n          tickArrayUpper,\n          ownerInfo.tokenAccountA,\n          ownerInfo.tokenAccountB,\n          new PublicKey(poolKeys.vault.A),\n          new PublicKey(poolKeys.vault.B),\n          new PublicKey(poolInfo.mintA.address),\n          new PublicKey(poolInfo.mintB.address),\n\n          base,\n          baseAmount,\n\n          otherAmountMax,\n          PoolUtils.isOverflowDefaultTickarrayBitmap(poolInfo.config.tickSpacing, [\n            tickArrayLowerStartIndex,\n            tickArrayUpperStartIndex,\n          ])\n            ? getPdaExBitmapAccount(programId, id).publicKey\n            : undefined,\n        ),\n      ],\n      signers: [],\n      instructionTypes: [InstructionType.ClmmIncreasePosition],\n      lookupTableAddress: poolKeys.lookupTableAccount ? [poolKeys.lookupTableAccount] : [],\n    };\n  }\n\n  static increasePositionFromBaseInstruction(\n    programId: PublicKey,\n    positionNftOwner: PublicKey,\n    positionNftAccount: PublicKey,\n    personalPosition: PublicKey,\n\n    poolId: PublicKey,\n    protocolPosition: PublicKey,\n    tickArrayLower: PublicKey,\n    tickArrayUpper: PublicKey,\n    ownerTokenAccountA: PublicKey,\n    ownerTokenAccountB: PublicKey,\n    mintVaultA: PublicKey,\n    mintVaultB: PublicKey,\n    mintMintA: PublicKey,\n    mintMintB: PublicKey,\n\n    base: \"MintA\" | \"MintB\",\n    baseAmount: BN,\n\n    otherAmountMax: BN,\n\n    exTickArrayBitmap?: PublicKey,\n  ): TransactionInstruction {\n    const dataLayout = struct([\n      u128(\"liquidity\"),\n      u64(\"amountMaxA\"),\n      u64(\"amountMaxB\"),\n      u8(\"optionBaseFlag\"),\n      bool(\"baseFlag\"),\n    ]);\n\n    const remainingAccounts = [\n      ...(exTickArrayBitmap ? [{ pubkey: exTickArrayBitmap, isSigner: false, isWritable: true }] : []),\n    ];\n\n    const keys = [\n      { pubkey: positionNftOwner, isSigner: true, isWritable: false },\n      { pubkey: positionNftAccount, isSigner: false, isWritable: false },\n      { pubkey: poolId, isSigner: false, isWritable: true },\n      { pubkey: protocolPosition, isSigner: false, isWritable: true },\n      { pubkey: personalPosition, isSigner: false, isWritable: true },\n      { pubkey: tickArrayLower, isSigner: false, isWritable: true },\n      { pubkey: tickArrayUpper, isSigner: false, isWritable: true },\n      { pubkey: ownerTokenAccountA, isSigner: false, isWritable: true },\n      { pubkey: ownerTokenAccountB, isSigner: false, isWritable: true },\n      { pubkey: mintVaultA, isSigner: false, isWritable: true },\n      { pubkey: mintVaultB, isSigner: false, isWritable: true },\n\n      { pubkey: TOKEN_PROGRAM_ID, isSigner: false, isWritable: false },\n      { pubkey: TOKEN_2022_PROGRAM_ID, isSigner: false, isWritable: false },\n\n      { pubkey: mintMintA, isSigner: false, isWritable: false },\n      { pubkey: mintMintB, isSigner: false, isWritable: false },\n\n      ...remainingAccounts,\n    ];\n\n    const data = Buffer.alloc(dataLayout.span);\n    dataLayout.encode(\n      {\n        liquidity: new BN(0),\n        amountMaxA: base === \"MintA\" ? baseAmount : otherAmountMax,\n        amountMaxB: base === \"MintA\" ? otherAmountMax : baseAmount,\n        baseFlag: base === \"MintA\",\n        optionBaseFlag: 1,\n      },\n      data,\n    );\n\n    const aData = Buffer.from([...anchorDataBuf.increaseLiquidity, ...data]);\n\n    return new TransactionInstruction({\n      keys,\n      programId,\n      data: aData,\n    });\n  }\n\n  static decreaseLiquidityInstruction(\n    programId: PublicKey,\n    positionNftOwner: PublicKey,\n    positionNftAccount: PublicKey,\n    personalPosition: PublicKey,\n\n    poolId: PublicKey,\n    protocolPosition: PublicKey,\n    tickArrayLower: PublicKey,\n    tickArrayUpper: PublicKey,\n    ownerTokenAccountA: PublicKey,\n    ownerTokenAccountB: PublicKey,\n    mintVaultA: PublicKey,\n    mintVaultB: PublicKey,\n    mintMintA: PublicKey,\n    mintMintB: PublicKey,\n    rewardAccounts: {\n      poolRewardVault: PublicKey;\n      ownerRewardVault: PublicKey;\n      rewardMint: PublicKey;\n    }[],\n\n    liquidity: BN,\n    amountMinA: BN,\n    amountMinB: BN,\n\n    exTickArrayBitmap?: PublicKey,\n  ): TransactionInstruction {\n    const dataLayout = struct([u128(\"liquidity\"), u64(\"amountMinA\"), u64(\"amountMinB\")]);\n\n    const remainingAccounts = [\n      ...(exTickArrayBitmap ? [{ pubkey: exTickArrayBitmap, isSigner: false, isWritable: true }] : []),\n      ...rewardAccounts\n        .map((i) => [\n          { pubkey: i.poolRewardVault, isSigner: false, isWritable: true },\n          { pubkey: i.ownerRewardVault, isSigner: false, isWritable: true },\n          { pubkey: i.rewardMint, isSigner: false, isWritable: false },\n        ])\n        .flat(),\n    ];\n\n    const keys = [\n      { pubkey: positionNftOwner, isSigner: true, isWritable: false },\n      { pubkey: positionNftAccount, isSigner: false, isWritable: false },\n      { pubkey: personalPosition, isSigner: false, isWritable: true },\n      { pubkey: poolId, isSigner: false, isWritable: true },\n      { pubkey: protocolPosition, isSigner: false, isWritable: true },\n      { pubkey: mintVaultA, isSigner: false, isWritable: true },\n      { pubkey: mintVaultB, isSigner: false, isWritable: true },\n      { pubkey: tickArrayLower, isSigner: false, isWritable: true },\n      { pubkey: tickArrayUpper, isSigner: false, isWritable: true },\n\n      { pubkey: ownerTokenAccountA, isSigner: false, isWritable: true },\n      { pubkey: ownerTokenAccountB, isSigner: false, isWritable: true },\n\n      { pubkey: TOKEN_PROGRAM_ID, isSigner: false, isWritable: false },\n      { pubkey: TOKEN_2022_PROGRAM_ID, isSigner: false, isWritable: false },\n      { pubkey: MEMO_PROGRAM_ID, isSigner: false, isWritable: false },\n\n      { pubkey: mintMintA, isSigner: false, isWritable: false },\n      { pubkey: mintMintB, isSigner: false, isWritable: false },\n\n      ...remainingAccounts,\n    ];\n\n    const data = Buffer.alloc(dataLayout.span);\n    dataLayout.encode(\n      {\n        liquidity,\n        amountMinA,\n        amountMinB,\n      },\n      data,\n    );\n\n    const aData = Buffer.from([...anchorDataBuf.decreaseLiquidity, ...data]);\n\n    return new TransactionInstruction({\n      keys,\n      programId,\n      data: aData,\n    });\n  }\n\n  static decreaseLiquidityInstructions({\n    poolInfo,\n    poolKeys,\n    ownerPosition,\n    ownerInfo,\n    liquidity,\n    amountMinA,\n    amountMinB,\n    programId,\n  }: {\n    poolInfo: ApiV3PoolInfoConcentratedItem;\n    poolKeys: ClmmKeys;\n    ownerPosition: ClmmPositionLayout;\n\n    ownerInfo: {\n      wallet: PublicKey;\n      tokenAccountA: PublicKey;\n      tokenAccountB: PublicKey;\n      rewardAccounts: PublicKey[];\n    };\n\n    liquidity: BN;\n    amountMinA: BN;\n    amountMinB: BN;\n    programId?: PublicKey;\n  }): ReturnTypeMakeInstructions<ManipulateLiquidityExtInfo[\"address\"]> {\n    const [poolProgramId, id] = [new PublicKey(poolInfo.programId), new PublicKey(poolInfo.id)];\n    const tickArrayLowerStartIndex = TickUtils.getTickArrayStartIndexByTick(\n      ownerPosition.tickLower,\n      poolInfo.config.tickSpacing,\n    );\n    const tickArrayUpperStartIndex = TickUtils.getTickArrayStartIndexByTick(\n      ownerPosition.tickUpper,\n      poolInfo.config.tickSpacing,\n    );\n\n    const { publicKey: tickArrayLower } = getPdaTickArrayAddress(poolProgramId, id, tickArrayLowerStartIndex);\n    const { publicKey: tickArrayUpper } = getPdaTickArrayAddress(poolProgramId, id, tickArrayUpperStartIndex);\n    const { publicKey: positionNftAccount } = getATAAddress(ownerInfo.wallet, ownerPosition.nftMint, programId);\n\n    const { publicKey: personalPosition } = getPdaPersonalPositionAddress(poolProgramId, ownerPosition.nftMint);\n    const { publicKey: protocolPosition } = getPdaProtocolPositionAddress(\n      poolProgramId,\n      id,\n      ownerPosition.tickLower,\n      ownerPosition.tickUpper,\n    );\n\n    const rewardAccounts: {\n      poolRewardVault: PublicKey;\n      ownerRewardVault: PublicKey;\n      rewardMint: PublicKey;\n    }[] = [];\n    for (let i = 0; i < poolInfo.rewardDefaultInfos.length; i++) {\n      rewardAccounts.push({\n        poolRewardVault: new PublicKey(poolKeys.rewardInfos[i].vault),\n        ownerRewardVault: ownerInfo.rewardAccounts[i],\n        rewardMint: new PublicKey(poolInfo.rewardDefaultInfos[i].mint.address),\n      });\n    }\n\n    const ins: TransactionInstruction[] = [];\n    ins.push(\n      this.decreaseLiquidityInstruction(\n        poolProgramId,\n        ownerInfo.wallet,\n        positionNftAccount,\n        personalPosition,\n        id,\n        protocolPosition,\n        tickArrayLower,\n        tickArrayUpper,\n        ownerInfo.tokenAccountA,\n        ownerInfo.tokenAccountB,\n        new PublicKey(poolKeys.vault.A),\n        new PublicKey(poolKeys.vault.B),\n        new PublicKey(poolInfo.mintA.address),\n        new PublicKey(poolInfo.mintB.address),\n        rewardAccounts,\n\n        liquidity,\n        amountMinA,\n        amountMinB,\n        PoolUtils.isOverflowDefaultTickarrayBitmap(poolInfo.config.tickSpacing, [\n          tickArrayLowerStartIndex,\n          tickArrayUpperStartIndex,\n        ])\n          ? getPdaExBitmapAccount(poolProgramId, id).publicKey\n          : undefined,\n      ),\n    );\n\n    return {\n      address: {\n        tickArrayLower,\n        tickArrayUpper,\n        positionNftAccount,\n        personalPosition,\n        protocolPosition,\n      },\n      signers: [],\n      instructions: ins,\n      instructionTypes: [InstructionType.ClmmDecreasePosition],\n      lookupTableAddress: poolKeys.lookupTableAccount ? [poolKeys.lookupTableAccount] : [],\n    };\n  }\n\n  static swapInstruction(\n    programId: PublicKey,\n    payer: PublicKey,\n    poolId: PublicKey,\n    ammConfigId: PublicKey,\n    inputTokenAccount: PublicKey,\n    outputTokenAccount: PublicKey,\n    inputVault: PublicKey,\n    outputVault: PublicKey,\n    inputMint: PublicKey,\n    outputMint: PublicKey,\n    tickArray: PublicKey[],\n    observationId: PublicKey,\n\n    amount: BN,\n    otherAmountThreshold: BN,\n    sqrtPriceLimitX64: BN,\n    isBaseInput: boolean,\n\n    exTickArrayBitmap?: PublicKey,\n  ): TransactionInstruction {\n    const dataLayout = struct([\n      u64(\"amount\"),\n      u64(\"otherAmountThreshold\"),\n      u128(\"sqrtPriceLimitX64\"),\n      bool(\"isBaseInput\"),\n    ]);\n\n    const remainingAccounts = [\n      ...(exTickArrayBitmap ? [{ pubkey: exTickArrayBitmap, isSigner: false, isWritable: true }] : []),\n      ...tickArray.map((i) => ({ pubkey: i, isSigner: false, isWritable: true })),\n    ];\n\n    const keys = [\n      { pubkey: payer, isSigner: true, isWritable: false },\n      { pubkey: ammConfigId, isSigner: false, isWritable: false },\n\n      { pubkey: poolId, isSigner: false, isWritable: true },\n      { pubkey: inputTokenAccount, isSigner: false, isWritable: true },\n      { pubkey: outputTokenAccount, isSigner: false, isWritable: true },\n      { pubkey: inputVault, isSigner: false, isWritable: true },\n      { pubkey: outputVault, isSigner: false, isWritable: true },\n\n      { pubkey: observationId, isSigner: false, isWritable: true },\n\n      { pubkey: TOKEN_PROGRAM_ID, isSigner: false, isWritable: false },\n      { pubkey: TOKEN_2022_PROGRAM_ID, isSigner: false, isWritable: false },\n      { pubkey: MEMO_PROGRAM_ID, isSigner: false, isWritable: false },\n\n      { pubkey: inputMint, isSigner: false, isWritable: false },\n      { pubkey: outputMint, isSigner: false, isWritable: false },\n\n      ...remainingAccounts,\n    ];\n\n    const data = Buffer.alloc(dataLayout.span);\n    dataLayout.encode(\n      {\n        amount,\n        otherAmountThreshold,\n        sqrtPriceLimitX64,\n        isBaseInput,\n      },\n      data,\n    );\n\n    const aData = Buffer.from([...anchorDataBuf.swap, ...data]);\n\n    return new TransactionInstruction({\n      keys,\n      programId,\n      data: aData,\n    });\n  }\n\n  static makeSwapBaseInInstructions({\n    poolInfo,\n    poolKeys,\n    ownerInfo,\n    inputMint,\n    amountIn,\n    amountOutMin,\n    sqrtPriceLimitX64,\n    remainingAccounts,\n  }: {\n    poolInfo: ApiV3PoolInfoConcentratedItem;\n    poolKeys: ClmmKeys;\n\n    ownerInfo: {\n      wallet: PublicKey;\n      tokenAccountA: PublicKey;\n      tokenAccountB: PublicKey;\n    };\n\n    inputMint: PublicKey;\n\n    amountIn: BN;\n    amountOutMin: BN;\n    sqrtPriceLimitX64: BN;\n\n    remainingAccounts: PublicKey[];\n  }): ReturnTypeMakeInstructions {\n    const [programId, id] = [new PublicKey(poolInfo.programId), new PublicKey(poolInfo.id)];\n    const [mintAVault, mintBVault] = [new PublicKey(poolKeys.vault.A), new PublicKey(poolKeys.vault.B)];\n    const [mintA, mintB] = [new PublicKey(poolInfo.mintA.address), new PublicKey(poolInfo.mintB.address)];\n\n    const isInputMintA = poolInfo.mintA.address === inputMint.toString();\n    const ins = [\n      this.swapInstruction(\n        programId,\n        ownerInfo.wallet,\n\n        id,\n        new PublicKey(poolInfo.config.id),\n\n        isInputMintA ? ownerInfo.tokenAccountA : ownerInfo.tokenAccountB,\n        isInputMintA ? ownerInfo.tokenAccountB : ownerInfo.tokenAccountA,\n\n        isInputMintA ? mintAVault : mintBVault,\n        isInputMintA ? mintBVault : mintAVault,\n\n        isInputMintA ? mintA : mintB,\n        isInputMintA ? mintB : mintA,\n\n        remainingAccounts,\n        // poolInfo.observationId, // to do get from api\n        mintAVault,\n        amountIn,\n        amountOutMin,\n        sqrtPriceLimitX64,\n        true,\n        getPdaExBitmapAccount(programId, id).publicKey,\n      ),\n    ];\n    return {\n      signers: [],\n      instructions: ins,\n      instructionTypes: [InstructionType.ClmmSwapBaseIn],\n      lookupTableAddress: poolKeys.lookupTableAccount ? [poolKeys.lookupTableAccount] : [],\n      address: {},\n    };\n  }\n\n  static initRewardInstruction(\n    programId: PublicKey,\n    payer: PublicKey,\n    poolId: PublicKey,\n    operationId: PublicKey,\n    ammConfigId: PublicKey,\n\n    ownerTokenAccount: PublicKey,\n    rewardProgramId: PublicKey,\n    rewardMint: PublicKey,\n    rewardVault: PublicKey,\n\n    openTime: number,\n    endTime: number,\n    emissionsPerSecondX64: BN,\n  ): TransactionInstruction {\n    const dataLayout = struct([u64(\"openTime\"), u64(\"endTime\"), u128(\"emissionsPerSecondX64\")]);\n\n    const keys = [\n      { pubkey: payer, isSigner: true, isWritable: true },\n      { pubkey: ownerTokenAccount, isSigner: false, isWritable: true },\n      { pubkey: ammConfigId, isSigner: false, isWritable: false },\n\n      { pubkey: poolId, isSigner: false, isWritable: true },\n      { pubkey: operationId, isSigner: false, isWritable: true },\n      { pubkey: rewardMint, isSigner: false, isWritable: false },\n      { pubkey: rewardVault, isSigner: false, isWritable: true },\n\n      { pubkey: rewardProgramId, isSigner: false, isWritable: false },\n      { pubkey: SystemProgram.programId, isSigner: false, isWritable: false },\n      { pubkey: RENT_PROGRAM_ID, isSigner: false, isWritable: false },\n    ];\n\n    const data = Buffer.alloc(dataLayout.span);\n    dataLayout.encode(\n      {\n        openTime: parseBigNumberish(openTime),\n        endTime: parseBigNumberish(endTime),\n        emissionsPerSecondX64,\n      },\n      data,\n    );\n\n    const aData = Buffer.from([...anchorDataBuf.initReward, ...data]);\n\n    return new TransactionInstruction({\n      keys,\n      programId,\n      data: aData,\n    });\n  }\n\n  static initRewardInstructions({\n    poolInfo,\n    poolKeys,\n    ownerInfo,\n    rewardInfo,\n  }: {\n    poolInfo: ApiV3PoolInfoConcentratedItem;\n    poolKeys: ClmmKeys;\n    ownerInfo: {\n      wallet: PublicKey;\n      tokenAccount: PublicKey;\n    };\n    rewardInfo: {\n      programId: PublicKey;\n      mint: PublicKey;\n      openTime: number;\n      endTime: number;\n      emissionsPerSecondX64: BN;\n    };\n  }): ReturnTypeMakeInstructions<InitRewardExtInfo[\"address\"]> {\n    const [programId, id] = [new PublicKey(poolInfo.programId), new PublicKey(poolInfo.id)];\n    const poolRewardVault = getPdaPoolRewardVaulId(programId, id, rewardInfo.mint).publicKey;\n    const operationId = getPdaOperationAccount(programId).publicKey;\n    const ins = [\n      this.initRewardInstruction(\n        programId,\n        ownerInfo.wallet,\n        id,\n        operationId,\n        new PublicKey(poolInfo.config.id),\n\n        ownerInfo.tokenAccount,\n        rewardInfo.programId,\n        rewardInfo.mint,\n        poolRewardVault,\n\n        rewardInfo.openTime,\n        rewardInfo.endTime,\n        rewardInfo.emissionsPerSecondX64,\n      ),\n    ];\n    return {\n      address: { poolRewardVault, operationId },\n      signers: [],\n      instructions: ins,\n      instructionTypes: [InstructionType.ClmmInitReward],\n      lookupTableAddress: poolKeys.lookupTableAccount ? [poolKeys.lookupTableAccount] : [],\n    };\n  }\n\n  static setRewardInstruction(\n    programId: PublicKey,\n    payer: PublicKey,\n    poolId: PublicKey,\n    operationId: PublicKey,\n    ammConfigId: PublicKey,\n\n    ownerTokenAccount: PublicKey,\n    rewardVault: PublicKey,\n    rewardMint: PublicKey,\n\n    rewardIndex: number,\n    openTime: number,\n    endTime: number,\n    emissionsPerSecondX64: BN,\n  ): TransactionInstruction {\n    const dataLayout = struct([u8(\"rewardIndex\"), u128(\"emissionsPerSecondX64\"), u64(\"openTime\"), u64(\"endTime\")]);\n\n    const keys = [\n      { pubkey: payer, isSigner: true, isWritable: true },\n      { pubkey: ammConfigId, isSigner: false, isWritable: false },\n      { pubkey: poolId, isSigner: false, isWritable: true },\n      { pubkey: operationId, isSigner: false, isWritable: true },\n\n      { pubkey: TOKEN_PROGRAM_ID, isSigner: false, isWritable: false },\n      { pubkey: TOKEN_2022_PROGRAM_ID, isSigner: false, isWritable: false },\n\n      { pubkey: rewardVault, isSigner: false, isWritable: true },\n      { pubkey: ownerTokenAccount, isSigner: false, isWritable: true },\n      { pubkey: rewardMint, isSigner: false, isWritable: true },\n    ];\n\n    const data = Buffer.alloc(dataLayout.span);\n    dataLayout.encode(\n      {\n        rewardIndex,\n        emissionsPerSecondX64,\n        openTime: parseBigNumberish(openTime),\n        endTime: parseBigNumberish(endTime),\n      },\n      data,\n    );\n\n    const aData = Buffer.from([...anchorDataBuf.setRewardEmissions, ...data]);\n\n    return new TransactionInstruction({\n      keys,\n      programId,\n      data: aData,\n    });\n  }\n\n  static setRewardInstructions({\n    poolInfo,\n    poolKeys,\n    ownerInfo,\n    rewardInfo,\n  }: {\n    poolInfo: ApiV3PoolInfoConcentratedItem;\n    poolKeys: ClmmKeys;\n    ownerInfo: {\n      wallet: PublicKey;\n      tokenAccount: PublicKey;\n    };\n    rewardInfo: {\n      mint: PublicKey;\n      openTime: number;\n      endTime: number;\n      emissionsPerSecondX64: BN;\n    };\n  }): ReturnTypeMakeInstructions {\n    const [programId, id] = [new PublicKey(poolInfo.programId), new PublicKey(poolInfo.id)];\n\n    let rewardIndex: number | undefined;\n    let rewardVault: PublicKey | undefined;\n    let rewardMint: PublicKey | undefined;\n    for (let index = 0; index < poolInfo.rewardDefaultInfos.length; index++)\n      if (poolInfo.rewardDefaultInfos[index].mint.address === rewardInfo.mint.toString()) {\n        rewardIndex = index;\n        rewardVault = new PublicKey(poolKeys.rewardInfos[index].vault);\n        rewardMint = new PublicKey(poolKeys.rewardInfos[index].mint.address);\n      }\n\n    if (rewardIndex === undefined || rewardVault === undefined)\n      logger.logWithError(\"reward mint check error\", \"no reward mint\", poolInfo.rewardDefaultInfos);\n\n    const operationId = getPdaOperationAccount(programId).publicKey;\n\n    const ins = [\n      this.setRewardInstruction(\n        programId,\n        ownerInfo.wallet,\n        id,\n        operationId,\n        new PublicKey(poolInfo.config.id),\n\n        ownerInfo.tokenAccount,\n        rewardVault!,\n        rewardMint!,\n\n        rewardIndex!,\n        rewardInfo.openTime,\n        rewardInfo.endTime,\n        rewardInfo.emissionsPerSecondX64,\n      ),\n    ];\n    return {\n      address: { rewardVault: rewardVault!, operationId },\n      signers: [],\n      instructions: ins,\n      instructionTypes: [InstructionType.ClmmSetReward],\n      lookupTableAddress: poolKeys.lookupTableAccount ? [poolKeys.lookupTableAccount] : [],\n    };\n  }\n\n  static collectRewardInstruction(\n    programId: PublicKey,\n    payer: PublicKey,\n    poolId: PublicKey,\n\n    ownerTokenAccount: PublicKey,\n    rewardVault: PublicKey,\n    rewardMint: PublicKey,\n\n    rewardIndex: number,\n  ): TransactionInstruction {\n    const dataLayout = struct([u8(\"rewardIndex\")]);\n\n    const keys = [\n      { pubkey: payer, isSigner: true, isWritable: true },\n      { pubkey: ownerTokenAccount, isSigner: false, isWritable: true },\n      { pubkey: poolId, isSigner: false, isWritable: true },\n      { pubkey: rewardVault, isSigner: false, isWritable: true },\n      { pubkey: rewardMint, isSigner: false, isWritable: false },\n      { pubkey: TOKEN_PROGRAM_ID, isSigner: false, isWritable: false },\n      { pubkey: TOKEN_2022_PROGRAM_ID, isSigner: false, isWritable: false },\n      { pubkey: MEMO_PROGRAM_ID, isSigner: false, isWritable: false },\n    ];\n\n    const data = Buffer.alloc(dataLayout.span);\n    dataLayout.encode(\n      {\n        rewardIndex,\n      },\n      data,\n    );\n\n    const aData = Buffer.from([...anchorDataBuf.collectReward, ...data]);\n\n    return new TransactionInstruction({\n      keys,\n      programId,\n      data: aData,\n    });\n  }\n\n  static collectRewardInstructions({\n    poolInfo,\n    poolKeys,\n    ownerInfo,\n    rewardMint,\n  }: {\n    poolInfo: ApiV3PoolInfoConcentratedItem;\n    poolKeys: ClmmKeys;\n    ownerInfo: {\n      wallet: PublicKey;\n      tokenAccount: PublicKey;\n    };\n    rewardMint: PublicKey;\n  }): ReturnTypeMakeInstructions {\n    const [programId, id] = [new PublicKey(poolInfo.programId), new PublicKey(poolInfo.id)];\n    let rewardIndex: number | undefined;\n    let rewardVault: PublicKey | undefined;\n    for (let index = 0; index < poolInfo.rewardDefaultInfos.length; index++)\n      if (poolInfo.rewardDefaultInfos[index].mint.address === rewardMint.toString()) {\n        rewardIndex = index;\n        rewardVault = new PublicKey(poolKeys.rewardInfos[index].vault);\n      }\n\n    if (rewardIndex === undefined || rewardVault === undefined)\n      logger.logWithError(\"reward mint check error\", \"no reward mint\", poolInfo.rewardDefaultInfos);\n\n    const ins = [\n      this.collectRewardInstruction(\n        programId,\n        ownerInfo.wallet,\n        id,\n\n        ownerInfo.tokenAccount,\n        rewardVault!,\n        rewardMint,\n\n        rewardIndex!,\n      ),\n    ];\n    return {\n      address: { rewardVault: rewardVault! },\n      signers: [],\n      instructions: ins,\n      instructionTypes: [InstructionType.ClmmCollectReward],\n      lookupTableAddress: poolKeys.lookupTableAccount ? [poolKeys.lookupTableAccount] : [],\n    };\n  }\n\n  static swapBaseOutInstructions({\n    poolInfo,\n    poolKeys,\n    ownerInfo,\n    outputMint,\n    amountOut,\n    amountInMax,\n    sqrtPriceLimitX64,\n    remainingAccounts,\n  }: {\n    poolInfo: ApiV3PoolInfoConcentratedItem;\n    poolKeys: ClmmKeys;\n\n    ownerInfo: {\n      wallet: PublicKey;\n      tokenAccountA: PublicKey;\n      tokenAccountB: PublicKey;\n    };\n\n    outputMint: PublicKey;\n\n    amountOut: BN;\n    amountInMax: BN;\n    sqrtPriceLimitX64: BN;\n\n    remainingAccounts: PublicKey[];\n  }): ReturnTypeMakeInstructions {\n    const [programId, id] = [new PublicKey(poolInfo.programId), new PublicKey(poolInfo.id)];\n    const [mintAVault, mintBVault] = [new PublicKey(poolKeys.vault.A), new PublicKey(poolKeys.vault.B)];\n    const [mintA, mintB] = [new PublicKey(poolInfo.mintA.address), new PublicKey(poolInfo.mintB.address)];\n    const isInputMintA = poolInfo.mintA.address === outputMint.toString();\n    const ins = [\n      this.swapInstruction(\n        programId,\n        ownerInfo.wallet,\n\n        id,\n        new PublicKey(poolInfo.config.id),\n\n        isInputMintA ? ownerInfo.tokenAccountB : ownerInfo.tokenAccountA,\n        isInputMintA ? ownerInfo.tokenAccountA : ownerInfo.tokenAccountB,\n\n        isInputMintA ? mintBVault : mintAVault,\n        isInputMintA ? mintAVault : mintBVault,\n\n        isInputMintA ? mintA : mintB,\n        isInputMintA ? mintB : mintA,\n\n        remainingAccounts,\n        // poolInfo.observationId, // to do\n        mintAVault,\n        amountOut,\n        amountInMax,\n        sqrtPriceLimitX64,\n        false,\n      ),\n    ];\n    return {\n      signers: [],\n      instructions: ins,\n      instructionTypes: [InstructionType.ClmmSwapBaseOut],\n      lookupTableAddress: poolKeys.lookupTableAccount ? [poolKeys.lookupTableAccount] : [],\n      address: {},\n    };\n  }\n}\n","import { PublicKey } from \"@solana/web3.js\";\nimport BN from \"bn.js\";\nimport Decimal from \"decimal.js\";\n\nimport { getPdaTickArrayAddress } from \"./pda\";\nimport { TickArrayBitmapExtensionType } from \"../type\";\nimport { TickQuery } from \"./tickQuery\";\nimport { MIN_TICK, MAX_TICK } from \"./constants\";\nimport { SqrtPriceMath, TickMath } from \"./math\";\nimport { ClmmPoolInfo } from \"../type\";\nimport { ApiV3PoolInfoConcentratedItem } from \"@/api/type\";\n\nexport const TICK_ARRAY_SIZE = 60;\nexport const TICK_ARRAY_BITMAP_SIZE = 512;\n\nexport interface ReturnTypeGetTickPrice {\n  tick: number;\n  price: Decimal;\n  tickSqrtPriceX64: BN;\n}\n\nexport interface ReturnTypeGetPriceAndTick {\n  tick: number;\n  price: Decimal;\n}\n\nexport type Tick = {\n  tick: number;\n  liquidityNet: BN;\n  liquidityGross: BN;\n  feeGrowthOutsideX64A: BN;\n  feeGrowthOutsideX64B: BN;\n  rewardGrowthsOutsideX64: BN[];\n};\n\nexport type TickArray = {\n  address: PublicKey;\n  poolId: PublicKey;\n  startTickIndex: number;\n  ticks: Tick[];\n  initializedTickCount: number;\n};\n\nexport type TickState = {\n  tick: number;\n  liquidityNet: BN;\n  liquidityGross: BN;\n  feeGrowthOutsideX64A: BN;\n  feeGrowthOutsideX64B: BN;\n  tickCumulativeOutside: BN;\n  secondsPerLiquidityOutsideX64: BN;\n  secondsOutside: number;\n  rewardGrowthsOutside: BN[];\n};\n\nexport type TickArrayState = {\n  ammPool: PublicKey;\n  startTickIndex: number;\n  ticks: TickState[];\n  initializedTickCount: number;\n};\n\nexport class TickUtils {\n  public static getTickArrayAddressByTick(\n    programId: PublicKey,\n    poolId: PublicKey,\n    tickIndex: number,\n    tickSpacing: number,\n  ): PublicKey {\n    const startIndex = TickUtils.getTickArrayStartIndexByTick(tickIndex, tickSpacing);\n    const { publicKey: tickArrayAddress } = getPdaTickArrayAddress(programId, poolId, startIndex);\n    return tickArrayAddress;\n  }\n\n  public static getTickOffsetInArray(tickIndex: number, tickSpacing: number): number {\n    if (tickIndex % tickSpacing != 0) {\n      throw new Error(\"tickIndex % tickSpacing not equal 0\");\n    }\n    const startTickIndex = TickUtils.getTickArrayStartIndexByTick(tickIndex, tickSpacing);\n    const offsetInArray = Math.floor((tickIndex - startTickIndex) / tickSpacing);\n    if (offsetInArray < 0 || offsetInArray >= TICK_ARRAY_SIZE) {\n      throw new Error(\"tick offset in array overflow\");\n    }\n    return offsetInArray;\n  }\n\n  public static getTickArrayBitIndex(tickIndex: number, tickSpacing: number): number {\n    const ticksInArray = TickQuery.tickCount(tickSpacing);\n\n    let startIndex: number = tickIndex / ticksInArray;\n    if (tickIndex < 0 && tickIndex % ticksInArray != 0) {\n      startIndex = Math.ceil(startIndex) - 1;\n    } else {\n      startIndex = Math.floor(startIndex);\n    }\n    return startIndex;\n  }\n\n  public static getTickArrayStartIndexByTick(tickIndex: number, tickSpacing: number): number {\n    return this.getTickArrayBitIndex(tickIndex, tickSpacing) * TickQuery.tickCount(tickSpacing);\n  }\n\n  public static getTickArrayOffsetInBitmapByTick(tick: number, tickSpacing: number): number {\n    const multiplier = tickSpacing * TICK_ARRAY_SIZE;\n    const compressed = Math.floor(tick / multiplier) + 512;\n    return Math.abs(compressed);\n  }\n\n  public static checkTickArrayIsInitialized(\n    bitmap: BN,\n    tick: number,\n    tickSpacing: number,\n  ): {\n    isInitialized: boolean;\n    startIndex: number;\n  } {\n    const multiplier = tickSpacing * TICK_ARRAY_SIZE;\n    const compressed = Math.floor(tick / multiplier) + 512;\n    const bitPos = Math.abs(compressed);\n    return {\n      isInitialized: bitmap.testn(bitPos),\n      startIndex: (bitPos - 512) * multiplier,\n    };\n  }\n\n  public static getNextTickArrayStartIndex(\n    lastTickArrayStartIndex: number,\n    tickSpacing: number,\n    zeroForOne: boolean,\n  ): number {\n    return zeroForOne\n      ? lastTickArrayStartIndex - tickSpacing * TICK_ARRAY_SIZE\n      : lastTickArrayStartIndex + tickSpacing * TICK_ARRAY_SIZE;\n  }\n\n  public static mergeTickArrayBitmap(bns: BN[]): BN {\n    let b = new BN(0);\n    for (let i = 0; i < bns.length; i++) {\n      b = b.add(bns[i].shln(64 * i));\n    }\n    return b;\n  }\n\n  public static getInitializedTickArrayInRange(\n    tickArrayBitmap: BN[],\n    exTickArrayBitmap: TickArrayBitmapExtensionType,\n    tickSpacing: number,\n    tickArrayStartIndex: number,\n    expectedCount: number,\n  ): number[] {\n    const tickArrayOffset = Math.floor(tickArrayStartIndex / (tickSpacing * TICK_ARRAY_SIZE));\n    return [\n      // find right of currenct offset\n      ...TickUtils.searchLowBitFromStart(\n        tickArrayBitmap,\n        exTickArrayBitmap,\n        tickArrayOffset - 1,\n        expectedCount,\n        tickSpacing,\n      ),\n\n      // find left of current offset\n      ...TickUtils.searchHightBitFromStart(\n        tickArrayBitmap,\n        exTickArrayBitmap,\n        tickArrayOffset,\n        expectedCount,\n        tickSpacing,\n      ),\n    ];\n  }\n\n  public static getAllInitializedTickArrayStartIndex(\n    tickArrayBitmap: BN[],\n    exTickArrayBitmap: TickArrayBitmapExtensionType,\n    tickSpacing: number,\n  ): number[] {\n    // find from offset 0 to 1024\n    return TickUtils.searchHightBitFromStart(\n      tickArrayBitmap,\n      exTickArrayBitmap,\n      0,\n      TICK_ARRAY_BITMAP_SIZE,\n      tickSpacing,\n    );\n  }\n\n  public static getAllInitializedTickArrayInfo(\n    programId: PublicKey,\n    poolId: PublicKey,\n    tickArrayBitmap: BN[],\n    exTickArrayBitmap: TickArrayBitmapExtensionType,\n    tickSpacing: number,\n  ): {\n    tickArrayStartIndex: number;\n    tickArrayAddress: PublicKey;\n  }[] {\n    const result: {\n      tickArrayStartIndex: number;\n      tickArrayAddress: PublicKey;\n    }[] = [];\n    const allInitializedTickArrayIndex: number[] = TickUtils.getAllInitializedTickArrayStartIndex(\n      tickArrayBitmap,\n      exTickArrayBitmap,\n      tickSpacing,\n    );\n    for (const startIndex of allInitializedTickArrayIndex) {\n      const { publicKey: address } = getPdaTickArrayAddress(programId, poolId, startIndex);\n      result.push({\n        tickArrayStartIndex: startIndex,\n        tickArrayAddress: address,\n      });\n    }\n    return result;\n  }\n\n  public static getAllInitializedTickInTickArray(tickArray: TickArrayState): TickState[] {\n    return tickArray.ticks.filter((i) => i.liquidityGross.gtn(0));\n  }\n\n  public static searchLowBitFromStart(\n    tickArrayBitmap: BN[],\n    exTickArrayBitmap: TickArrayBitmapExtensionType,\n    currentTickArrayBitStartIndex: number,\n    expectedCount: number,\n    tickSpacing: number,\n  ): number[] {\n    const tickArrayBitmaps = [\n      ...[...exTickArrayBitmap.negativeTickArrayBitmap].reverse(),\n      tickArrayBitmap.slice(0, 8),\n      tickArrayBitmap.slice(8, 16),\n      ...exTickArrayBitmap.positiveTickArrayBitmap,\n    ].map((i) => TickUtils.mergeTickArrayBitmap(i));\n    const result: number[] = [];\n    while (currentTickArrayBitStartIndex >= -7680) {\n      const arrayIndex = Math.floor((currentTickArrayBitStartIndex + 7680) / 512);\n      const searchIndex = (currentTickArrayBitStartIndex + 7680) % 512;\n\n      if (tickArrayBitmaps[arrayIndex].testn(searchIndex)) result.push(currentTickArrayBitStartIndex);\n\n      currentTickArrayBitStartIndex--;\n      if (result.length === expectedCount) break;\n    }\n\n    const tickCount = TickQuery.tickCount(tickSpacing);\n    return result.map((i) => i * tickCount);\n  }\n\n  public static searchHightBitFromStart(\n    tickArrayBitmap: BN[],\n    exTickArrayBitmap: TickArrayBitmapExtensionType,\n    currentTickArrayBitStartIndex: number,\n    expectedCount: number,\n    tickSpacing: number,\n  ): number[] {\n    const tickArrayBitmaps = [\n      ...[...exTickArrayBitmap.negativeTickArrayBitmap].reverse(),\n      tickArrayBitmap.slice(0, 8),\n      tickArrayBitmap.slice(8, 16),\n      ...exTickArrayBitmap.positiveTickArrayBitmap,\n    ].map((i) => TickUtils.mergeTickArrayBitmap(i));\n    const result: number[] = [];\n    while (currentTickArrayBitStartIndex < 7680) {\n      const arrayIndex = Math.floor((currentTickArrayBitStartIndex + 7680) / 512);\n      const searchIndex = (currentTickArrayBitStartIndex + 7680) % 512;\n\n      if (tickArrayBitmaps[arrayIndex].testn(searchIndex)) result.push(currentTickArrayBitStartIndex);\n\n      currentTickArrayBitStartIndex++;\n      if (result.length === expectedCount) break;\n    }\n\n    const tickCount = TickQuery.tickCount(tickSpacing);\n    return result.map((i) => i * tickCount);\n  }\n\n  public static checkIsOutOfBoundary(tick: number): boolean {\n    return tick < MIN_TICK || tick > MAX_TICK;\n  }\n\n  public static nextInitTick(\n    tickArrayCurrent: TickArray,\n    currentTickIndex: number,\n    tickSpacing: number,\n    zeroForOne: boolean,\n    t: boolean,\n  ): Tick | null {\n    const currentTickArrayStartIndex = TickQuery.getArrayStartIndex(currentTickIndex, tickSpacing);\n    if (currentTickArrayStartIndex != tickArrayCurrent.startTickIndex) {\n      return null;\n    }\n    let offsetInArray = Math.floor((currentTickIndex - tickArrayCurrent.startTickIndex) / tickSpacing);\n\n    if (zeroForOne) {\n      while (offsetInArray >= 0) {\n        if (tickArrayCurrent.ticks[offsetInArray].liquidityGross.gtn(0)) {\n          return tickArrayCurrent.ticks[offsetInArray];\n        }\n        offsetInArray = offsetInArray - 1;\n      }\n    } else {\n      if (!t) offsetInArray = offsetInArray + 1;\n      while (offsetInArray < TICK_ARRAY_SIZE) {\n        if (tickArrayCurrent.ticks[offsetInArray].liquidityGross.gtn(0)) {\n          return tickArrayCurrent.ticks[offsetInArray];\n        }\n        offsetInArray = offsetInArray + 1;\n      }\n    }\n    return null;\n  }\n\n  public static firstInitializedTick(tickArrayCurrent: TickArray, zeroForOne: boolean): Tick {\n    if (zeroForOne) {\n      let i = TICK_ARRAY_SIZE - 1;\n      while (i >= 0) {\n        if (tickArrayCurrent.ticks[i].liquidityGross.gtn(0)) {\n          return tickArrayCurrent.ticks[i];\n        }\n        i = i - 1;\n      }\n    } else {\n      let i = 0;\n      while (i < TICK_ARRAY_SIZE) {\n        if (tickArrayCurrent.ticks[i].liquidityGross.gtn(0)) {\n          return tickArrayCurrent.ticks[i];\n        }\n        i = i + 1;\n      }\n    }\n\n    throw Error(`firstInitializedTick check error: ${tickArrayCurrent} - ${zeroForOne}`);\n  }\n\n  public static _getTickPriceLegacy({\n    poolInfo,\n    tick,\n    baseIn,\n  }: {\n    poolInfo: ClmmPoolInfo;\n    tick: number;\n    baseIn: boolean;\n  }): ReturnTypeGetTickPrice {\n    const tickSqrtPriceX64 = SqrtPriceMath.getSqrtPriceX64FromTick(tick);\n    const tickPrice = SqrtPriceMath.sqrtPriceX64ToPrice(\n      tickSqrtPriceX64,\n      poolInfo.mintA.decimals,\n      poolInfo.mintB.decimals,\n    );\n\n    return baseIn\n      ? { tick, price: tickPrice, tickSqrtPriceX64 }\n      : { tick, price: new Decimal(1).div(tickPrice), tickSqrtPriceX64 };\n  }\n\n  public static _getPriceAndTickLegacy({\n    poolInfo,\n    price,\n    baseIn,\n  }: {\n    poolInfo: ClmmPoolInfo;\n    price: Decimal;\n    baseIn: boolean;\n  }): ReturnTypeGetPriceAndTick {\n    const _price = baseIn ? price : new Decimal(1).div(price);\n\n    const tick = TickMath.getTickWithPriceAndTickspacing(\n      _price,\n      poolInfo.ammConfig.tickSpacing,\n      poolInfo.mintA.decimals,\n      poolInfo.mintB.decimals,\n    );\n    const tickSqrtPriceX64 = SqrtPriceMath.getSqrtPriceX64FromTick(tick);\n    const tickPrice = SqrtPriceMath.sqrtPriceX64ToPrice(\n      tickSqrtPriceX64,\n      poolInfo.mintA.decimals,\n      poolInfo.mintB.decimals,\n    );\n\n    return baseIn ? { tick, price: tickPrice } : { tick, price: new Decimal(1).div(tickPrice) };\n  }\n\n  public static getTickPrice({\n    poolInfo,\n    tick,\n    baseIn,\n  }: {\n    poolInfo: ApiV3PoolInfoConcentratedItem;\n    tick: number;\n    baseIn: boolean;\n  }): ReturnTypeGetTickPrice {\n    const tickSqrtPriceX64 = SqrtPriceMath.getSqrtPriceX64FromTick(tick);\n    const tickPrice = SqrtPriceMath.sqrtPriceX64ToPrice(\n      tickSqrtPriceX64,\n      poolInfo.mintA.decimals,\n      poolInfo.mintB.decimals,\n    );\n\n    return baseIn\n      ? { tick, price: tickPrice, tickSqrtPriceX64 }\n      : { tick, price: new Decimal(1).div(tickPrice), tickSqrtPriceX64 };\n  }\n\n  public static getPriceAndTick({\n    poolInfo,\n    price,\n    baseIn,\n  }: {\n    poolInfo: ApiV3PoolInfoConcentratedItem;\n    price: Decimal;\n    baseIn: boolean;\n  }): ReturnTypeGetPriceAndTick {\n    const _price = baseIn ? price : new Decimal(1).div(price);\n\n    const tick = TickMath.getTickWithPriceAndTickspacing(\n      _price,\n      poolInfo.config.tickSpacing,\n      poolInfo.mintA.decimals,\n      poolInfo.mintB.decimals,\n    );\n    const tickSqrtPriceX64 = SqrtPriceMath.getSqrtPriceX64FromTick(tick);\n    const tickPrice = SqrtPriceMath.sqrtPriceX64ToPrice(\n      tickSqrtPriceX64,\n      poolInfo.mintA.decimals,\n      poolInfo.mintB.decimals,\n    );\n\n    return baseIn ? { tick, price: tickPrice } : { tick, price: new Decimal(1).div(tickPrice) };\n  }\n}\n","import BN from \"bn.js\";\nexport function u16ToBytes(num: number): Uint8Array {\n  const arr = new ArrayBuffer(2);\n  const view = new DataView(arr);\n  view.setUint16(0, num, false);\n  return new Uint8Array(arr);\n}\n\nexport function i16ToBytes(num: number): Uint8Array {\n  const arr = new ArrayBuffer(2);\n  const view = new DataView(arr);\n  view.setInt16(0, num, false);\n  return new Uint8Array(arr);\n}\n\nexport function u32ToBytes(num: number): Uint8Array {\n  const arr = new ArrayBuffer(4);\n  const view = new DataView(arr);\n  view.setUint32(0, num, false);\n  return new Uint8Array(arr);\n}\n\nexport function i32ToBytes(num: number): Uint8Array {\n  const arr = new ArrayBuffer(4);\n  const view = new DataView(arr);\n  view.setInt32(0, num, false);\n  return new Uint8Array(arr);\n}\n\nexport function leadingZeros(bitNum: number, data: BN): number {\n  let i = 0;\n  for (let j = bitNum - 1; j >= 0; j--) {\n    if (!data.testn(j)) {\n      i++;\n    } else {\n      break;\n    }\n  }\n  return i;\n}\n\nexport function trailingZeros(bitNum: number, data: BN) {\n  let i = 0;\n  for (let j = 0; j < bitNum; j++) {\n    if (!data.testn(j)) {\n      i++;\n    } else {\n      break;\n    }\n  }\n  return i;\n}\n\nexport function isZero(bitNum: number, data: BN): boolean {\n  for (let i = 0; i < bitNum; i++) {\n    if (data.testn(i)) return false;\n  }\n  return true;\n}\n\nexport function mostSignificantBit(bitNum: number, data: BN): number | null {\n  if (isZero(bitNum, data)) return null;\n  else return leadingZeros(bitNum, data);\n}\n\nexport function leastSignificantBit(bitNum: number, data: BN): number | null {\n  if (isZero(bitNum, data)) return null;\n  else return trailingZeros(bitNum, data);\n}\n","import { PublicKey } from \"@solana/web3.js\";\n\nimport { findProgramAddress, METADATA_PROGRAM_ID } from \"@/common\";\n\nimport { i32ToBytes, u16ToBytes } from \"./util\";\n\nexport const AMM_CONFIG_SEED = Buffer.from(\"amm_config\", \"utf8\");\nexport const POOL_SEED = Buffer.from(\"pool\", \"utf8\");\nexport const POOL_VAULT_SEED = Buffer.from(\"pool_vault\", \"utf8\");\nexport const POOL_REWARD_VAULT_SEED = Buffer.from(\"pool_reward_vault\", \"utf8\");\nexport const POSITION_SEED = Buffer.from(\"position\", \"utf8\");\nexport const TICK_ARRAY_SEED = Buffer.from(\"tick_array\", \"utf8\");\nexport const OPERATION_SEED = Buffer.from(\"operation\", \"utf8\");\nexport const POOL_TICK_ARRAY_BITMAP_SEED = Buffer.from(\"pool_tick_array_bitmap_extension\", \"utf8\");\n\nexport function getPdaAmmConfigId(\n  programId: PublicKey,\n  index: number,\n): {\n  publicKey: PublicKey;\n  nonce: number;\n} {\n  return findProgramAddress([AMM_CONFIG_SEED, u16ToBytes(index)], programId);\n}\n\nexport function getPdaPoolId(\n  programId: PublicKey,\n  ammConfigId: PublicKey,\n  mintA: PublicKey,\n  mintB: PublicKey,\n): {\n  publicKey: PublicKey;\n  nonce: number;\n} {\n  return findProgramAddress([POOL_SEED, ammConfigId.toBuffer(), mintA.toBuffer(), mintB.toBuffer()], programId);\n}\n\nexport function getPdaPoolVaultId(\n  programId: PublicKey,\n  poolId: PublicKey,\n  vaultMint: PublicKey,\n): {\n  publicKey: PublicKey;\n  nonce: number;\n} {\n  return findProgramAddress([POOL_VAULT_SEED, poolId.toBuffer(), vaultMint.toBuffer()], programId);\n}\n\nexport function getPdaPoolRewardVaulId(\n  programId: PublicKey,\n  poolId: PublicKey,\n  rewardMint: PublicKey,\n): {\n  publicKey: PublicKey;\n  nonce: number;\n} {\n  return findProgramAddress([POOL_REWARD_VAULT_SEED, poolId.toBuffer(), rewardMint.toBuffer()], programId);\n}\n\nexport function getPdaTickArrayAddress(\n  programId: PublicKey,\n  poolId: PublicKey,\n  startIndex: number,\n): {\n  publicKey: PublicKey;\n  nonce: number;\n} {\n  return findProgramAddress([TICK_ARRAY_SEED, poolId.toBuffer(), i32ToBytes(startIndex)], programId);\n}\n\nexport function getPdaProtocolPositionAddress(\n  programId: PublicKey,\n  poolId: PublicKey,\n  tickLower: number,\n  tickUpper: number,\n): {\n  publicKey: PublicKey;\n  nonce: number;\n} {\n  return findProgramAddress(\n    [POSITION_SEED, poolId.toBuffer(), i32ToBytes(tickLower), i32ToBytes(tickUpper)],\n    programId,\n  );\n}\n\nexport function getPdaPersonalPositionAddress(\n  programId: PublicKey,\n  nftMint: PublicKey,\n): {\n  publicKey: PublicKey;\n  nonce: number;\n} {\n  return findProgramAddress([POSITION_SEED, nftMint.toBuffer()], programId);\n}\n\nexport function getPdaMetadataKey(mint: PublicKey): {\n  publicKey: PublicKey;\n  nonce: number;\n} {\n  return findProgramAddress(\n    [Buffer.from(\"metadata\", \"utf8\"), METADATA_PROGRAM_ID.toBuffer(), mint.toBuffer()],\n    METADATA_PROGRAM_ID,\n  );\n}\n\nexport function getPdaOperationAccount(programId: PublicKey): {\n  publicKey: PublicKey;\n  nonce: number;\n} {\n  return findProgramAddress([OPERATION_SEED], programId);\n}\n\nexport function getPdaExBitmapAccount(\n  programId: PublicKey,\n  poolId: PublicKey,\n): {\n  publicKey: PublicKey;\n  nonce: number;\n} {\n  return findProgramAddress([POOL_TICK_ARRAY_BITMAP_SEED, poolId.toBuffer()], programId);\n}\n","import BN from \"bn.js\";\n\nexport const ZERO = new BN(0);\nexport const ONE = new BN(1);\nexport const NEGATIVE_ONE = new BN(-1);\n\nexport const Q64 = new BN(1).shln(64);\nexport const Q128 = new BN(1).shln(128);\n\nexport const MaxU64 = Q64.sub(ONE);\n\nexport const U64Resolution = 64;\n\nexport const MaxUint128 = Q128.subn(1);\n\nexport const MIN_TICK = -443636;\nexport const MAX_TICK = -MIN_TICK;\n\nexport const MIN_SQRT_PRICE_X64: BN = new BN(\"4295048016\");\nexport const MAX_SQRT_PRICE_X64: BN = new BN(\"79226673521066979257578248091\");\n\n// export const MIN_TICK_ARRAY_START_INDEX = -307200;\n// export const MAX_TICK_ARRAY_START_INDEX = 306600;\n\nexport const BIT_PRECISION = 16;\nexport const LOG_B_2_X32 = \"59543866431248\";\nexport const LOG_B_P_ERR_MARGIN_LOWER_X64 = \"184467440737095516\";\nexport const LOG_B_P_ERR_MARGIN_UPPER_X64 = \"15793534762490258745\";\n\nexport const FEE_RATE_DENOMINATOR = new BN(10).pow(new BN(6));\n\nexport enum Fee {\n  rate_500 = 500, //  500 / 10e6 = 0.0005\n  rate_3000 = 3000, // 3000/ 10e6 = 0.003\n  rate_10000 = 10000, // 10000 /10e6 = 0.01\n}\nexport const TICK_SPACINGS: { [amount in Fee]: number } = {\n  [Fee.rate_500]: 10,\n  [Fee.rate_3000]: 60,\n  [Fee.rate_10000]: 200,\n};\n\nexport const mockCreatePoolInfo = {\n  version: 6,\n  liquidity: ZERO,\n  tickCurrent: 0,\n  observationIndex: 0,\n  observationUpdateDuration: 0,\n  feeGrowthGlobalX64A: ZERO,\n  feeGrowthGlobalX64B: ZERO,\n  protocolFeesTokenA: ZERO,\n  protocolFeesTokenB: ZERO,\n  swapInAmountTokenA: ZERO,\n  swapOutAmountTokenB: ZERO,\n  swapInAmountTokenB: ZERO,\n  swapOutAmountTokenA: ZERO,\n  tickArrayBitmap: [],\n\n  rewardInfos: [],\n\n  day: {\n    volume: 0,\n    volumeFee: 0,\n    feeA: 0,\n    feeB: 0,\n    feeApr: 0,\n    rewardApr: { A: 0, B: 0, C: 0 },\n    apr: 0,\n    priceMax: 0,\n    priceMin: 0,\n  },\n  week: {\n    volume: 0,\n    volumeFee: 0,\n    feeA: 0,\n    feeB: 0,\n    feeApr: 0,\n    rewardApr: { A: 0, B: 0, C: 0 },\n    apr: 0,\n    priceMax: 0,\n    priceMin: 0,\n  },\n  month: {\n    volume: 0,\n    volumeFee: 0,\n    feeA: 0,\n    feeB: 0,\n    feeApr: 0,\n    rewardApr: { A: 0, B: 0, C: 0 },\n    apr: 0,\n    priceMax: 0,\n    priceMin: 0,\n  },\n  tvl: 0,\n};\n\nexport const mockV3CreatePoolInfo = {\n  tvl: 0,\n  volumeQuote: 0,\n  mintAmountA: 0,\n  mintAmountB: 0,\n  rewardDefaultInfos: [],\n  farmUpcomingCount: 0,\n  farmOngoingCount: 0,\n  farmFinishedCount: 0,\n\n  day: {\n    volume: 0,\n    volumeQuote: 0,\n    volumeFee: 0,\n    apr: 0,\n    feeApr: 0,\n    priceMin: 0,\n    priceMax: 0,\n    rewardApr: [0],\n  },\n  week: {\n    volume: 0,\n    volumeQuote: 0,\n    volumeFee: 0,\n    apr: 0,\n    feeApr: 0,\n    priceMin: 0,\n    priceMax: 0,\n    rewardApr: [0],\n  },\n  month: {\n    volume: 0,\n    volumeQuote: 0,\n    volumeFee: 0,\n    apr: 0,\n    feeApr: 0,\n    priceMin: 0,\n    priceMax: 0,\n    rewardApr: [0],\n  },\n  pooltype: [],\n};\n\nexport const U64_IGNORE_RANGE = new BN(\"18446744073700000000\");\n","import { Connection, PublicKey } from \"@solana/web3.js\";\nimport BN from \"bn.js\";\n\nimport { getMultipleAccountsInfo } from \"@/common\";\nimport { TickArrayLayout } from \"../layout\";\n\nimport { MAX_TICK, MIN_TICK } from \"./constants\";\nimport { getPdaTickArrayAddress } from \"./pda\";\nimport { Tick, TICK_ARRAY_SIZE, TickArray, TickUtils } from \"./tick\";\nimport { TickArrayBitmapExtensionType } from \"../type\";\n\nexport const FETCH_TICKARRAY_COUNT = 15;\n\nexport declare type PoolVars = {\n  key: PublicKey;\n  tokenA: PublicKey;\n  tokenB: PublicKey;\n  fee: number;\n};\n\nexport class TickQuery {\n  public static async getTickArrays(\n    connection: Connection,\n    programId: PublicKey,\n    poolId: PublicKey,\n    tickCurrent: number,\n    tickSpacing: number,\n    tickArrayBitmapArray: BN[],\n    exTickArrayBitmap: TickArrayBitmapExtensionType,\n  ): Promise<{ [key: string]: TickArray }> {\n    const tickArraysToFetch: PublicKey[] = [];\n    const currentTickArrayStartIndex = TickUtils.getTickArrayStartIndexByTick(tickCurrent, tickSpacing);\n\n    const startIndexArray = TickUtils.getInitializedTickArrayInRange(\n      tickArrayBitmapArray,\n      exTickArrayBitmap,\n      tickSpacing,\n      currentTickArrayStartIndex,\n      Math.floor(FETCH_TICKARRAY_COUNT / 2),\n    );\n    for (let i = 0; i < startIndexArray.length; i++) {\n      const { publicKey: tickArrayAddress } = getPdaTickArrayAddress(programId, poolId, startIndexArray[i]);\n      tickArraysToFetch.push(tickArrayAddress);\n    }\n\n    const fetchedTickArrays = (await getMultipleAccountsInfo(connection, tickArraysToFetch)).map((i) =>\n      i !== null ? TickArrayLayout.decode(i.data) : null,\n    );\n\n    const tickArrayCache: { [key: string]: TickArray } = {};\n    for (let i = 0; i < tickArraysToFetch.length; i++) {\n      const _info = fetchedTickArrays[i];\n      if (_info === null) continue;\n\n      tickArrayCache[_info.startTickIndex] = {\n        ..._info,\n        address: tickArraysToFetch[i],\n      };\n    }\n    return tickArrayCache;\n  }\n\n  public static nextInitializedTick(\n    programId: PublicKey,\n    poolId: PublicKey,\n    tickArrayCache: { [key: string]: TickArray },\n    tickIndex: number,\n    tickSpacing: number,\n    zeroForOne: boolean,\n  ): {\n    nextTick: Tick;\n    tickArrayAddress: PublicKey | undefined;\n    tickArrayStartTickIndex: number;\n  } {\n    let {\n      initializedTick: nextTick,\n      tickArrayAddress,\n      tickArrayStartTickIndex,\n    } = this.nextInitializedTickInOneArray(programId, poolId, tickArrayCache, tickIndex, tickSpacing, zeroForOne);\n    while (nextTick == undefined || nextTick.liquidityGross.lten(0)) {\n      tickArrayStartTickIndex = TickUtils.getNextTickArrayStartIndex(tickArrayStartTickIndex, tickSpacing, zeroForOne);\n      if (this.checkIsValidStartIndex(tickArrayStartTickIndex, tickSpacing)) {\n        throw new Error(\"No enough initialized tickArray\");\n      }\n      const cachedTickArray = tickArrayCache[tickArrayStartTickIndex];\n\n      if (cachedTickArray === undefined) continue;\n\n      const {\n        nextTick: _nextTick,\n        tickArrayAddress: _tickArrayAddress,\n        tickArrayStartTickIndex: _tickArrayStartTickIndex,\n      } = this.firstInitializedTickInOneArray(programId, poolId, cachedTickArray, zeroForOne);\n      [nextTick, tickArrayAddress, tickArrayStartTickIndex] = [_nextTick, _tickArrayAddress, _tickArrayStartTickIndex];\n    }\n    if (nextTick == undefined) {\n      throw new Error(\"No invaild tickArray cache\");\n    }\n    return { nextTick, tickArrayAddress, tickArrayStartTickIndex };\n  }\n\n  public static nextInitializedTickArray(\n    tickIndex: number,\n    tickSpacing: number,\n    zeroForOne: boolean,\n    tickArrayBitmap: BN[],\n    exBitmapInfo: TickArrayBitmapExtensionType,\n  ): {\n    isExist: boolean;\n    nextStartIndex: number;\n  } {\n    const currentOffset = Math.floor(tickIndex / TickQuery.tickCount(tickSpacing));\n    const result: number[] = zeroForOne\n      ? TickUtils.searchLowBitFromStart(tickArrayBitmap, exBitmapInfo, currentOffset - 1, 1, tickSpacing)\n      : TickUtils.searchHightBitFromStart(tickArrayBitmap, exBitmapInfo, currentOffset + 1, 1, tickSpacing);\n\n    return result.length > 0 ? { isExist: true, nextStartIndex: result[0] } : { isExist: false, nextStartIndex: 0 };\n  }\n\n  public static firstInitializedTickInOneArray(\n    programId: PublicKey,\n    poolId: PublicKey,\n    tickArray: TickArray,\n    zeroForOne: boolean,\n  ): {\n    nextTick: Tick | undefined;\n    tickArrayAddress: PublicKey;\n    tickArrayStartTickIndex: number;\n  } {\n    let nextInitializedTick: Tick | undefined = undefined;\n    if (zeroForOne) {\n      let i = TICK_ARRAY_SIZE - 1;\n      while (i >= 0) {\n        const tickInArray = tickArray.ticks[i];\n        if (tickInArray.liquidityGross.gtn(0)) {\n          nextInitializedTick = tickInArray;\n          break;\n        }\n        i = i - 1;\n      }\n    } else {\n      let i = 0;\n      while (i < TICK_ARRAY_SIZE) {\n        const tickInArray = tickArray.ticks[i];\n        if (tickInArray.liquidityGross.gtn(0)) {\n          nextInitializedTick = tickInArray;\n          break;\n        }\n        i = i + 1;\n      }\n    }\n    const { publicKey: tickArrayAddress } = getPdaTickArrayAddress(programId, poolId, tickArray.startTickIndex);\n    return { nextTick: nextInitializedTick, tickArrayAddress, tickArrayStartTickIndex: tickArray.startTickIndex };\n  }\n\n  public static nextInitializedTickInOneArray(\n    programId: PublicKey,\n    poolId: PublicKey,\n    tickArrayCache: { [key: string]: TickArray },\n    tickIndex: number,\n    tickSpacing: number,\n    zeroForOne: boolean,\n  ): {\n    initializedTick: Tick | undefined;\n    tickArrayAddress: PublicKey | undefined;\n    tickArrayStartTickIndex: number;\n  } {\n    const startIndex = TickUtils.getTickArrayStartIndexByTick(tickIndex, tickSpacing);\n    let tickPositionInArray = Math.floor((tickIndex - startIndex) / tickSpacing);\n    const cachedTickArray = tickArrayCache[startIndex];\n    if (cachedTickArray == undefined) {\n      return {\n        initializedTick: undefined,\n        tickArrayAddress: undefined,\n        tickArrayStartTickIndex: startIndex,\n      };\n    }\n    let nextInitializedTick: Tick | undefined = undefined;\n    if (zeroForOne) {\n      while (tickPositionInArray >= 0) {\n        const tickInArray = cachedTickArray.ticks[tickPositionInArray];\n        if (tickInArray.liquidityGross.gtn(0)) {\n          nextInitializedTick = tickInArray;\n          break;\n        }\n        tickPositionInArray = tickPositionInArray - 1;\n      }\n    } else {\n      tickPositionInArray = tickPositionInArray + 1;\n      while (tickPositionInArray < TICK_ARRAY_SIZE) {\n        const tickInArray = cachedTickArray.ticks[tickPositionInArray];\n        if (tickInArray.liquidityGross.gtn(0)) {\n          nextInitializedTick = tickInArray;\n          break;\n        }\n        tickPositionInArray = tickPositionInArray + 1;\n      }\n    }\n    const { publicKey: tickArrayAddress } = getPdaTickArrayAddress(programId, poolId, startIndex);\n    return {\n      initializedTick: nextInitializedTick,\n      tickArrayAddress,\n      tickArrayStartTickIndex: cachedTickArray.startTickIndex,\n    };\n  }\n\n  public static getArrayStartIndex(tickIndex: number, tickSpacing: number): number {\n    const ticksInArray = this.tickCount(tickSpacing);\n    const start = Math.floor(tickIndex / ticksInArray);\n\n    return start * ticksInArray;\n  }\n\n  public static checkIsValidStartIndex(tickIndex: number, tickSpacing: number): boolean {\n    if (TickUtils.checkIsOutOfBoundary(tickIndex)) {\n      if (tickIndex > MAX_TICK) {\n        return false;\n      }\n      const minStartIndex = TickUtils.getTickArrayStartIndexByTick(MIN_TICK, tickSpacing);\n      return tickIndex == minStartIndex;\n    }\n    return tickIndex % this.tickCount(tickSpacing) == 0;\n  }\n\n  public static tickCount(tickSpacing: number): number {\n    return TICK_ARRAY_SIZE * tickSpacing;\n  }\n}\n","import { PublicKey, EpochInfo } from \"@solana/web3.js\";\nimport BN from \"bn.js\";\nimport Decimal from \"decimal.js\";\n\nimport {\n  BIT_PRECISION,\n  Fee,\n  FEE_RATE_DENOMINATOR,\n  LOG_B_2_X32,\n  LOG_B_P_ERR_MARGIN_LOWER_X64,\n  LOG_B_P_ERR_MARGIN_UPPER_X64,\n  MAX_SQRT_PRICE_X64,\n  MAX_TICK,\n  MaxU64,\n  MaxUint128,\n  MIN_SQRT_PRICE_X64,\n  MIN_TICK,\n  NEGATIVE_ONE,\n  ONE,\n  Q64,\n  U64Resolution,\n  ZERO,\n  Q128,\n} from \"./constants\";\nimport { getPdaTickArrayAddress } from \"./pda\";\nimport { PoolUtils } from \"./pool\";\nimport { Tick, TickArray, TickUtils } from \"./tick\";\nimport { ReturnTypeGetLiquidityAmountOut, TickArrayBitmapExtensionType } from \"../type\";\nimport { ApiV3PoolInfoConcentratedItem } from \"@/api/type\";\nimport { getTransferAmountFeeV2, minExpirationTime } from \"@/common/transfer\";\nimport { TickQuery } from \"./tickQuery\";\n\nexport class MathUtil {\n  public static mulDivRoundingUp(a: BN, b: BN, denominator: BN): BN {\n    const numerator = a.mul(b);\n    let result = numerator.div(denominator);\n    if (!numerator.mod(denominator).eq(ZERO)) {\n      result = result.add(ONE);\n    }\n    return result;\n  }\n\n  public static mulDivFloor(a: BN, b: BN, denominator: BN): BN {\n    if (denominator.eq(ZERO)) {\n      throw new Error(\"division by 0\");\n    }\n    return a.mul(b).div(denominator);\n  }\n\n  public static mulDivCeil(a: BN, b: BN, denominator: BN): BN {\n    if (denominator.eq(ZERO)) {\n      throw new Error(\"division by 0\");\n    }\n    const numerator = a.mul(b).add(denominator.sub(ONE));\n    return numerator.div(denominator);\n  }\n\n  public static x64ToDecimal(num: BN, decimalPlaces?: number): Decimal {\n    return new Decimal(num.toString()).div(Decimal.pow(2, 64)).toDecimalPlaces(decimalPlaces);\n  }\n\n  public static decimalToX64(num: Decimal): BN {\n    return new BN(num.mul(Decimal.pow(2, 64)).floor().toFixed());\n  }\n\n  public static wrappingSubU128(n0: BN, n1: BN): BN {\n    return n0.add(Q128).sub(n1).mod(Q128);\n  }\n}\n\n// sqrt price math\nfunction mulRightShift(val: BN, mulBy: BN): BN {\n  return signedRightShift(val.mul(mulBy), 64, 256);\n}\n\nfunction signedLeftShift(n0: BN, shiftBy: number, bitWidth: number): BN {\n  const twosN0 = n0.toTwos(bitWidth).shln(shiftBy);\n  twosN0.imaskn(bitWidth + 1);\n  return twosN0.fromTwos(bitWidth);\n}\n\nfunction signedRightShift(n0: BN, shiftBy: number, bitWidth: number): BN {\n  const twoN0 = n0.toTwos(bitWidth).shrn(shiftBy);\n  twoN0.imaskn(bitWidth - shiftBy + 1);\n  return twoN0.fromTwos(bitWidth - shiftBy);\n}\n\nexport class SqrtPriceMath {\n  public static sqrtPriceX64ToPrice(sqrtPriceX64: BN, decimalsA: number, decimalsB: number): Decimal {\n    return MathUtil.x64ToDecimal(sqrtPriceX64)\n      .pow(2)\n      .mul(Decimal.pow(10, decimalsA - decimalsB));\n  }\n\n  public static priceToSqrtPriceX64(price: Decimal, decimalsA: number, decimalsB: number): BN {\n    return MathUtil.decimalToX64(price.mul(Decimal.pow(10, decimalsB - decimalsA)).sqrt());\n  }\n\n  public static getNextSqrtPriceX64FromInput(sqrtPriceX64: BN, liquidity: BN, amountIn: BN, zeroForOne: boolean): BN {\n    if (!sqrtPriceX64.gt(ZERO)) {\n      throw new Error(\"sqrtPriceX64 must greater than 0\");\n    }\n    if (!liquidity.gt(ZERO)) {\n      throw new Error(\"liquidity must greater than 0\");\n    }\n\n    return zeroForOne\n      ? this.getNextSqrtPriceFromTokenAmountARoundingUp(sqrtPriceX64, liquidity, amountIn, true)\n      : this.getNextSqrtPriceFromTokenAmountBRoundingDown(sqrtPriceX64, liquidity, amountIn, true);\n  }\n\n  public static getNextSqrtPriceX64FromOutput(sqrtPriceX64: BN, liquidity: BN, amountOut: BN, zeroForOne: boolean): BN {\n    if (!sqrtPriceX64.gt(ZERO)) {\n      throw new Error(\"sqrtPriceX64 must greater than 0\");\n    }\n    if (!liquidity.gt(ZERO)) {\n      throw new Error(\"liquidity must greater than 0\");\n    }\n\n    return zeroForOne\n      ? this.getNextSqrtPriceFromTokenAmountBRoundingDown(sqrtPriceX64, liquidity, amountOut, false)\n      : this.getNextSqrtPriceFromTokenAmountARoundingUp(sqrtPriceX64, liquidity, amountOut, false);\n  }\n\n  private static getNextSqrtPriceFromTokenAmountARoundingUp(\n    sqrtPriceX64: BN,\n    liquidity: BN,\n    amount: BN,\n    add: boolean,\n  ): BN {\n    if (amount.eq(ZERO)) return sqrtPriceX64;\n    const liquidityLeftShift = liquidity.shln(U64Resolution);\n\n    if (add) {\n      const numerator1 = liquidityLeftShift;\n      const denominator = liquidityLeftShift.add(amount.mul(sqrtPriceX64));\n      if (denominator.gte(numerator1)) {\n        return MathUtil.mulDivCeil(numerator1, sqrtPriceX64, denominator);\n      }\n      return MathUtil.mulDivRoundingUp(numerator1, ONE, numerator1.div(sqrtPriceX64).add(amount));\n    } else {\n      const amountMulSqrtPrice = amount.mul(sqrtPriceX64);\n      if (!liquidityLeftShift.gt(amountMulSqrtPrice)) {\n        throw new Error(\"getNextSqrtPriceFromTokenAmountARoundingUp,liquidityLeftShift must gt amountMulSqrtPrice\");\n      }\n      const denominator = liquidityLeftShift.sub(amountMulSqrtPrice);\n      return MathUtil.mulDivCeil(liquidityLeftShift, sqrtPriceX64, denominator);\n    }\n  }\n\n  private static getNextSqrtPriceFromTokenAmountBRoundingDown(\n    sqrtPriceX64: BN,\n    liquidity: BN,\n    amount: BN,\n    add: boolean,\n  ): BN {\n    const deltaY = amount.shln(U64Resolution);\n    if (add) {\n      return sqrtPriceX64.add(deltaY.div(liquidity));\n    } else {\n      const amountDivLiquidity = MathUtil.mulDivRoundingUp(deltaY, ONE, liquidity);\n      if (!sqrtPriceX64.gt(amountDivLiquidity)) {\n        throw new Error(\"getNextSqrtPriceFromTokenAmountBRoundingDown sqrtPriceX64 must gt amountDivLiquidity\");\n      }\n      return sqrtPriceX64.sub(amountDivLiquidity);\n    }\n  }\n\n  public static getSqrtPriceX64FromTick(tick: number): BN {\n    if (!Number.isInteger(tick)) {\n      throw new Error(\"tick must be integer\");\n    }\n    if (tick < MIN_TICK || tick > MAX_TICK) {\n      throw new Error(\"tick must be in MIN_TICK and MAX_TICK\");\n    }\n    const tickAbs: number = tick < 0 ? tick * -1 : tick;\n\n    let ratio: BN = (tickAbs & 0x1) != 0 ? new BN(\"18445821805675395072\") : new BN(\"18446744073709551616\");\n    if ((tickAbs & 0x2) != 0) ratio = mulRightShift(ratio, new BN(\"18444899583751176192\"));\n    if ((tickAbs & 0x4) != 0) ratio = mulRightShift(ratio, new BN(\"18443055278223355904\"));\n    if ((tickAbs & 0x8) != 0) ratio = mulRightShift(ratio, new BN(\"18439367220385607680\"));\n    if ((tickAbs & 0x10) != 0) ratio = mulRightShift(ratio, new BN(\"18431993317065453568\"));\n    if ((tickAbs & 0x20) != 0) ratio = mulRightShift(ratio, new BN(\"18417254355718170624\"));\n    if ((tickAbs & 0x40) != 0) ratio = mulRightShift(ratio, new BN(\"18387811781193609216\"));\n    if ((tickAbs & 0x80) != 0) ratio = mulRightShift(ratio, new BN(\"18329067761203558400\"));\n    if ((tickAbs & 0x100) != 0) ratio = mulRightShift(ratio, new BN(\"18212142134806163456\"));\n    if ((tickAbs & 0x200) != 0) ratio = mulRightShift(ratio, new BN(\"17980523815641700352\"));\n    if ((tickAbs & 0x400) != 0) ratio = mulRightShift(ratio, new BN(\"17526086738831433728\"));\n    if ((tickAbs & 0x800) != 0) ratio = mulRightShift(ratio, new BN(\"16651378430235570176\"));\n    if ((tickAbs & 0x1000) != 0) ratio = mulRightShift(ratio, new BN(\"15030750278694412288\"));\n    if ((tickAbs & 0x2000) != 0) ratio = mulRightShift(ratio, new BN(\"12247334978884435968\"));\n    if ((tickAbs & 0x4000) != 0) ratio = mulRightShift(ratio, new BN(\"8131365268886854656\"));\n    if ((tickAbs & 0x8000) != 0) ratio = mulRightShift(ratio, new BN(\"3584323654725218816\"));\n    if ((tickAbs & 0x10000) != 0) ratio = mulRightShift(ratio, new BN(\"696457651848324352\"));\n    if ((tickAbs & 0x20000) != 0) ratio = mulRightShift(ratio, new BN(\"26294789957507116\"));\n    if ((tickAbs & 0x40000) != 0) ratio = mulRightShift(ratio, new BN(\"37481735321082\"));\n\n    if (tick > 0) ratio = MaxUint128.div(ratio);\n    return ratio;\n  }\n\n  public static getTickFromPrice(price: Decimal, decimalsA: number, decimalsB: number): number {\n    return SqrtPriceMath.getTickFromSqrtPriceX64(SqrtPriceMath.priceToSqrtPriceX64(price, decimalsA, decimalsB));\n  }\n\n  public static getTickFromSqrtPriceX64(sqrtPriceX64: BN): number {\n    if (sqrtPriceX64.gt(MAX_SQRT_PRICE_X64) || sqrtPriceX64.lt(MIN_SQRT_PRICE_X64)) {\n      throw new Error(\"Provided sqrtPrice is not within the supported sqrtPrice range.\");\n    }\n\n    const msb = sqrtPriceX64.bitLength() - 1;\n    const adjustedMsb = new BN(msb - 64);\n    const log2pIntegerX32 = signedLeftShift(adjustedMsb, 32, 128);\n\n    let bit = new BN(\"8000000000000000\", \"hex\");\n    let precision = 0;\n    let log2pFractionX64 = new BN(0);\n\n    let r = msb >= 64 ? sqrtPriceX64.shrn(msb - 63) : sqrtPriceX64.shln(63 - msb);\n\n    while (bit.gt(new BN(0)) && precision < BIT_PRECISION) {\n      r = r.mul(r);\n      const rMoreThanTwo = r.shrn(127);\n      r = r.shrn(63 + rMoreThanTwo.toNumber());\n      log2pFractionX64 = log2pFractionX64.add(bit.mul(rMoreThanTwo));\n      bit = bit.shrn(1);\n      precision += 1;\n    }\n\n    const log2pFractionX32 = log2pFractionX64.shrn(32);\n\n    const log2pX32 = log2pIntegerX32.add(log2pFractionX32);\n    const logbpX64 = log2pX32.mul(new BN(LOG_B_2_X32));\n\n    const tickLow = signedRightShift(logbpX64.sub(new BN(LOG_B_P_ERR_MARGIN_LOWER_X64)), 64, 128).toNumber();\n    const tickHigh = signedRightShift(logbpX64.add(new BN(LOG_B_P_ERR_MARGIN_UPPER_X64)), 64, 128).toNumber();\n\n    if (tickLow == tickHigh) {\n      return tickLow;\n    } else {\n      const derivedTickHighSqrtPriceX64 = SqrtPriceMath.getSqrtPriceX64FromTick(tickHigh);\n      return derivedTickHighSqrtPriceX64.lte(sqrtPriceX64) ? tickHigh : tickLow;\n    }\n  }\n}\n\n// tick math\nexport class TickMath {\n  public static getTickWithPriceAndTickspacing(\n    price: Decimal,\n    tickSpacing: number,\n    mintDecimalsA: number,\n    mintDecimalsB: number,\n  ): number {\n    const tick = SqrtPriceMath.getTickFromSqrtPriceX64(\n      SqrtPriceMath.priceToSqrtPriceX64(price, mintDecimalsA, mintDecimalsB),\n    );\n    let result = tick / tickSpacing;\n    if (result < 0) {\n      result = Math.floor(result);\n    } else {\n      result = Math.ceil(result);\n    }\n    return result * tickSpacing;\n  }\n\n  public static roundPriceWithTickspacing(\n    price: Decimal,\n    tickSpacing: number,\n    mintDecimalsA: number,\n    mintDecimalsB: number,\n  ): Decimal {\n    const tick = TickMath.getTickWithPriceAndTickspacing(price, tickSpacing, mintDecimalsA, mintDecimalsB);\n    const sqrtPriceX64 = SqrtPriceMath.getSqrtPriceX64FromTick(tick);\n    return SqrtPriceMath.sqrtPriceX64ToPrice(sqrtPriceX64, mintDecimalsA, mintDecimalsB);\n  }\n}\n\nexport class LiquidityMath {\n  public static addDelta(x: BN, y: BN): BN {\n    return x.add(y);\n  }\n\n  public static getTokenAmountAFromLiquidity(\n    sqrtPriceX64A: BN,\n    sqrtPriceX64B: BN,\n    liquidity: BN,\n    roundUp: boolean,\n  ): BN {\n    if (sqrtPriceX64A.gt(sqrtPriceX64B)) {\n      [sqrtPriceX64A, sqrtPriceX64B] = [sqrtPriceX64B, sqrtPriceX64A];\n    }\n\n    if (!sqrtPriceX64A.gt(ZERO)) {\n      throw new Error(\"sqrtPriceX64A must greater than 0\");\n    }\n\n    const numerator1 = liquidity.ushln(U64Resolution);\n    const numerator2 = sqrtPriceX64B.sub(sqrtPriceX64A);\n\n    return roundUp\n      ? MathUtil.mulDivRoundingUp(MathUtil.mulDivCeil(numerator1, numerator2, sqrtPriceX64B), ONE, sqrtPriceX64A)\n      : MathUtil.mulDivFloor(numerator1, numerator2, sqrtPriceX64B).div(sqrtPriceX64A);\n  }\n\n  public static getTokenAmountBFromLiquidity(\n    sqrtPriceX64A: BN,\n    sqrtPriceX64B: BN,\n    liquidity: BN,\n    roundUp: boolean,\n  ): BN {\n    if (sqrtPriceX64A.gt(sqrtPriceX64B)) {\n      [sqrtPriceX64A, sqrtPriceX64B] = [sqrtPriceX64B, sqrtPriceX64A];\n    }\n    if (!sqrtPriceX64A.gt(ZERO)) {\n      throw new Error(\"sqrtPriceX64A must greater than 0\");\n    }\n\n    return roundUp\n      ? MathUtil.mulDivCeil(liquidity, sqrtPriceX64B.sub(sqrtPriceX64A), Q64)\n      : MathUtil.mulDivFloor(liquidity, sqrtPriceX64B.sub(sqrtPriceX64A), Q64);\n  }\n\n  public static getLiquidityFromTokenAmountA(sqrtPriceX64A: BN, sqrtPriceX64B: BN, amountA: BN, roundUp: boolean): BN {\n    if (sqrtPriceX64A.gt(sqrtPriceX64B)) {\n      [sqrtPriceX64A, sqrtPriceX64B] = [sqrtPriceX64B, sqrtPriceX64A];\n    }\n\n    const numerator = amountA.mul(sqrtPriceX64A).mul(sqrtPriceX64B);\n    const denominator = sqrtPriceX64B.sub(sqrtPriceX64A);\n    const result = numerator.div(denominator);\n\n    if (roundUp) {\n      return MathUtil.mulDivRoundingUp(result, ONE, MaxU64);\n    } else {\n      return result.shrn(U64Resolution);\n    }\n  }\n\n  public static getLiquidityFromTokenAmountB(sqrtPriceX64A: BN, sqrtPriceX64B: BN, amountB: BN): BN {\n    if (sqrtPriceX64A.gt(sqrtPriceX64B)) {\n      [sqrtPriceX64A, sqrtPriceX64B] = [sqrtPriceX64B, sqrtPriceX64A];\n    }\n    return MathUtil.mulDivFloor(amountB, MaxU64, sqrtPriceX64B.sub(sqrtPriceX64A));\n  }\n\n  public static getLiquidityFromTokenAmounts(\n    sqrtPriceCurrentX64: BN,\n    sqrtPriceX64A: BN,\n    sqrtPriceX64B: BN,\n    amountA: BN,\n    amountB: BN,\n  ): BN {\n    if (sqrtPriceX64A.gt(sqrtPriceX64B)) {\n      [sqrtPriceX64A, sqrtPriceX64B] = [sqrtPriceX64B, sqrtPriceX64A];\n    }\n\n    if (sqrtPriceCurrentX64.lte(sqrtPriceX64A)) {\n      return LiquidityMath.getLiquidityFromTokenAmountA(sqrtPriceX64A, sqrtPriceX64B, amountA, false);\n    } else if (sqrtPriceCurrentX64.lt(sqrtPriceX64B)) {\n      const liquidity0 = LiquidityMath.getLiquidityFromTokenAmountA(sqrtPriceCurrentX64, sqrtPriceX64B, amountA, false);\n      const liquidity1 = LiquidityMath.getLiquidityFromTokenAmountB(sqrtPriceX64A, sqrtPriceCurrentX64, amountB);\n      return liquidity0.lt(liquidity1) ? liquidity0 : liquidity1;\n    } else {\n      return LiquidityMath.getLiquidityFromTokenAmountB(sqrtPriceX64A, sqrtPriceX64B, amountB);\n    }\n  }\n\n  public static getAmountsFromLiquidity(\n    sqrtPriceCurrentX64: BN,\n    sqrtPriceX64A: BN,\n    sqrtPriceX64B: BN,\n    liquidity: BN,\n    roundUp: boolean,\n  ): { amountA: BN; amountB: BN } {\n    if (sqrtPriceX64A.gt(sqrtPriceX64B)) {\n      [sqrtPriceX64A, sqrtPriceX64B] = [sqrtPriceX64B, sqrtPriceX64A];\n    }\n\n    if (sqrtPriceCurrentX64.lte(sqrtPriceX64A)) {\n      return {\n        amountA: LiquidityMath.getTokenAmountAFromLiquidity(sqrtPriceX64A, sqrtPriceX64B, liquidity, roundUp),\n        amountB: new BN(0),\n      };\n    } else if (sqrtPriceCurrentX64.lt(sqrtPriceX64B)) {\n      const amountA = LiquidityMath.getTokenAmountAFromLiquidity(\n        sqrtPriceCurrentX64,\n        sqrtPriceX64B,\n        liquidity,\n        roundUp,\n      );\n      const amountB = LiquidityMath.getTokenAmountBFromLiquidity(\n        sqrtPriceX64A,\n        sqrtPriceCurrentX64,\n        liquidity,\n        roundUp,\n      );\n      return { amountA, amountB };\n    } else {\n      return {\n        amountA: new BN(0),\n        amountB: LiquidityMath.getTokenAmountBFromLiquidity(sqrtPriceX64A, sqrtPriceX64B, liquidity, roundUp),\n      };\n    }\n  }\n\n  public static getAmountsFromLiquidityWithSlippage(\n    sqrtPriceCurrentX64: BN,\n    sqrtPriceX64A: BN,\n    sqrtPriceX64B: BN,\n    liquidity: BN,\n    amountMax: boolean,\n    roundUp: boolean,\n    amountSlippage: number,\n  ): { amountSlippageA: BN; amountSlippageB: BN } {\n    const { amountA, amountB } = LiquidityMath.getAmountsFromLiquidity(\n      sqrtPriceCurrentX64,\n      sqrtPriceX64A,\n      sqrtPriceX64B,\n      liquidity,\n      roundUp,\n    );\n    const coefficient = amountMax ? 1 + amountSlippage : 1 - amountSlippage;\n\n    const amount0Slippage = new BN(new Decimal(amountA.toString()).mul(coefficient).toFixed(0));\n    const amount1Slippage = new BN(new Decimal(amountB.toString()).mul(coefficient).toFixed(0));\n    return {\n      amountSlippageA: amount0Slippage,\n      amountSlippageB: amount1Slippage,\n    };\n  }\n\n  public static getAmountsOutFromLiquidity({\n    poolInfo,\n    tickLower,\n    tickUpper,\n    liquidity,\n    slippage,\n    add,\n    epochInfo,\n    amountAddFee,\n  }: {\n    poolInfo: ApiV3PoolInfoConcentratedItem;\n    tickLower: number;\n    tickUpper: number;\n    liquidity: BN;\n    slippage: number;\n    add: boolean;\n\n    epochInfo: EpochInfo;\n    amountAddFee: boolean;\n  }): ReturnTypeGetLiquidityAmountOut {\n    const sqrtPriceX64 = SqrtPriceMath.priceToSqrtPriceX64(\n      new Decimal(poolInfo.price),\n      poolInfo.mintA.decimals,\n      poolInfo.mintB.decimals,\n    );\n    const sqrtPriceX64A = SqrtPriceMath.getSqrtPriceX64FromTick(tickLower);\n    const sqrtPriceX64B = SqrtPriceMath.getSqrtPriceX64FromTick(tickUpper);\n\n    const coefficientRe = add ? 1 + slippage : 1 - slippage;\n\n    const amounts = LiquidityMath.getAmountsFromLiquidity(sqrtPriceX64, sqrtPriceX64A, sqrtPriceX64B, liquidity, add);\n\n    const [amountA, amountB] = [\n      getTransferAmountFeeV2(amounts.amountA, poolInfo.mintA.extensions?.feeConfig, epochInfo, amountAddFee),\n      getTransferAmountFeeV2(amounts.amountB, poolInfo.mintB.extensions?.feeConfig, epochInfo, amountAddFee),\n    ];\n    const [amountSlippageA, amountSlippageB] = [\n      getTransferAmountFeeV2(\n        new BN(new Decimal(amounts.amountA.toString()).mul(coefficientRe).toFixed(0)),\n        poolInfo.mintA.extensions?.feeConfig,\n        epochInfo,\n        amountAddFee,\n      ),\n      getTransferAmountFeeV2(\n        new BN(new Decimal(amounts.amountB.toString()).mul(coefficientRe).toFixed(0)),\n        poolInfo.mintB.extensions?.feeConfig,\n        epochInfo,\n        amountAddFee,\n      ),\n    ];\n\n    return {\n      liquidity,\n      amountA,\n      amountB,\n      amountSlippageA,\n      amountSlippageB,\n      expirationTime: minExpirationTime(amountA.expirationTime, amountB.expirationTime),\n    };\n  }\n}\n\n// swap math\n\ntype SwapStep = {\n  sqrtPriceX64Next: BN;\n  amountIn: BN;\n  amountOut: BN;\n  feeAmount: BN;\n};\n\nexport interface StepComputations {\n  sqrtPriceStartX64: BN;\n  tickNext: number;\n  initialized: boolean;\n  sqrtPriceNextX64: BN;\n  amountIn: BN;\n  amountOut: BN;\n  feeAmount: BN;\n}\n\nexport abstract class SwapMath {\n  public static swapCompute(\n    programId: PublicKey,\n    poolId: PublicKey,\n    tickArrayCache: { [key: string]: TickArray },\n    tickArrayBitmap: BN[],\n    tickarrayBitmapExtension: TickArrayBitmapExtensionType,\n    zeroForOne: boolean,\n    fee: number,\n    liquidity: BN,\n    currentTick: number,\n    tickSpacing: number,\n    currentSqrtPriceX64: BN,\n    amountSpecified: BN,\n    lastSavedTickArrayStartIndex: number,\n    sqrtPriceLimitX64?: BN,\n  ): {\n    amountCalculated: BN;\n    feeAmount: BN;\n    sqrtPriceX64: BN;\n    liquidity: BN;\n    tickCurrent: number;\n    accounts: PublicKey[];\n  } {\n    if (amountSpecified.eq(ZERO)) {\n      throw new Error(\"amountSpecified must not be 0\");\n    }\n    if (!sqrtPriceLimitX64) sqrtPriceLimitX64 = zeroForOne ? MIN_SQRT_PRICE_X64.add(ONE) : MAX_SQRT_PRICE_X64.sub(ONE);\n\n    if (zeroForOne) {\n      if (sqrtPriceLimitX64.lt(MIN_SQRT_PRICE_X64)) {\n        throw new Error(\"sqrtPriceX64 must greater than MIN_SQRT_PRICE_X64\");\n      }\n\n      if (sqrtPriceLimitX64.gte(currentSqrtPriceX64)) {\n        throw new Error(\"sqrtPriceX64 must smaller than current\");\n      }\n    } else {\n      if (sqrtPriceLimitX64.gt(MAX_SQRT_PRICE_X64)) {\n        throw new Error(\"sqrtPriceX64 must smaller than MAX_SQRT_PRICE_X64\");\n      }\n\n      if (sqrtPriceLimitX64.lte(currentSqrtPriceX64)) {\n        throw new Error(\"sqrtPriceX64 must greater than current\");\n      }\n    }\n    const baseInput = amountSpecified.gt(ZERO);\n\n    const state = {\n      amountSpecifiedRemaining: amountSpecified,\n      amountCalculated: ZERO,\n      sqrtPriceX64: currentSqrtPriceX64,\n      tick:\n        currentTick > lastSavedTickArrayStartIndex\n          ? Math.min(lastSavedTickArrayStartIndex + TickQuery.tickCount(tickSpacing) - 1, currentTick)\n          : lastSavedTickArrayStartIndex,\n      accounts: [] as PublicKey[],\n      liquidity,\n      feeAmount: new BN(0),\n    };\n    let tickAarrayStartIndex = lastSavedTickArrayStartIndex;\n    let tickArrayCurrent = tickArrayCache[lastSavedTickArrayStartIndex];\n    let loopCount = 0;\n    let t = !zeroForOne && tickArrayCurrent.startTickIndex === state.tick;\n    while (\n      !state.amountSpecifiedRemaining.eq(ZERO) &&\n      !state.sqrtPriceX64.eq(sqrtPriceLimitX64)\n      // state.tick < MAX_TICK &&\n      // state.tick > MIN_TICK\n    ) {\n      if (loopCount > 10) {\n        throw Error(\"liquidity limit\");\n      }\n      const step: Partial<StepComputations> = {};\n      step.sqrtPriceStartX64 = state.sqrtPriceX64;\n\n      const tickState: Tick | null = TickUtils.nextInitTick(tickArrayCurrent, state.tick, tickSpacing, zeroForOne, t);\n\n      let nextInitTick: Tick | null = tickState ? tickState : null; // TickUtils.firstInitializedTick(tickArrayCurrent, zeroForOne)\n      let tickArrayAddress: PublicKey | null = null;\n\n      if (!nextInitTick?.liquidityGross.gtn(0)) {\n        const nextInitTickArrayIndex = PoolUtils.nextInitializedTickArrayStartIndex(\n          {\n            tickCurrent: state.tick,\n            tickSpacing,\n            tickArrayBitmap,\n            exBitmapInfo: tickarrayBitmapExtension,\n          },\n          tickAarrayStartIndex,\n          zeroForOne,\n        );\n        if (!nextInitTickArrayIndex.isExist) {\n          throw Error(\"swapCompute LiquidityInsufficient\");\n        }\n        tickAarrayStartIndex = nextInitTickArrayIndex.nextStartIndex;\n\n        const { publicKey: expectedNextTickArrayAddress } = getPdaTickArrayAddress(\n          programId,\n          poolId,\n          tickAarrayStartIndex,\n        );\n        tickArrayAddress = expectedNextTickArrayAddress;\n        tickArrayCurrent = tickArrayCache[tickAarrayStartIndex];\n\n        nextInitTick = TickUtils.firstInitializedTick(tickArrayCurrent, zeroForOne);\n      }\n\n      step.tickNext = nextInitTick.tick;\n      step.initialized = nextInitTick.liquidityGross.gtn(0);\n      if (lastSavedTickArrayStartIndex !== tickAarrayStartIndex && tickArrayAddress) {\n        state.accounts.push(tickArrayAddress);\n        lastSavedTickArrayStartIndex = tickAarrayStartIndex;\n      }\n      if (step.tickNext < MIN_TICK) {\n        step.tickNext = MIN_TICK;\n      } else if (step.tickNext > MAX_TICK) {\n        step.tickNext = MAX_TICK;\n      }\n\n      step.sqrtPriceNextX64 = SqrtPriceMath.getSqrtPriceX64FromTick(step.tickNext);\n      let targetPrice: BN;\n      if (\n        (zeroForOne && step.sqrtPriceNextX64.lt(sqrtPriceLimitX64)) ||\n        (!zeroForOne && step.sqrtPriceNextX64.gt(sqrtPriceLimitX64))\n      ) {\n        targetPrice = sqrtPriceLimitX64;\n      } else {\n        targetPrice = step.sqrtPriceNextX64;\n      }\n      [state.sqrtPriceX64, step.amountIn, step.amountOut, step.feeAmount] = SwapMath.swapStepCompute(\n        state.sqrtPriceX64,\n        targetPrice,\n        state.liquidity,\n        state.amountSpecifiedRemaining,\n        fee,\n      );\n\n      state.feeAmount = state.feeAmount.add(step.feeAmount);\n\n      if (baseInput) {\n        state.amountSpecifiedRemaining = state.amountSpecifiedRemaining.sub(step.amountIn.add(step.feeAmount));\n        state.amountCalculated = state.amountCalculated.sub(step.amountOut);\n      } else {\n        state.amountSpecifiedRemaining = state.amountSpecifiedRemaining.add(step.amountOut);\n        state.amountCalculated = state.amountCalculated.add(step.amountIn.add(step.feeAmount));\n      }\n      if (state.sqrtPriceX64.eq(step.sqrtPriceNextX64)) {\n        if (step.initialized) {\n          let liquidityNet = nextInitTick.liquidityNet;\n          if (zeroForOne) liquidityNet = liquidityNet.mul(NEGATIVE_ONE);\n          state.liquidity = LiquidityMath.addDelta(state.liquidity, liquidityNet);\n        }\n        t = step.tickNext != state.tick && !zeroForOne && tickArrayCurrent.startTickIndex === step.tickNext;\n        state.tick = zeroForOne ? step.tickNext - 1 : step.tickNext;\n      } else if (state.sqrtPriceX64 != step.sqrtPriceStartX64) {\n        const _T = SqrtPriceMath.getTickFromSqrtPriceX64(state.sqrtPriceX64);\n        t = _T != state.tick && !zeroForOne && tickArrayCurrent.startTickIndex === _T;\n        state.tick = _T;\n      }\n      ++loopCount;\n    }\n\n    try {\n      const { nextStartIndex: tickAarrayStartIndex, isExist } = TickQuery.nextInitializedTickArray(\n        state.tick,\n        tickSpacing,\n        zeroForOne,\n        tickArrayBitmap,\n        tickarrayBitmapExtension,\n      );\n      if (isExist && lastSavedTickArrayStartIndex !== tickAarrayStartIndex) {\n        state.accounts.push(getPdaTickArrayAddress(programId, poolId, tickAarrayStartIndex).publicKey);\n        lastSavedTickArrayStartIndex = tickAarrayStartIndex;\n      }\n    } catch (e) {\n      /* empty */\n    }\n\n    return {\n      amountCalculated: state.amountCalculated,\n      feeAmount: state.feeAmount,\n      sqrtPriceX64: state.sqrtPriceX64,\n      liquidity: state.liquidity,\n      tickCurrent: state.tick,\n      accounts: state.accounts,\n    };\n  }\n  // public static swapCompute(\n  //   programId: PublicKey,\n  //   poolId: PublicKey,\n  //   tickArrayCache: { [key: string]: TickArray },\n  //   tickArrayBitmap: BN[],\n  //   tickarrayBitmapExtension: TickArrayBitmapExtensionType,\n  //   zeroForOne: boolean,\n  //   fee: number,\n  //   liquidity: BN,\n  //   currentTick: number,\n  //   tickSpacing: number,\n  //   currentSqrtPriceX64: BN,\n  //   amountSpecified: BN,\n  //   lastSavedTickArrayStartIndex: number,\n  //   sqrtPriceLimitX64?: BN,\n  // ): {\n  //   amountCalculated: BN;\n  //   feeAmount: BN;\n  //   sqrtPriceX64: BN;\n  //   liquidity: BN;\n  //   tickCurrent: number;\n  //   accounts: PublicKey[];\n  // } {\n  //   if (amountSpecified.eq(ZERO)) {\n  //     throw new Error(\"amountSpecified must not be 0\");\n  //   }\n  //   if (!sqrtPriceLimitX64) sqrtPriceLimitX64 = zeroForOne ? MIN_SQRT_PRICE_X64.add(ONE) : MAX_SQRT_PRICE_X64.sub(ONE);\n\n  //   if (zeroForOne) {\n  //     if (sqrtPriceLimitX64.lt(MIN_SQRT_PRICE_X64)) {\n  //       throw new Error(\"sqrtPriceX64 must greater than MIN_SQRT_PRICE_X64\");\n  //     }\n\n  //     if (sqrtPriceLimitX64.gte(currentSqrtPriceX64)) {\n  //       throw new Error(\"sqrtPriceX64 must smaller than current\");\n  //     }\n  //   } else {\n  //     if (sqrtPriceLimitX64.gt(MAX_SQRT_PRICE_X64)) {\n  //       throw new Error(\"sqrtPriceX64 must smaller than MAX_SQRT_PRICE_X64\");\n  //     }\n\n  //     if (sqrtPriceLimitX64.lte(currentSqrtPriceX64)) {\n  //       throw new Error(\"sqrtPriceX64 must greater than current\");\n  //     }\n  //   }\n  //   const baseInput = amountSpecified.gt(ZERO);\n\n  //   const state = {\n  //     amountSpecifiedRemaining: amountSpecified,\n  //     amountCalculated: ZERO,\n  //     sqrtPriceX64: currentSqrtPriceX64,\n  //     tick:\n  //       currentTick > lastSavedTickArrayStartIndex\n  //         ? Math.min(lastSavedTickArrayStartIndex + TickQuery.tickCount(tickSpacing) - 1, currentTick)\n  //         : lastSavedTickArrayStartIndex,\n  //     accounts: [] as PublicKey[],\n  //     liquidity,\n  //     feeAmount: new BN(0),\n  //   };\n  //   let tickAarrayStartIndex = lastSavedTickArrayStartIndex;\n  //   let tickArrayCurrent = tickArrayCache[lastSavedTickArrayStartIndex];\n  //   let loopCount = 0;\n  //   while (\n  //     !state.amountSpecifiedRemaining.eq(ZERO) &&\n  //     !state.sqrtPriceX64.eq(sqrtPriceLimitX64)\n  //     // state.tick < MAX_TICK &&\n  //     // state.tick > MIN_TICK\n  //   ) {\n  //     if (loopCount > 10) {\n  //       throw Error(\"liquidity limit\");\n  //     }\n  //     const step: Partial<StepComputations> = {};\n  //     step.sqrtPriceStartX64 = state.sqrtPriceX64;\n\n  //     const tickState: Tick | null = TickUtils.nextInitTick(tickArrayCurrent, state.tick, tickSpacing, zeroForOne);\n\n  //     let nextInitTick: Tick | null = tickState ? tickState : null; // TickUtils.firstInitializedTick(tickArrayCurrent, zeroForOne)\n  //     let tickArrayAddress: PublicKey | null = null;\n\n  //     if (!nextInitTick?.liquidityGross.gtn(0)) {\n  //       const nextInitTickArrayIndex = PoolUtils.nextInitializedTickArrayStartIndex(\n  //         {\n  //           tickCurrent: state.tick,\n  //           tickSpacing,\n  //           tickArrayBitmap,\n  //           exBitmapInfo: tickarrayBitmapExtension,\n  //         },\n  //         tickAarrayStartIndex,\n  //         zeroForOne,\n  //       );\n  //       if (!nextInitTickArrayIndex.isExist) {\n  //         throw Error(\"swapCompute LiquidityInsufficient\");\n  //       }\n  //       tickAarrayStartIndex = nextInitTickArrayIndex.nextStartIndex;\n\n  //       const { publicKey: expectedNextTickArrayAddress } = getPdaTickArrayAddress(\n  //         programId,\n  //         poolId,\n  //         tickAarrayStartIndex,\n  //       );\n  //       tickArrayAddress = expectedNextTickArrayAddress;\n  //       tickArrayCurrent = tickArrayCache[tickAarrayStartIndex];\n\n  //       nextInitTick = TickUtils.firstInitializedTick(tickArrayCurrent, zeroForOne);\n  //     }\n\n  //     step.tickNext = nextInitTick.tick;\n  //     step.initialized = nextInitTick.liquidityGross.gtn(0);\n  //     if (lastSavedTickArrayStartIndex !== tickAarrayStartIndex && tickArrayAddress) {\n  //       state.accounts.push(tickArrayAddress);\n  //       lastSavedTickArrayStartIndex = tickAarrayStartIndex;\n  //     }\n  //     if (step.tickNext < MIN_TICK) {\n  //       step.tickNext = MIN_TICK;\n  //     } else if (step.tickNext > MAX_TICK) {\n  //       step.tickNext = MAX_TICK;\n  //     }\n\n  //     step.sqrtPriceNextX64 = SqrtPriceMath.getSqrtPriceX64FromTick(step.tickNext);\n  //     let targetPrice: BN;\n  //     if (\n  //       (zeroForOne && step.sqrtPriceNextX64.lt(sqrtPriceLimitX64)) ||\n  //       (!zeroForOne && step.sqrtPriceNextX64.gt(sqrtPriceLimitX64))\n  //     ) {\n  //       targetPrice = sqrtPriceLimitX64;\n  //     } else {\n  //       targetPrice = step.sqrtPriceNextX64;\n  //     }\n  //     [state.sqrtPriceX64, step.amountIn, step.amountOut, step.feeAmount] = SwapMath.swapStepCompute(\n  //       state.sqrtPriceX64,\n  //       targetPrice,\n  //       state.liquidity,\n  //       state.amountSpecifiedRemaining,\n  //       fee,\n  //     );\n\n  //     state.feeAmount = state.feeAmount.add(step.feeAmount);\n\n  //     if (baseInput) {\n  //       state.amountSpecifiedRemaining = state.amountSpecifiedRemaining.sub(step.amountIn.add(step.feeAmount));\n  //       state.amountCalculated = state.amountCalculated.sub(step.amountOut);\n  //     } else {\n  //       state.amountSpecifiedRemaining = state.amountSpecifiedRemaining.add(step.amountOut);\n  //       state.amountCalculated = state.amountCalculated.add(step.amountIn.add(step.feeAmount));\n  //     }\n  //     if (state.sqrtPriceX64.eq(step.sqrtPriceNextX64)) {\n  //       if (step.initialized) {\n  //         let liquidityNet = nextInitTick.liquidityNet;\n  //         if (zeroForOne) liquidityNet = liquidityNet.mul(NEGATIVE_ONE);\n  //         state.liquidity = LiquidityMath.addDelta(state.liquidity, liquidityNet);\n  //       }\n  //       state.tick = zeroForOne ? step.tickNext - 1 : step.tickNext;\n  //     } else if (state.sqrtPriceX64 != step.sqrtPriceStartX64) {\n  //       state.tick = SqrtPriceMath.getTickFromSqrtPriceX64(state.sqrtPriceX64);\n  //     }\n  //     ++loopCount;\n  //   }\n\n  //   // try {\n  //   //   console.log('state.tick', state.tick)\n  //   //   const { nextStartIndex: tickAarrayStartIndex } = TickQuery.nextInitializedTickArray(\n  //   //     state.tick,\n  //   //     tickSpacing,\n  //   //     zeroForOne,\n  //   //     tickArrayBitmap,\n  //   //     tickarrayBitmapExtension,\n  //   //   );\n  //   //   if (\n  //   //     lastSavedTickArrayStartIndex !== tickAarrayStartIndex\n  //   //   ) {\n  //   //     state.accounts.push(getPdaTickArrayAddress(\n  //   //       programId,\n  //   //       poolId,\n  //   //       tickAarrayStartIndex,\n  //   //     ).publicKey)\n  //   //     lastSavedTickArrayStartIndex = tickAarrayStartIndex;\n  //   //   }\n  //   // } catch (e) { /* empty */ }\n\n  //   return {\n  //     amountCalculated: state.amountCalculated,\n  //     feeAmount: state.feeAmount,\n  //     sqrtPriceX64: state.sqrtPriceX64,\n  //     liquidity: state.liquidity,\n  //     tickCurrent: state.tick,\n  //     accounts: state.accounts,\n  //   };\n  // }\n\n  private static swapStepCompute(\n    sqrtPriceX64Current: BN,\n    sqrtPriceX64Target: BN,\n    liquidity: BN,\n    amountRemaining: BN,\n    feeRate: Fee,\n  ): [BN, BN, BN, BN] {\n    const swapStep: SwapStep = {\n      sqrtPriceX64Next: new BN(0),\n      amountIn: new BN(0),\n      amountOut: new BN(0),\n      feeAmount: new BN(0),\n    };\n\n    const zeroForOne = sqrtPriceX64Current.gte(sqrtPriceX64Target);\n    const baseInput = amountRemaining.gte(ZERO);\n\n    if (baseInput) {\n      const amountRemainingSubtractFee = MathUtil.mulDivFloor(\n        amountRemaining,\n        FEE_RATE_DENOMINATOR.sub(new BN(feeRate.toString())),\n        FEE_RATE_DENOMINATOR,\n      );\n      swapStep.amountIn = zeroForOne\n        ? LiquidityMath.getTokenAmountAFromLiquidity(sqrtPriceX64Target, sqrtPriceX64Current, liquidity, true)\n        : LiquidityMath.getTokenAmountBFromLiquidity(sqrtPriceX64Current, sqrtPriceX64Target, liquidity, true);\n      if (amountRemainingSubtractFee.gte(swapStep.amountIn)) {\n        swapStep.sqrtPriceX64Next = sqrtPriceX64Target;\n      } else {\n        swapStep.sqrtPriceX64Next = SqrtPriceMath.getNextSqrtPriceX64FromInput(\n          sqrtPriceX64Current,\n          liquidity,\n          amountRemainingSubtractFee,\n          zeroForOne,\n        );\n      }\n    } else {\n      swapStep.amountOut = zeroForOne\n        ? LiquidityMath.getTokenAmountBFromLiquidity(sqrtPriceX64Target, sqrtPriceX64Current, liquidity, false)\n        : LiquidityMath.getTokenAmountAFromLiquidity(sqrtPriceX64Current, sqrtPriceX64Target, liquidity, false);\n      if (amountRemaining.mul(NEGATIVE_ONE).gte(swapStep.amountOut)) {\n        swapStep.sqrtPriceX64Next = sqrtPriceX64Target;\n      } else {\n        swapStep.sqrtPriceX64Next = SqrtPriceMath.getNextSqrtPriceX64FromOutput(\n          sqrtPriceX64Current,\n          liquidity,\n          amountRemaining.mul(NEGATIVE_ONE),\n          zeroForOne,\n        );\n      }\n    }\n\n    const reachTargetPrice = sqrtPriceX64Target.eq(swapStep.sqrtPriceX64Next);\n\n    if (zeroForOne) {\n      if (!(reachTargetPrice && baseInput)) {\n        swapStep.amountIn = LiquidityMath.getTokenAmountAFromLiquidity(\n          swapStep.sqrtPriceX64Next,\n          sqrtPriceX64Current,\n          liquidity,\n          true,\n        );\n      }\n\n      if (!(reachTargetPrice && !baseInput)) {\n        swapStep.amountOut = LiquidityMath.getTokenAmountBFromLiquidity(\n          swapStep.sqrtPriceX64Next,\n          sqrtPriceX64Current,\n          liquidity,\n          false,\n        );\n      }\n    } else {\n      swapStep.amountIn =\n        reachTargetPrice && baseInput\n          ? swapStep.amountIn\n          : LiquidityMath.getTokenAmountBFromLiquidity(sqrtPriceX64Current, swapStep.sqrtPriceX64Next, liquidity, true);\n      swapStep.amountOut =\n        reachTargetPrice && !baseInput\n          ? swapStep.amountOut\n          : LiquidityMath.getTokenAmountAFromLiquidity(\n              sqrtPriceX64Current,\n              swapStep.sqrtPriceX64Next,\n              liquidity,\n              false,\n            );\n    }\n\n    if (!baseInput && swapStep.amountOut.gt(amountRemaining.mul(NEGATIVE_ONE))) {\n      swapStep.amountOut = amountRemaining.mul(NEGATIVE_ONE);\n    }\n    if (baseInput && !swapStep.sqrtPriceX64Next.eq(sqrtPriceX64Target)) {\n      swapStep.feeAmount = amountRemaining.sub(swapStep.amountIn);\n    } else {\n      swapStep.feeAmount = MathUtil.mulDivCeil(\n        swapStep.amountIn,\n        new BN(feeRate),\n        FEE_RATE_DENOMINATOR.sub(new BN(feeRate)),\n      );\n    }\n    return [swapStep.sqrtPriceX64Next, swapStep.amountIn, swapStep.amountOut, swapStep.feeAmount];\n  }\n}\n","import { PublicKey, Connection, EpochInfo } from \"@solana/web3.js\";\nimport BN from \"bn.js\";\n\nimport {\n  ClmmPoolInfo,\n  ClmmPoolRewardInfo,\n  ClmmPoolRewardLayoutInfo,\n  ReturnTypeGetLiquidityAmountOut,\n  TickArrayBitmapExtensionType,\n  ReturnTypeFetchExBitmaps,\n  ReturnTypeFetchMultiplePoolTickArrays,\n  SDKParsedConcentratedInfo,\n  ReturnTypeComputeAmountOut,\n  ReturnTypeComputeAmountOutFormat,\n  ComputeClmmPoolInfo,\n} from \"../type\";\n\nimport { ApiV3PoolInfoConcentratedItem, ApiV3Token } from \"@/api/type\";\n\nimport { NEGATIVE_ONE, Q64, ZERO, MAX_TICK, MIN_TICK, MIN_SQRT_PRICE_X64, MAX_SQRT_PRICE_X64 } from \"./constants\";\nimport { MathUtil, SwapMath, SqrtPriceMath, LiquidityMath } from \"./math\";\nimport { getPdaTickArrayAddress, getPdaPersonalPositionAddress, getPdaExBitmapAccount } from \"./pda\";\nimport { TickArray, TickUtils, TICK_ARRAY_BITMAP_SIZE, Tick } from \"./tick\";\nimport { TickArrayBitmap, TickArrayBitmapExtensionUtils } from \"./tickarrayBitmap\";\nimport { TickQuery } from \"./tickQuery\";\nimport { TickArrayBitmapExtensionLayout, PositionInfoLayout, TickArrayLayout, PoolInfoLayout } from \"../layout\";\nimport {\n  getMultipleAccountsInfo,\n  getMultipleAccountsInfoWithCustomFlags,\n  getTransferAmountFeeV2,\n  minExpirationTime,\n  solToWSol,\n} from \"../../../common\";\nimport { TokenAccountRaw } from \"../../account/types\";\nimport { Price, Percent, TokenAmount, Token } from \"../../../module\";\nimport { PositionUtils } from \"./position\";\nimport Decimal from \"decimal.js\";\nimport { TOKEN_2022_PROGRAM_ID } from \"@solana/spl-token\";\n\nexport class PoolUtils {\n  public static getOutputAmountAndRemainAccounts(\n    poolInfo: ComputeClmmPoolInfo,\n    tickArrayCache: { [key: string]: TickArray },\n    inputTokenMint: PublicKey,\n    inputAmount: BN,\n    sqrtPriceLimitX64?: BN,\n  ): {\n    expectedAmountOut: BN;\n    remainingAccounts: PublicKey[];\n    executionPrice: BN;\n    feeAmount: BN;\n  } {\n    const zeroForOne = inputTokenMint.toBase58() === poolInfo.mintA.address;\n\n    const allNeededAccounts: PublicKey[] = [];\n    const {\n      isExist,\n      startIndex: firstTickArrayStartIndex,\n      nextAccountMeta,\n    } = this.getFirstInitializedTickArray(poolInfo, zeroForOne);\n    if (!isExist || firstTickArrayStartIndex === undefined || !nextAccountMeta) throw new Error(\"Invalid tick array\");\n\n    // try {\n    //   const preTick = this.preInitializedTickArrayStartIndex(poolInfo, !zeroForOne)\n    //   if (preTick.isExist) {\n    //     const { publicKey: address } = getPdaTickArrayAddress(\n    //       poolInfo.programId,\n    //       poolInfo.id,\n    //       preTick.nextStartIndex\n    //     );\n    //     allNeededAccounts.push(address)\n    //   }\n    // } catch (e) { /* empty */ }\n\n    allNeededAccounts.push(nextAccountMeta);\n    const {\n      amountCalculated: outputAmount,\n      accounts: reaminAccounts,\n      sqrtPriceX64: executionPrice,\n      feeAmount,\n    } = SwapMath.swapCompute(\n      poolInfo.programId,\n      poolInfo.id,\n      tickArrayCache,\n      poolInfo.tickArrayBitmap,\n      poolInfo.exBitmapInfo,\n      zeroForOne,\n      poolInfo.ammConfig.tradeFeeRate,\n      poolInfo.liquidity,\n      poolInfo.tickCurrent,\n      poolInfo.tickSpacing,\n      poolInfo.sqrtPriceX64,\n      inputAmount,\n      firstTickArrayStartIndex,\n      sqrtPriceLimitX64,\n    );\n    allNeededAccounts.push(...reaminAccounts);\n    return {\n      expectedAmountOut: outputAmount.mul(NEGATIVE_ONE),\n      remainingAccounts: allNeededAccounts,\n      executionPrice,\n      feeAmount,\n    };\n  }\n\n  public static getInputAmountAndRemainAccounts(\n    poolInfo: ComputeClmmPoolInfo,\n    tickArrayCache: { [key: string]: TickArray },\n    outputTokenMint: PublicKey,\n    outputAmount: BN,\n    sqrtPriceLimitX64?: BN,\n  ): { expectedAmountIn: BN; remainingAccounts: PublicKey[]; executionPrice: BN; feeAmount: BN } {\n    const zeroForOne = outputTokenMint.toBase58() === poolInfo.mintB.address;\n\n    const allNeededAccounts: PublicKey[] = [];\n    const {\n      isExist,\n      startIndex: firstTickArrayStartIndex,\n      nextAccountMeta,\n    } = this.getFirstInitializedTickArray(poolInfo, zeroForOne);\n    if (!isExist || firstTickArrayStartIndex === undefined || !nextAccountMeta) throw new Error(\"Invalid tick array\");\n\n    try {\n      const preTick = this.preInitializedTickArrayStartIndex(poolInfo, zeroForOne);\n      if (preTick.isExist) {\n        const { publicKey: address } = getPdaTickArrayAddress(poolInfo.programId, poolInfo.id, preTick.nextStartIndex);\n        allNeededAccounts.push(address);\n      }\n    } catch (e) {\n      /* empty */\n    }\n\n    allNeededAccounts.push(nextAccountMeta);\n    const {\n      amountCalculated: inputAmount,\n      accounts: reaminAccounts,\n      sqrtPriceX64: executionPrice,\n      feeAmount,\n    } = SwapMath.swapCompute(\n      poolInfo.programId,\n      poolInfo.id,\n      tickArrayCache,\n      poolInfo.tickArrayBitmap,\n      poolInfo.exBitmapInfo,\n      zeroForOne,\n      poolInfo.ammConfig.tradeFeeRate,\n      poolInfo.liquidity,\n      poolInfo.tickCurrent,\n      poolInfo.tickSpacing,\n      poolInfo.sqrtPriceX64,\n      outputAmount.mul(NEGATIVE_ONE),\n      firstTickArrayStartIndex,\n      sqrtPriceLimitX64,\n    );\n    allNeededAccounts.push(...reaminAccounts);\n    return { expectedAmountIn: inputAmount, remainingAccounts: allNeededAccounts, executionPrice, feeAmount };\n  }\n\n  public static getFirstInitializedTickArray(\n    poolInfo: ComputeClmmPoolInfo,\n    zeroForOne: boolean,\n  ):\n    | { isExist: true; startIndex: number; nextAccountMeta: PublicKey }\n    | { isExist: false; startIndex: undefined; nextAccountMeta: undefined } {\n    const { isInitialized, startIndex } = PoolUtils.isOverflowDefaultTickarrayBitmap(poolInfo.tickSpacing, [\n      poolInfo.tickCurrent,\n    ])\n      ? TickArrayBitmapExtensionUtils.checkTickArrayIsInit(\n          TickQuery.getArrayStartIndex(poolInfo.tickCurrent, poolInfo.tickSpacing),\n          poolInfo.tickSpacing,\n          poolInfo.exBitmapInfo,\n        )\n      : TickUtils.checkTickArrayIsInitialized(\n          TickUtils.mergeTickArrayBitmap(poolInfo.tickArrayBitmap),\n          poolInfo.tickCurrent,\n          poolInfo.tickSpacing,\n        );\n\n    if (isInitialized) {\n      const { publicKey: address } = getPdaTickArrayAddress(poolInfo.programId, poolInfo.id, startIndex);\n      return {\n        isExist: true,\n        startIndex,\n        nextAccountMeta: address,\n      };\n    }\n    const { isExist, nextStartIndex } = this.nextInitializedTickArrayStartIndex(\n      poolInfo,\n      TickQuery.getArrayStartIndex(poolInfo.tickCurrent, poolInfo.tickSpacing),\n      zeroForOne,\n    );\n    if (isExist) {\n      const { publicKey: address } = getPdaTickArrayAddress(poolInfo.programId, poolInfo.id, nextStartIndex);\n      return {\n        isExist: true,\n        startIndex: nextStartIndex,\n        nextAccountMeta: address,\n      };\n    }\n    return { isExist: false, nextAccountMeta: undefined, startIndex: undefined };\n  }\n\n  public static preInitializedTickArrayStartIndex(\n    poolInfo: ComputeClmmPoolInfo,\n    zeroForOne: boolean,\n  ): { isExist: boolean; nextStartIndex: number } {\n    const currentOffset = Math.floor(poolInfo.tickCurrent / TickQuery.tickCount(poolInfo.tickSpacing));\n\n    const result: number[] = !zeroForOne\n      ? TickUtils.searchLowBitFromStart(\n          poolInfo.tickArrayBitmap,\n          poolInfo.exBitmapInfo,\n          currentOffset - 1,\n          1,\n          poolInfo.tickSpacing,\n        )\n      : TickUtils.searchHightBitFromStart(\n          poolInfo.tickArrayBitmap,\n          poolInfo.exBitmapInfo,\n          currentOffset + 1,\n          1,\n          poolInfo.tickSpacing,\n        );\n\n    return result.length > 0 ? { isExist: true, nextStartIndex: result[0] } : { isExist: false, nextStartIndex: 0 };\n  }\n\n  public static nextInitializedTickArrayStartIndex(\n    poolInfo:\n      | {\n          tickCurrent: number;\n          tickSpacing: number;\n          tickArrayBitmap: BN[];\n          exBitmapInfo: TickArrayBitmapExtensionType;\n        }\n      | ClmmPoolInfo,\n    lastTickArrayStartIndex: number,\n    zeroForOne: boolean,\n  ): { isExist: boolean; nextStartIndex: number } {\n    lastTickArrayStartIndex = TickQuery.getArrayStartIndex(poolInfo.tickCurrent, poolInfo.tickSpacing);\n\n    // eslint-disable-next-line no-constant-condition\n    while (true) {\n      const { isInit: startIsInit, tickIndex: startIndex } = TickArrayBitmap.nextInitializedTickArrayStartIndex(\n        TickUtils.mergeTickArrayBitmap(poolInfo.tickArrayBitmap),\n        lastTickArrayStartIndex,\n        poolInfo.tickSpacing,\n        zeroForOne,\n      );\n      if (startIsInit) {\n        return { isExist: true, nextStartIndex: startIndex };\n      }\n      lastTickArrayStartIndex = startIndex;\n\n      const { isInit, tickIndex } = TickArrayBitmapExtensionUtils.nextInitializedTickArrayFromOneBitmap(\n        lastTickArrayStartIndex,\n        poolInfo.tickSpacing,\n        zeroForOne,\n        poolInfo.exBitmapInfo,\n      );\n      if (isInit) return { isExist: true, nextStartIndex: tickIndex };\n\n      lastTickArrayStartIndex = tickIndex;\n\n      if (lastTickArrayStartIndex < MIN_TICK || lastTickArrayStartIndex > MAX_TICK)\n        return { isExist: false, nextStartIndex: 0 };\n    }\n\n    // const tickArrayBitmap = TickUtils.mergeTickArrayBitmap(\n    //   poolInfo.tickArrayBitmap\n    // );\n    // const currentOffset = TickUtils.getTickArrayOffsetInBitmapByTick(\n    //   poolInfo.tickCurrent,\n    //   poolInfo.tickSpacing\n    // );\n    // const result: number[] = zeroForOne ? TickUtils.searchLowBitFromStart(\n    //   tickArrayBitmap,\n    //   currentOffset - 1,\n    //   0,\n    //   1,\n    //   poolInfo.tickSpacing\n    // ) : TickUtils.searchHightBitFromStart(\n    //   tickArrayBitmap,\n    //   currentOffset,\n    //   1024,\n    //   1,\n    //   poolInfo.tickSpacing\n    // );\n\n    // return result.length > 0 ? { isExist: true, nextStartIndex: result[0] } : { isExist: false, nextStartIndex: 0 }\n  }\n\n  public static async updatePoolRewardInfos({\n    connection,\n    apiPoolInfo,\n    chainTime,\n    poolLiquidity,\n    rewardInfos,\n  }: {\n    connection: Connection;\n    apiPoolInfo: ApiV3PoolInfoConcentratedItem;\n    chainTime: number;\n    poolLiquidity: BN;\n    rewardInfos: ClmmPoolRewardLayoutInfo[];\n  }): Promise<ClmmPoolRewardInfo[]> {\n    const nRewardInfo: ClmmPoolRewardInfo[] = [];\n    for (let i = 0; i < rewardInfos.length; i++) {\n      const _itemReward = rewardInfos[i];\n      const apiRewardProgram =\n        apiPoolInfo.rewardDefaultInfos[i]?.mint.programId ??\n        (await connection.getAccountInfo(_itemReward.tokenMint))?.owner;\n      if (apiRewardProgram === undefined) throw Error(\"get new reward mint info error\");\n\n      const itemReward: ClmmPoolRewardInfo = {\n        ..._itemReward,\n        perSecond: MathUtil.x64ToDecimal(_itemReward.emissionsPerSecondX64),\n        remainingRewards: undefined,\n        tokenProgramId: new PublicKey(apiRewardProgram),\n      };\n\n      if (itemReward.tokenMint.equals(PublicKey.default)) continue;\n      if (chainTime <= itemReward.openTime.toNumber() || poolLiquidity.eq(ZERO)) {\n        nRewardInfo.push(itemReward);\n        continue;\n      }\n\n      const latestUpdateTime = new BN(Math.min(itemReward.endTime.toNumber(), chainTime));\n      const timeDelta = latestUpdateTime.sub(itemReward.lastUpdateTime);\n      const rewardGrowthDeltaX64 = MathUtil.mulDivFloor(timeDelta, itemReward.emissionsPerSecondX64, poolLiquidity);\n      const rewardGrowthGlobalX64 = itemReward.rewardGrowthGlobalX64.add(rewardGrowthDeltaX64);\n      const rewardEmissionedDelta = MathUtil.mulDivFloor(timeDelta, itemReward.emissionsPerSecondX64, Q64);\n      const rewardTotalEmissioned = itemReward.rewardTotalEmissioned.add(rewardEmissionedDelta);\n      nRewardInfo.push({\n        ...itemReward,\n        rewardGrowthGlobalX64,\n        rewardTotalEmissioned,\n        lastUpdateTime: latestUpdateTime,\n      });\n    }\n    return nRewardInfo;\n  }\n\n  public static isOverflowDefaultTickarrayBitmap(tickSpacing: number, tickarrayStartIndexs: number[]): boolean {\n    const { maxTickBoundary, minTickBoundary } = this.tickRange(tickSpacing);\n\n    for (const tickIndex of tickarrayStartIndexs) {\n      const tickarrayStartIndex = TickUtils.getTickArrayStartIndexByTick(tickIndex, tickSpacing);\n\n      if (tickarrayStartIndex >= maxTickBoundary || tickarrayStartIndex < minTickBoundary) {\n        return true;\n      }\n    }\n\n    return false;\n  }\n\n  public static tickRange(tickSpacing: number): {\n    maxTickBoundary: number;\n    minTickBoundary: number;\n  } {\n    let maxTickBoundary = TickArrayBitmap.maxTickInTickarrayBitmap(tickSpacing);\n    let minTickBoundary = -maxTickBoundary;\n\n    if (maxTickBoundary > MAX_TICK) {\n      maxTickBoundary = TickQuery.getArrayStartIndex(MAX_TICK, tickSpacing) + TickQuery.tickCount(tickSpacing);\n    }\n    if (minTickBoundary < MIN_TICK) {\n      minTickBoundary = TickQuery.getArrayStartIndex(MIN_TICK, tickSpacing);\n    }\n    return { maxTickBoundary, minTickBoundary };\n  }\n\n  public static get_tick_array_offset(tickarrayStartIndex: number, tickSpacing: number): number {\n    if (!TickQuery.checkIsValidStartIndex(tickarrayStartIndex, tickSpacing)) {\n      throw new Error(\"No enough initialized tickArray\");\n    }\n\n    return (tickarrayStartIndex / TickQuery.tickCount(tickSpacing)) * TICK_ARRAY_BITMAP_SIZE;\n  }\n\n  static async fetchExBitmaps({\n    connection,\n    exBitmapAddress,\n    batchRequest,\n  }: {\n    connection: Connection;\n    exBitmapAddress: PublicKey[];\n    batchRequest: boolean;\n  }): Promise<ReturnTypeFetchExBitmaps> {\n    const fetchedBitmapAccount = await getMultipleAccountsInfoWithCustomFlags(\n      connection,\n      exBitmapAddress.map((i) => ({ pubkey: i })),\n      { batchRequest },\n    );\n\n    const returnTypeFetchExBitmaps: ReturnTypeFetchExBitmaps = {};\n    for (const item of fetchedBitmapAccount) {\n      if (item.accountInfo === null) continue;\n\n      returnTypeFetchExBitmaps[item.pubkey.toString()] = TickArrayBitmapExtensionLayout.decode(item.accountInfo.data);\n    }\n    return returnTypeFetchExBitmaps;\n  }\n\n  static async fetchMultiplePoolTickArrays({\n    connection,\n    poolKeys,\n    batchRequest,\n  }: {\n    connection: Connection;\n    poolKeys: ComputeClmmPoolInfo[];\n    batchRequest?: boolean;\n  }): Promise<ReturnTypeFetchMultiplePoolTickArrays> {\n    const tickArraysToPoolId: { [key: string]: PublicKey } = {};\n    const tickArrays: { pubkey: PublicKey }[] = [];\n    for (const itemPoolInfo of poolKeys) {\n      const currentTickArrayStartIndex = TickUtils.getTickArrayStartIndexByTick(\n        itemPoolInfo.tickCurrent,\n        itemPoolInfo.tickSpacing,\n      );\n      const startIndexArray = TickUtils.getInitializedTickArrayInRange(\n        itemPoolInfo.tickArrayBitmap,\n        itemPoolInfo.exBitmapInfo,\n        itemPoolInfo.tickSpacing,\n        currentTickArrayStartIndex,\n        7,\n      );\n      for (const itemIndex of startIndexArray) {\n        const { publicKey: tickArrayAddress } = getPdaTickArrayAddress(\n          itemPoolInfo.programId,\n          itemPoolInfo.id,\n          itemIndex,\n        );\n        tickArrays.push({ pubkey: tickArrayAddress });\n        tickArraysToPoolId[tickArrayAddress.toString()] = itemPoolInfo.id;\n      }\n    }\n\n    const fetchedTickArrays = await getMultipleAccountsInfoWithCustomFlags(connection, tickArrays, { batchRequest });\n\n    const tickArrayCache: ReturnTypeFetchMultiplePoolTickArrays = {};\n\n    for (const itemAccountInfo of fetchedTickArrays) {\n      if (!itemAccountInfo.accountInfo) continue;\n      const poolId = tickArraysToPoolId[itemAccountInfo.pubkey.toString()];\n      if (!poolId) continue;\n      if (tickArrayCache[poolId.toString()] === undefined) tickArrayCache[poolId.toString()] = {};\n\n      const accountLayoutData = TickArrayLayout.decode(itemAccountInfo.accountInfo.data);\n\n      tickArrayCache[poolId.toString()][accountLayoutData.startTickIndex] = {\n        ...accountLayoutData,\n        address: itemAccountInfo.pubkey,\n      };\n    }\n    return tickArrayCache;\n  }\n\n  // deprecated, new api doesn't need\n  static async fetchPoolsAccountPosition({\n    pools,\n    connection,\n    ownerInfo,\n    batchRequest = false,\n    updateOwnerRewardAndFee = true,\n  }: {\n    pools: SDKParsedConcentratedInfo[];\n    connection: Connection;\n    ownerInfo: { wallet: PublicKey; tokenAccounts: TokenAccountRaw[] };\n    batchRequest?: boolean;\n    updateOwnerRewardAndFee?: boolean;\n  }): Promise<SDKParsedConcentratedInfo[]> {\n    const programIds: PublicKey[] = [];\n\n    for (let index = 0; index < pools.length; index++) {\n      const accountInfo = pools[index];\n\n      if (accountInfo === null) continue;\n\n      if (!programIds.find((i) => i.equals(accountInfo.state.programId))) programIds.push(accountInfo.state.programId);\n    }\n\n    if (ownerInfo) {\n      const allMint = ownerInfo.tokenAccounts.map((i) => i.accountInfo.mint);\n      const allPositionKey: PublicKey[] = [];\n      for (const itemMint of allMint) {\n        for (const itemProgramId of programIds) {\n          allPositionKey.push(getPdaPersonalPositionAddress(itemProgramId, itemMint).publicKey);\n        }\n      }\n      const positionAccountInfos = await getMultipleAccountsInfo(connection, allPositionKey, { batchRequest });\n      const keyToTickArrayAddress: { [key: string]: PublicKey } = {};\n      for (const itemAccountInfo of positionAccountInfos) {\n        if (itemAccountInfo === null) continue;\n        // TODO: add check\n\n        const position = PositionInfoLayout.decode(itemAccountInfo.data);\n        const itemPoolId = position.poolId.toString();\n        const poolInfoA = pools.find((pool) => pool.state.id.toBase58() === itemPoolId);\n        if (poolInfoA === undefined) continue;\n\n        const poolInfo = poolInfoA.state;\n\n        const priceLower = TickUtils._getTickPriceLegacy({\n          poolInfo,\n          tick: position.tickLower,\n          baseIn: true,\n        });\n        const priceUpper = TickUtils._getTickPriceLegacy({\n          poolInfo,\n          tick: position.tickUpper,\n          baseIn: true,\n        });\n        const { amountA, amountB } = LiquidityMath.getAmountsFromLiquidity(\n          poolInfo.sqrtPriceX64,\n          priceLower.tickSqrtPriceX64,\n          priceUpper.tickSqrtPriceX64,\n          position.liquidity,\n          false,\n        );\n\n        const leverage = 1 / (1 - Math.sqrt(Math.sqrt(priceLower.price.div(priceUpper.price).toNumber())));\n\n        poolInfoA.positionAccount = [\n          ...(poolInfoA.positionAccount ?? []),\n          {\n            poolId: position.poolId,\n            nftMint: position.nftMint,\n\n            priceLower: priceLower.price,\n            priceUpper: priceUpper.price,\n            amountA,\n            amountB,\n            tickLower: position.tickLower,\n            tickUpper: position.tickUpper,\n            liquidity: position.liquidity,\n            feeGrowthInsideLastX64A: position.feeGrowthInsideLastX64A,\n            feeGrowthInsideLastX64B: position.feeGrowthInsideLastX64B,\n            tokenFeesOwedA: position.tokenFeesOwedA,\n            tokenFeesOwedB: position.tokenFeesOwedB,\n            rewardInfos: position.rewardInfos.map((i) => ({\n              ...i,\n              pendingReward: new BN(0),\n            })),\n\n            leverage,\n            tokenFeeAmountA: new BN(0),\n            tokenFeeAmountB: new BN(0),\n          },\n        ];\n\n        const tickArrayLowerAddress = await TickUtils.getTickArrayAddressByTick(\n          poolInfoA.state.programId,\n          position.poolId,\n          position.tickLower,\n          poolInfoA.state.tickSpacing,\n        );\n        const tickArrayUpperAddress = await TickUtils.getTickArrayAddressByTick(\n          poolInfoA.state.programId,\n          position.poolId,\n          position.tickUpper,\n          poolInfoA.state.tickSpacing,\n        );\n        keyToTickArrayAddress[\n          `${poolInfoA.state.programId.toString()}-${position.poolId.toString()}-${position.tickLower}`\n        ] = tickArrayLowerAddress;\n        keyToTickArrayAddress[\n          `${poolInfoA.state.programId.toString()}-${position.poolId.toString()}-${position.tickUpper}`\n        ] = tickArrayUpperAddress;\n      }\n\n      if (updateOwnerRewardAndFee) {\n        const tickArrayKeys = Object.values(keyToTickArrayAddress);\n        const tickArrayDatas = await getMultipleAccountsInfo(connection, tickArrayKeys, { batchRequest });\n        const tickArrayLayout = {};\n        for (let index = 0; index < tickArrayKeys.length; index++) {\n          const tickArrayData = tickArrayDatas[index];\n          if (tickArrayData === null) continue;\n          const key = tickArrayKeys[index].toString();\n          tickArrayLayout[key] = TickArrayLayout.decode(tickArrayData.data);\n        }\n\n        for (const { state, positionAccount } of pools) {\n          if (!positionAccount) continue;\n          for (const itemPA of positionAccount) {\n            const keyLower = `${state.programId.toString()}-${state.id.toString()}-${itemPA.tickLower}`;\n            const keyUpper = `${state.programId.toString()}-${state.id.toString()}-${itemPA.tickUpper}`;\n            const tickArrayLower = tickArrayLayout[keyToTickArrayAddress[keyLower].toString()];\n            const tickArrayUpper = tickArrayLayout[keyToTickArrayAddress[keyUpper].toString()];\n            const tickLowerState: Tick =\n              tickArrayLower.ticks[TickUtils.getTickOffsetInArray(itemPA.tickLower, state.tickSpacing)];\n            const tickUpperState: Tick =\n              tickArrayUpper.ticks[TickUtils.getTickOffsetInArray(itemPA.tickUpper, state.tickSpacing)];\n            const { tokenFeeAmountA, tokenFeeAmountB } = await PositionUtils.GetPositionFees(\n              state,\n              itemPA,\n              tickLowerState,\n              tickUpperState,\n            );\n            const rewardInfos = await PositionUtils.GetPositionRewards(state, itemPA, tickLowerState, tickUpperState);\n            itemPA.tokenFeeAmountA = tokenFeeAmountA.gte(new BN(0)) ? tokenFeeAmountA : new BN(0);\n            itemPA.tokenFeeAmountB = tokenFeeAmountB.gte(new BN(0)) ? tokenFeeAmountB : new BN(0);\n            for (let i = 0; i < rewardInfos.length; i++) {\n              itemPA.rewardInfos[i].pendingReward = rewardInfos[i].gte(new BN(0)) ? rewardInfos[i] : new BN(0);\n            }\n          }\n        }\n      }\n    }\n    return pools;\n  }\n\n  static computeAmountOut({\n    poolInfo,\n    tickArrayCache,\n    baseMint,\n    epochInfo,\n    amountIn,\n    slippage,\n    priceLimit = new Decimal(0),\n  }: {\n    poolInfo: ComputeClmmPoolInfo;\n    tickArrayCache: { [key: string]: TickArray };\n    baseMint: PublicKey;\n\n    epochInfo: EpochInfo;\n\n    amountIn: BN;\n    slippage: number;\n    priceLimit?: Decimal;\n  }): ReturnTypeComputeAmountOut {\n    let sqrtPriceLimitX64: BN;\n    const isBaseIn = baseMint.toBase58() === poolInfo.mintA.address;\n    const [baseFeeConfig, outFeeConfig] = isBaseIn\n      ? [poolInfo.mintA.extensions.feeConfig, poolInfo.mintB.extensions.feeConfig]\n      : [poolInfo.mintB.extensions.feeConfig, poolInfo.mintA.extensions.feeConfig];\n\n    if (priceLimit.equals(new Decimal(0))) {\n      sqrtPriceLimitX64 = isBaseIn ? MIN_SQRT_PRICE_X64.add(new BN(1)) : MAX_SQRT_PRICE_X64.sub(new BN(1));\n    } else {\n      sqrtPriceLimitX64 = SqrtPriceMath.priceToSqrtPriceX64(\n        priceLimit,\n        poolInfo.mintA.decimals,\n        poolInfo.mintB.decimals,\n      );\n    }\n\n    const realAmountIn = getTransferAmountFeeV2(amountIn, baseFeeConfig, epochInfo, false);\n\n    const {\n      expectedAmountOut: _expectedAmountOut,\n      remainingAccounts,\n      executionPrice: _executionPriceX64,\n      feeAmount,\n    } = PoolUtils.getOutputAmountAndRemainAccounts(\n      poolInfo,\n      tickArrayCache,\n      baseMint,\n      realAmountIn.amount.sub(realAmountIn.fee ?? ZERO),\n      sqrtPriceLimitX64,\n    );\n\n    const amountOut = getTransferAmountFeeV2(_expectedAmountOut, outFeeConfig, epochInfo, false);\n\n    const _executionPrice = SqrtPriceMath.sqrtPriceX64ToPrice(\n      _executionPriceX64,\n      poolInfo.mintA.decimals,\n      poolInfo.mintB.decimals,\n    );\n    const executionPrice = isBaseIn ? _executionPrice : new Decimal(1).div(_executionPrice);\n\n    const _minAmountOut = _expectedAmountOut\n      .mul(new BN(Math.floor((1 - slippage) * 10000000000)))\n      .div(new BN(10000000000));\n    const minAmountOut = getTransferAmountFeeV2(_minAmountOut, outFeeConfig, epochInfo, false);\n\n    const poolPrice = isBaseIn ? poolInfo.currentPrice : new Decimal(1).div(poolInfo.currentPrice);\n\n    const _numerator = new Decimal(executionPrice).sub(poolPrice).abs();\n    const _denominator = poolPrice;\n    const priceImpact = new Percent(\n      new Decimal(_numerator).mul(10 ** 15).toFixed(0),\n      new Decimal(_denominator).mul(10 ** 15).toFixed(0),\n    );\n\n    return {\n      realAmountIn,\n      amountOut,\n      minAmountOut,\n      expirationTime: minExpirationTime(realAmountIn.expirationTime, amountOut.expirationTime),\n      currentPrice: poolInfo.currentPrice,\n      executionPrice,\n      priceImpact,\n      fee: feeAmount,\n\n      remainingAccounts,\n    };\n  }\n\n  static async computeAmountOutFormat({\n    poolInfo,\n    tickArrayCache,\n    amountIn,\n    tokenOut: _tokenOut,\n    slippage,\n    epochInfo,\n  }: {\n    poolInfo: ComputeClmmPoolInfo;\n    tickArrayCache: { [key: string]: TickArray };\n    amountIn: BN;\n    tokenOut: ApiV3Token;\n    slippage: number;\n    epochInfo: EpochInfo;\n  }): Promise<ReturnTypeComputeAmountOutFormat> {\n    const baseIn = _tokenOut.address === poolInfo.mintB.address;\n    const [inputMint, outMint] = baseIn ? [poolInfo.mintA, poolInfo.mintB] : [poolInfo.mintB, poolInfo.mintA];\n    const [baseToken, outToken] = [\n      new Token({\n        ...inputMint,\n        mint: inputMint.address,\n        isToken2022: inputMint.programId === TOKEN_2022_PROGRAM_ID.toBase58(),\n      }),\n      new Token({\n        ...outMint,\n        mint: outMint.address,\n        isToken2022: outMint.programId === TOKEN_2022_PROGRAM_ID.toBase58(),\n      }),\n    ];\n\n    const {\n      realAmountIn: _realAmountIn,\n      amountOut: _amountOut,\n      minAmountOut: _minAmountOut,\n      expirationTime,\n      currentPrice,\n      executionPrice,\n      priceImpact,\n      fee,\n      remainingAccounts,\n    } = await PoolUtils.computeAmountOut({\n      poolInfo,\n      tickArrayCache,\n      baseMint: new PublicKey(inputMint.address),\n      amountIn,\n      slippage,\n      epochInfo,\n    });\n\n    const realAmountIn = {\n      ..._realAmountIn,\n      amount: new TokenAmount(baseToken, _realAmountIn.amount),\n      fee: _realAmountIn.fee === undefined ? undefined : new TokenAmount(baseToken, _realAmountIn.fee),\n    };\n\n    const amountOut = {\n      ..._amountOut,\n      amount: new TokenAmount(outToken, _amountOut.amount),\n      fee: _amountOut.fee === undefined ? undefined : new TokenAmount(outToken, _amountOut.fee),\n    };\n    const minAmountOut = {\n      ..._minAmountOut,\n      amount: new TokenAmount(outToken, _minAmountOut.amount),\n      fee: _minAmountOut.fee === undefined ? undefined : new TokenAmount(outToken, _minAmountOut.fee),\n    };\n\n    const _currentPrice = new Price({\n      baseToken,\n      denominator: new BN(10).pow(new BN(20 + baseToken.decimals)),\n      quoteToken: outToken,\n      numerator: currentPrice.mul(new Decimal(10 ** (20 + outToken.decimals))).toFixed(0),\n    });\n    const _executionPrice = new Price({\n      baseToken,\n      denominator: new BN(10).pow(new BN(20 + baseToken.decimals)),\n      quoteToken: outToken,\n      numerator: executionPrice.mul(new Decimal(10 ** (20 + outToken.decimals))).toFixed(0),\n    });\n    const _fee = new TokenAmount(baseToken, fee);\n\n    return {\n      realAmountIn,\n      amountOut,\n      minAmountOut,\n      expirationTime,\n      currentPrice: _currentPrice,\n      executionPrice: _executionPrice,\n      priceImpact,\n      fee: _fee,\n      remainingAccounts,\n    };\n  }\n\n  static estimateAprsForPriceRangeMultiplier({\n    poolInfo,\n    aprType,\n    positionTickLowerIndex,\n    positionTickUpperIndex,\n  }: {\n    poolInfo: ApiV3PoolInfoConcentratedItem;\n    aprType: \"day\" | \"week\" | \"month\";\n\n    positionTickLowerIndex: number;\n    positionTickUpperIndex: number;\n  }): {\n    feeApr: number;\n    rewardsApr: number[];\n    apr: number;\n  } {\n    const aprInfo = poolInfo[aprType];\n\n    const priceLower = TickUtils.getTickPrice({\n      poolInfo,\n      tick: positionTickLowerIndex,\n      baseIn: true,\n    }).price.toNumber();\n    const priceUpper = TickUtils.getTickPrice({\n      poolInfo,\n      tick: positionTickUpperIndex,\n      baseIn: true,\n    }).price.toNumber();\n\n    const _minPrice = Math.max(priceLower, aprInfo.priceMin);\n    const _maxPrice = Math.min(priceUpper, aprInfo.priceMax);\n\n    const sub = _maxPrice - _minPrice;\n\n    const userRange = priceUpper - priceLower;\n    const tradeRange = aprInfo.priceMax - aprInfo.priceMin;\n\n    let p: number;\n\n    if (sub <= 0) p = 0;\n    else if (userRange === sub) p = tradeRange / sub;\n    else if (tradeRange === sub) p = sub / userRange;\n    else p = (sub / tradeRange) * (sub / userRange);\n\n    return {\n      feeApr: aprInfo.feeApr * p,\n      rewardsApr: [aprInfo.rewardApr[0] ?? 0 * p, aprInfo.rewardApr[1] ?? 0 * p, aprInfo.rewardApr[2] ?? 0 * p],\n      apr: aprInfo.apr * p,\n    };\n  }\n\n  static estimateAprsForPriceRangeDelta({\n    poolInfo,\n    poolLiquidity,\n    aprType,\n    mintPrice,\n    liquidity,\n    positionTickLowerIndex,\n    positionTickUpperIndex,\n    chainTime,\n  }: {\n    poolInfo: ApiV3PoolInfoConcentratedItem;\n    poolLiquidity: BN;\n    aprType: \"day\" | \"week\" | \"month\";\n\n    mintPrice: { [mint: string]: { value: number } };\n\n    liquidity: BN;\n    positionTickLowerIndex: number;\n    positionTickUpperIndex: number;\n\n    chainTime: number;\n  }): {\n    feeApr: number;\n    rewardsApr: number[];\n    apr: number;\n  } {\n    const aprTypeDay = aprType === \"day\" ? 1 : aprType === \"week\" ? 7 : aprType === \"month\" ? 30 : 0;\n    const aprInfo = poolInfo[aprType];\n    const mintPriceA = mintPrice[solToWSol(poolInfo.mintA.address).toString()];\n    const mintPriceB = mintPrice[solToWSol(poolInfo.mintB.address).toString()];\n    const mintDecimalsA = poolInfo.mintA.decimals;\n    const mintDecimalsB = poolInfo.mintB.decimals;\n\n    if (!aprInfo || !mintPriceA || !mintPriceB) return { feeApr: 0, rewardsApr: [0, 0, 0], apr: 0 };\n\n    const sqrtPriceX64 = SqrtPriceMath.priceToSqrtPriceX64(\n      new Decimal(poolInfo.price),\n      poolInfo.mintA.decimals,\n      poolInfo.mintB.decimals,\n    );\n\n    const sqrtPriceX64A = SqrtPriceMath.getSqrtPriceX64FromTick(positionTickLowerIndex);\n    const sqrtPriceX64B = SqrtPriceMath.getSqrtPriceX64FromTick(positionTickUpperIndex);\n\n    const { amountSlippageA: poolLiquidityA, amountSlippageB: poolLiquidityB } =\n      LiquidityMath.getAmountsFromLiquidityWithSlippage(\n        sqrtPriceX64,\n        sqrtPriceX64A,\n        sqrtPriceX64B,\n        poolLiquidity,\n        false,\n        false,\n        0,\n      );\n\n    const { amountSlippageA: userLiquidityA, amountSlippageB: userLiquidityB } =\n      LiquidityMath.getAmountsFromLiquidityWithSlippage(\n        sqrtPriceX64,\n        sqrtPriceX64A,\n        sqrtPriceX64B,\n        liquidity,\n        false,\n        false,\n        0,\n      );\n\n    const poolTvl = new Decimal(poolLiquidityA.toString())\n      .div(new Decimal(10).pow(mintDecimalsA))\n      .mul(mintPriceA.value)\n      .add(new Decimal(poolLiquidityB.toString()).div(new Decimal(10).pow(mintDecimalsB)).mul(mintPriceB.value));\n    const userTvl = new Decimal(userLiquidityA.toString())\n      .div(new Decimal(10).pow(mintDecimalsA))\n      .mul(mintPriceA.value)\n      .add(new Decimal(userLiquidityB.toString()).div(new Decimal(10).pow(mintDecimalsB)).mul(mintPriceB.value));\n\n    const p = userTvl.div(poolTvl.add(userTvl)).div(userTvl);\n\n    const feesPerYear = new Decimal(aprInfo.volumeFee).mul(365).div(aprTypeDay);\n    const feeApr = feesPerYear.mul(p).mul(100).toNumber();\n\n    const SECONDS_PER_YEAR = 3600 * 24 * 365;\n\n    const rewardsApr = poolInfo.rewardDefaultInfos.map((i) => {\n      const iDecimal = i.mint.decimals;\n      const iPrice = mintPrice[i.mint.address];\n\n      if (\n        chainTime < ((i as any).startTime ?? 0) ||\n        chainTime > ((i as any).endTime ?? 0) ||\n        !i.perSecond ||\n        !iPrice ||\n        iDecimal === undefined\n      )\n        return 0;\n\n      return new Decimal(iPrice.value)\n        .mul(new Decimal(i.perSecond).mul(SECONDS_PER_YEAR))\n        .div(new Decimal(10).pow(iDecimal))\n        .mul(p)\n        .mul(100)\n        .toNumber();\n    });\n\n    return {\n      feeApr,\n      rewardsApr,\n      apr: feeApr + rewardsApr.reduce((a, b) => a + b, 0),\n    };\n  }\n\n  static getLiquidityAmountOutFromAmountIn({\n    poolInfo,\n    inputA,\n    tickLower,\n    tickUpper,\n    amount,\n    slippage,\n    add,\n    epochInfo,\n    amountHasFee,\n  }: {\n    poolInfo: ApiV3PoolInfoConcentratedItem;\n    inputA: boolean;\n    tickLower: number;\n    tickUpper: number;\n    amount: BN;\n    slippage: number;\n    add: boolean;\n    epochInfo: EpochInfo;\n    amountHasFee: boolean;\n  }): Promise<ReturnTypeGetLiquidityAmountOut> {\n    const sqrtPriceX64 = SqrtPriceMath.priceToSqrtPriceX64(\n      new Decimal(poolInfo.price),\n      poolInfo.mintA.decimals,\n      poolInfo.mintB.decimals,\n    );\n    const sqrtPriceX64A = SqrtPriceMath.getSqrtPriceX64FromTick(tickLower);\n    const sqrtPriceX64B = SqrtPriceMath.getSqrtPriceX64FromTick(tickUpper);\n\n    const coefficient = add ? 1 - slippage : 1 + slippage;\n    const addFeeAmount = getTransferAmountFeeV2(\n      amount,\n      poolInfo[inputA ? \"mintA\" : \"mintB\"].extensions?.feeConfig,\n      epochInfo,\n      !amountHasFee,\n    );\n    const _amount = new BN(\n      new Decimal(addFeeAmount.amount.sub(addFeeAmount.fee ?? ZERO).toString()).mul(coefficient).toFixed(0),\n    );\n\n    let liquidity: BN;\n    if (sqrtPriceX64.lte(sqrtPriceX64A)) {\n      liquidity = inputA\n        ? LiquidityMath.getLiquidityFromTokenAmountA(sqrtPriceX64A, sqrtPriceX64B, _amount, !add)\n        : new BN(0);\n    } else if (sqrtPriceX64.lte(sqrtPriceX64B)) {\n      const liquidity0 = LiquidityMath.getLiquidityFromTokenAmountA(sqrtPriceX64, sqrtPriceX64B, _amount, !add);\n      const liquidity1 = LiquidityMath.getLiquidityFromTokenAmountB(sqrtPriceX64A, sqrtPriceX64, _amount);\n      liquidity = inputA ? liquidity0 : liquidity1;\n    } else {\n      liquidity = inputA\n        ? new BN(0)\n        : LiquidityMath.getLiquidityFromTokenAmountB(sqrtPriceX64A, sqrtPriceX64B, _amount);\n    }\n\n    return PoolUtils.getAmountsFromLiquidity({\n      epochInfo,\n      poolInfo,\n      tickLower,\n      tickUpper,\n      liquidity,\n      slippage,\n      add,\n    });\n  }\n\n  static async getAmountsFromLiquidity({\n    epochInfo,\n    poolInfo,\n    tickLower,\n    tickUpper,\n    liquidity,\n    slippage,\n    add,\n  }: {\n    epochInfo: EpochInfo;\n    poolInfo: ApiV3PoolInfoConcentratedItem;\n    tickLower: number;\n    tickUpper: number;\n    liquidity: BN;\n    slippage: number;\n    add: boolean;\n  }): Promise<ReturnTypeGetLiquidityAmountOut> {\n    const sqrtPriceX64A = SqrtPriceMath.getSqrtPriceX64FromTick(tickLower);\n    const sqrtPriceX64B = SqrtPriceMath.getSqrtPriceX64FromTick(tickUpper);\n\n    const coefficientRe = add ? 1 + slippage : 1 - slippage;\n\n    const amounts = LiquidityMath.getAmountsFromLiquidity(\n      SqrtPriceMath.priceToSqrtPriceX64(new Decimal(poolInfo.price), poolInfo.mintA.decimals, poolInfo.mintB.decimals),\n      sqrtPriceX64A,\n      sqrtPriceX64B,\n      liquidity,\n      add,\n    );\n    const [amountA, amountB] = [\n      getTransferAmountFeeV2(amounts.amountA, poolInfo.mintA.extensions?.feeConfig, epochInfo, true),\n      getTransferAmountFeeV2(amounts.amountB, poolInfo.mintB.extensions?.feeConfig, epochInfo, true),\n    ];\n    const [amountSlippageA, amountSlippageB] = [\n      getTransferAmountFeeV2(\n        amounts.amountA.muln(coefficientRe),\n        poolInfo.mintA.extensions?.feeConfig,\n        epochInfo,\n        true,\n      ),\n      getTransferAmountFeeV2(\n        amounts.amountB.muln(coefficientRe),\n        poolInfo.mintB.extensions?.feeConfig,\n        epochInfo,\n        true,\n      ),\n    ];\n\n    return {\n      liquidity,\n      amountA,\n      amountB,\n      amountSlippageA,\n      amountSlippageB,\n      expirationTime: minExpirationTime(amountA.expirationTime, amountB.expirationTime),\n    };\n  }\n\n  static async fetchComputeClmmInfo({\n    owner,\n    connection,\n    poolInfo,\n  }: {\n    owner: PublicKey;\n    connection: Connection;\n    poolInfo: ApiV3PoolInfoConcentratedItem;\n  }): Promise<ComputeClmmPoolInfo> {\n    const data = await connection.getAccountInfo(new PublicKey(poolInfo.id));\n    if (!data) throw new Error(`pool not found ${poolInfo.id}`);\n    const rpcPool = PoolInfoLayout.decode(data.data);\n\n    const pda = getPdaExBitmapAccount(owner, new PublicKey(poolInfo.id)).publicKey;\n    const exBitData = await PoolUtils.fetchExBitmaps({\n      connection,\n      exBitmapAddress: [pda],\n      batchRequest: false,\n    });\n\n    return {\n      ...rpcPool,\n      id: new PublicKey(poolInfo.id),\n      programId: new PublicKey(poolInfo.programId),\n      mintA: poolInfo.mintA,\n      mintB: poolInfo.mintB,\n      ammConfig: {\n        ...poolInfo.config,\n        id: new PublicKey(poolInfo.config.id),\n        fundOwner: \"\",\n      },\n      currentPrice: new Decimal(poolInfo.price),\n      exBitmapInfo: exBitData[pda.toBase58()],\n      startTime: rpcPool.startTime.toNumber(),\n    };\n  }\n}\n\nexport function getLiquidityFromAmounts({\n  poolInfo,\n  tickLower,\n  tickUpper,\n  amountA,\n  amountB,\n  slippage,\n  add,\n  epochInfo,\n  amountHasFee,\n}: {\n  poolInfo: ApiV3PoolInfoConcentratedItem;\n  tickLower: number;\n  tickUpper: number;\n  amountA: BN;\n  amountB: BN;\n  slippage: number;\n  add: boolean;\n  epochInfo: EpochInfo;\n  amountHasFee: boolean;\n}): ReturnTypeGetLiquidityAmountOut {\n  const [_tickLower, _tickUpper, _amountA, _amountB] =\n    tickLower < tickUpper ? [tickLower, tickUpper, amountA, amountB] : [tickUpper, tickLower, amountB, amountA];\n  const sqrtPriceX64 = SqrtPriceMath.priceToSqrtPriceX64(\n    new Decimal(poolInfo.price),\n    poolInfo.mintA.decimals,\n    poolInfo.mintB.decimals,\n  );\n  const sqrtPriceX64A = SqrtPriceMath.getSqrtPriceX64FromTick(_tickLower);\n  const sqrtPriceX64B = SqrtPriceMath.getSqrtPriceX64FromTick(_tickUpper);\n\n  const [amountFeeA, amountFeeB] = [\n    getTransferAmountFeeV2(_amountA, poolInfo.mintA.extensions?.feeConfig, epochInfo, !amountHasFee),\n    getTransferAmountFeeV2(_amountB, poolInfo.mintB.extensions?.feeConfig, epochInfo, !amountHasFee),\n  ];\n\n  const liquidity = LiquidityMath.getLiquidityFromTokenAmounts(\n    sqrtPriceX64,\n    sqrtPriceX64A,\n    sqrtPriceX64B,\n    amountFeeA.amount.sub(amountFeeA.fee ?? ZERO),\n    amountFeeB.amount.sub(amountFeeB.fee ?? ZERO),\n  );\n\n  return LiquidityMath.getAmountsOutFromLiquidity({\n    poolInfo,\n    tickLower,\n    tickUpper,\n    liquidity,\n    slippage,\n    add,\n    epochInfo,\n    amountAddFee: !amountHasFee,\n  });\n}\n","import BN from \"bn.js\";\n\nimport { TickArrayBitmapExtensionType } from \"../type\";\n\nimport { MAX_TICK, MIN_TICK } from \"./constants\";\nimport { TICK_ARRAY_BITMAP_SIZE, TICK_ARRAY_SIZE, TickUtils } from \"./tick\";\nimport { TickQuery } from \"./tickQuery\";\nimport { isZero, leadingZeros, leastSignificantBit, mostSignificantBit, trailingZeros } from \"./util\";\n\nexport const EXTENSION_TICKARRAY_BITMAP_SIZE = 14;\n\nexport class TickArrayBitmap {\n  public static maxTickInTickarrayBitmap(tickSpacing: number): number {\n    return tickSpacing * TICK_ARRAY_SIZE * TICK_ARRAY_BITMAP_SIZE;\n  }\n\n  public static getBitmapTickBoundary(\n    tickarrayStartIndex: number,\n    tickSpacing: number,\n  ): {\n    minValue: number;\n    maxValue: number;\n  } {\n    const ticksInOneBitmap = this.maxTickInTickarrayBitmap(tickSpacing);\n    let m = Math.floor(Math.abs(tickarrayStartIndex) / ticksInOneBitmap);\n    if (tickarrayStartIndex < 0 && Math.abs(tickarrayStartIndex) % ticksInOneBitmap != 0) m += 1;\n\n    const minValue = ticksInOneBitmap * m;\n\n    return tickarrayStartIndex < 0\n      ? { minValue: -minValue, maxValue: -minValue + ticksInOneBitmap }\n      : { minValue, maxValue: minValue + ticksInOneBitmap };\n  }\n\n  public static nextInitializedTickArrayStartIndex(\n    bitMap: BN,\n    lastTickArrayStartIndex: number,\n    tickSpacing: number,\n    zeroForOne: boolean,\n  ): { isInit: boolean; tickIndex: number } {\n    if (!TickQuery.checkIsValidStartIndex(lastTickArrayStartIndex, tickSpacing))\n      throw Error(\"nextInitializedTickArrayStartIndex check error\");\n\n    const tickBoundary = this.maxTickInTickarrayBitmap(tickSpacing);\n    const nextTickArrayStartIndex = zeroForOne\n      ? lastTickArrayStartIndex - TickQuery.tickCount(tickSpacing)\n      : lastTickArrayStartIndex + TickQuery.tickCount(tickSpacing);\n\n    if (nextTickArrayStartIndex < -tickBoundary || nextTickArrayStartIndex >= tickBoundary) {\n      return { isInit: false, tickIndex: lastTickArrayStartIndex };\n    }\n\n    const multiplier = tickSpacing * TICK_ARRAY_SIZE;\n    let compressed = nextTickArrayStartIndex / multiplier + 512;\n\n    if (nextTickArrayStartIndex < 0 && nextTickArrayStartIndex % multiplier != 0) {\n      compressed--;\n    }\n\n    const bitPos = Math.abs(compressed);\n\n    if (zeroForOne) {\n      const offsetBitMap = bitMap.shln(1024 - bitPos - 1);\n      const nextBit = mostSignificantBit(1024, offsetBitMap);\n      if (nextBit !== null) {\n        const nextArrayStartIndex = (bitPos - nextBit - 512) * multiplier;\n        return { isInit: true, tickIndex: nextArrayStartIndex };\n      } else {\n        return { isInit: false, tickIndex: -tickBoundary };\n      }\n    } else {\n      const offsetBitMap = bitMap.shrn(bitPos);\n      const nextBit = leastSignificantBit(1024, offsetBitMap);\n      if (nextBit !== null) {\n        const nextArrayStartIndex = (bitPos + nextBit - 512) * multiplier;\n        return { isInit: true, tickIndex: nextArrayStartIndex };\n      } else {\n        return { isInit: false, tickIndex: tickBoundary - TickQuery.tickCount(tickSpacing) };\n      }\n    }\n  }\n}\n\nexport class TickArrayBitmapExtensionUtils {\n  public static getBitmapOffset(tickIndex: number, tickSpacing: number): number {\n    if (!TickQuery.checkIsValidStartIndex(tickIndex, tickSpacing)) {\n      throw new Error(\"No enough initialized tickArray\");\n    }\n    this.checkExtensionBoundary(tickIndex, tickSpacing);\n\n    const ticksInOneBitmap = TickArrayBitmap.maxTickInTickarrayBitmap(tickSpacing);\n    let offset = Math.floor(Math.abs(tickIndex) / ticksInOneBitmap) - 1;\n\n    if (tickIndex < 0 && Math.abs(tickIndex) % ticksInOneBitmap === 0) offset--;\n    return offset;\n  }\n\n  public static getBitmap(\n    tickIndex: number,\n    tickSpacing: number,\n    tickArrayBitmapExtension: TickArrayBitmapExtensionType,\n  ): { offset: number; tickarrayBitmap: BN[] } {\n    const offset = this.getBitmapOffset(tickIndex, tickSpacing);\n    if (tickIndex < 0) {\n      return { offset, tickarrayBitmap: tickArrayBitmapExtension.negativeTickArrayBitmap[offset] };\n    } else {\n      return { offset, tickarrayBitmap: tickArrayBitmapExtension.positiveTickArrayBitmap[offset] };\n    }\n  }\n\n  public static checkExtensionBoundary(tickIndex: number, tickSpacing: number) {\n    const { positiveTickBoundary, negativeTickBoundary } = this.extensionTickBoundary(tickSpacing);\n\n    if (tickIndex >= negativeTickBoundary && tickIndex < positiveTickBoundary) {\n      throw Error(\"checkExtensionBoundary -> InvalidTickArrayBoundary\");\n    }\n  }\n\n  public static extensionTickBoundary(tickSpacing: number): {\n    positiveTickBoundary: number;\n    negativeTickBoundary: number;\n  } {\n    const positiveTickBoundary = TickArrayBitmap.maxTickInTickarrayBitmap(tickSpacing);\n\n    const negativeTickBoundary = -positiveTickBoundary;\n\n    if (MAX_TICK <= positiveTickBoundary)\n      throw Error(`extensionTickBoundary check error: ${MAX_TICK}, ${positiveTickBoundary}`);\n    if (negativeTickBoundary <= MIN_TICK)\n      throw Error(`extensionTickBoundary check error: ${negativeTickBoundary}, ${MIN_TICK}`);\n\n    return { positiveTickBoundary, negativeTickBoundary };\n  }\n\n  public static checkTickArrayIsInit(\n    tickArrayStartIndex: number,\n    tickSpacing: number,\n    tickArrayBitmapExtension: TickArrayBitmapExtensionType,\n  ): { isInitialized: boolean; startIndex: number } {\n    const { tickarrayBitmap } = this.getBitmap(tickArrayStartIndex, tickSpacing, tickArrayBitmapExtension);\n\n    const tickArrayOffsetInBitmap = this.tickArrayOffsetInBitmap(tickArrayStartIndex, tickSpacing);\n\n    return {\n      isInitialized: TickUtils.mergeTickArrayBitmap(tickarrayBitmap).testn(tickArrayOffsetInBitmap),\n      startIndex: tickArrayStartIndex,\n    };\n  }\n\n  public static nextInitializedTickArrayFromOneBitmap(\n    lastTickArrayStartIndex: number,\n    tickSpacing: number,\n    zeroForOne: boolean,\n    tickArrayBitmapExtension: TickArrayBitmapExtensionType,\n  ): {\n    isInit: boolean;\n    tickIndex: number;\n  } {\n    const multiplier = TickQuery.tickCount(tickSpacing);\n    const nextTickArrayStartIndex = zeroForOne\n      ? lastTickArrayStartIndex - multiplier\n      : lastTickArrayStartIndex + multiplier;\n    const { tickarrayBitmap } = this.getBitmap(nextTickArrayStartIndex, tickSpacing, tickArrayBitmapExtension);\n\n    return this.nextInitializedTickArrayInBitmap(tickarrayBitmap, nextTickArrayStartIndex, tickSpacing, zeroForOne);\n  }\n\n  public static nextInitializedTickArrayInBitmap(\n    tickarrayBitmap: BN[],\n    nextTickArrayStartIndex: number,\n    tickSpacing: number,\n    zeroForOne: boolean,\n  ): {\n    isInit: boolean;\n    tickIndex: number;\n  } {\n    const { minValue: bitmapMinTickBoundary, maxValue: bitmapMaxTickBoundary } = TickArrayBitmap.getBitmapTickBoundary(\n      nextTickArrayStartIndex,\n      tickSpacing,\n    );\n\n    const tickArrayOffsetInBitmap = this.tickArrayOffsetInBitmap(nextTickArrayStartIndex, tickSpacing);\n    if (zeroForOne) {\n      // tick from upper to lower\n      // find from highter bits to lower bits\n      const offsetBitMap = TickUtils.mergeTickArrayBitmap(tickarrayBitmap).shln(\n        TICK_ARRAY_BITMAP_SIZE - 1 - tickArrayOffsetInBitmap,\n      );\n\n      const nextBit = isZero(512, offsetBitMap) ? null : leadingZeros(512, offsetBitMap);\n\n      if (nextBit !== null) {\n        const nextArrayStartIndex = nextTickArrayStartIndex - nextBit * TickQuery.tickCount(tickSpacing);\n        return { isInit: true, tickIndex: nextArrayStartIndex };\n      } else {\n        // not found til to the end\n        return { isInit: false, tickIndex: bitmapMinTickBoundary };\n      }\n    } else {\n      // tick from lower to upper\n      // find from lower bits to highter bits\n      const offsetBitMap = TickUtils.mergeTickArrayBitmap(tickarrayBitmap).shrn(tickArrayOffsetInBitmap);\n\n      const nextBit = isZero(512, offsetBitMap) ? null : trailingZeros(512, offsetBitMap);\n\n      if (nextBit !== null) {\n        const nextArrayStartIndex = nextTickArrayStartIndex + nextBit * TickQuery.tickCount(tickSpacing);\n        return { isInit: true, tickIndex: nextArrayStartIndex };\n      } else {\n        // not found til to the end\n        return { isInit: false, tickIndex: bitmapMaxTickBoundary - TickQuery.tickCount(tickSpacing) };\n      }\n    }\n  }\n\n  public static tickArrayOffsetInBitmap(tickArrayStartIndex: number, tickSpacing: number): number {\n    const m = Math.abs(tickArrayStartIndex) % TickArrayBitmap.maxTickInTickarrayBitmap(tickSpacing);\n    let tickArrayOffsetInBitmap = Math.floor(m / TickQuery.tickCount(tickSpacing));\n    if (tickArrayStartIndex < 0 && m != 0) {\n      tickArrayOffsetInBitmap = TICK_ARRAY_BITMAP_SIZE - tickArrayOffsetInBitmap;\n    }\n    return tickArrayOffsetInBitmap;\n  }\n}\n","import BN from \"bn.js\";\n\nimport { ClmmPoolInfo, ClmmPoolPersonalPosition, ClmmPoolRewardInfo, SDKParsedConcentratedInfo } from \"../type\";\nimport { minExpirationTime, getTransferAmountFeeV2 } from \"@/common\";\nimport { Q64 } from \"./constants\";\nimport { MathUtil, SqrtPriceMath, LiquidityMath } from \"./math\";\nimport { Tick } from \"./tick\";\nimport { GetAmountParams, ReturnTypeGetLiquidityAmountOut } from \"../type\";\nimport Decimal from \"decimal.js\";\nimport { ClmmPositionLayout } from \"../layout\";\n\nexport class PositionUtils {\n  static getfeeGrowthInside(\n    poolState: Pick<ClmmPoolInfo, \"tickCurrent\" | \"feeGrowthGlobalX64A\" | \"feeGrowthGlobalX64B\">,\n    tickLowerState: Tick,\n    tickUpperState: Tick,\n  ): { feeGrowthInsideX64A: BN; feeGrowthInsideBX64: BN } {\n    let feeGrowthBelowX64A = new BN(0);\n    let feeGrowthBelowX64B = new BN(0);\n    if (poolState.tickCurrent >= tickLowerState.tick) {\n      feeGrowthBelowX64A = tickLowerState.feeGrowthOutsideX64A;\n      feeGrowthBelowX64B = tickLowerState.feeGrowthOutsideX64B;\n    } else {\n      feeGrowthBelowX64A = poolState.feeGrowthGlobalX64A.sub(tickLowerState.feeGrowthOutsideX64A);\n      feeGrowthBelowX64B = poolState.feeGrowthGlobalX64B.sub(tickLowerState.feeGrowthOutsideX64B);\n    }\n\n    let feeGrowthAboveX64A = new BN(0);\n    let feeGrowthAboveX64B = new BN(0);\n    if (poolState.tickCurrent < tickUpperState.tick) {\n      feeGrowthAboveX64A = tickUpperState.feeGrowthOutsideX64A;\n      feeGrowthAboveX64B = tickUpperState.feeGrowthOutsideX64B;\n    } else {\n      feeGrowthAboveX64A = poolState.feeGrowthGlobalX64A.sub(tickUpperState.feeGrowthOutsideX64A);\n      feeGrowthAboveX64B = poolState.feeGrowthGlobalX64B.sub(tickUpperState.feeGrowthOutsideX64B);\n    }\n\n    const feeGrowthInsideX64A = MathUtil.wrappingSubU128(\n      MathUtil.wrappingSubU128(poolState.feeGrowthGlobalX64A, feeGrowthBelowX64A),\n      feeGrowthAboveX64A,\n    );\n    const feeGrowthInsideBX64 = MathUtil.wrappingSubU128(\n      MathUtil.wrappingSubU128(poolState.feeGrowthGlobalX64B, feeGrowthBelowX64B),\n      feeGrowthAboveX64B,\n    );\n    return { feeGrowthInsideX64A, feeGrowthInsideBX64 };\n  }\n\n  static GetPositionFees(\n    ammPool: ClmmPoolInfo,\n    positionState: ClmmPoolPersonalPosition,\n    tickLowerState: Tick,\n    tickUpperState: Tick,\n  ): { tokenFeeAmountA: BN; tokenFeeAmountB: BN } {\n    const { feeGrowthInsideX64A, feeGrowthInsideBX64 } = this.getfeeGrowthInside(\n      ammPool,\n      tickLowerState,\n      tickUpperState,\n    );\n\n    const feeGrowthdeltaA = MathUtil.mulDivFloor(\n      MathUtil.wrappingSubU128(feeGrowthInsideX64A, positionState.feeGrowthInsideLastX64A),\n      positionState.liquidity,\n      Q64,\n    );\n    const tokenFeeAmountA = positionState.tokenFeesOwedA.add(feeGrowthdeltaA);\n\n    const feeGrowthdelta1 = MathUtil.mulDivFloor(\n      MathUtil.wrappingSubU128(feeGrowthInsideBX64, positionState.feeGrowthInsideLastX64B),\n      positionState.liquidity,\n      Q64,\n    );\n    const tokenFeeAmountB = positionState.tokenFeesOwedB.add(feeGrowthdelta1);\n\n    return { tokenFeeAmountA, tokenFeeAmountB };\n  }\n\n  static GetPositionFeesV2(\n    ammPool: Pick<ClmmPoolInfo, \"tickCurrent\" | \"feeGrowthGlobalX64A\" | \"feeGrowthGlobalX64B\">,\n    positionState: ClmmPositionLayout,\n    tickLowerState: Tick,\n    tickUpperState: Tick,\n  ): { tokenFeeAmountA: BN; tokenFeeAmountB: BN } {\n    const { feeGrowthInsideX64A, feeGrowthInsideBX64 } = this.getfeeGrowthInside(\n      ammPool,\n      tickLowerState,\n      tickUpperState,\n    );\n\n    const feeGrowthdeltaA = MathUtil.mulDivFloor(\n      MathUtil.wrappingSubU128(feeGrowthInsideX64A, positionState.feeGrowthInsideLastX64A),\n      positionState.liquidity,\n      Q64,\n    );\n    const tokenFeeAmountA = positionState.tokenFeesOwedA.add(feeGrowthdeltaA);\n\n    const feeGrowthdelta1 = MathUtil.mulDivFloor(\n      MathUtil.wrappingSubU128(feeGrowthInsideBX64, positionState.feeGrowthInsideLastX64B),\n      positionState.liquidity,\n      Q64,\n    );\n    const tokenFeeAmountB = positionState.tokenFeesOwedB.add(feeGrowthdelta1);\n\n    return { tokenFeeAmountA, tokenFeeAmountB };\n  }\n\n  static GetPositionRewardsV2(\n    ammPool: Pick<ClmmPoolInfo, \"tickCurrent\" | \"feeGrowthGlobalX64B\"> & {\n      rewardInfos: { rewardGrowthGlobalX64: BN }[];\n    },\n    positionState: ClmmPositionLayout,\n    tickLowerState: Tick,\n    tickUpperState: Tick,\n  ): BN[] {\n    const rewards: BN[] = [];\n\n    const rewardGrowthsInside = this.getRewardGrowthInsideV2(\n      ammPool.tickCurrent,\n      tickLowerState,\n      tickUpperState,\n      ammPool.rewardInfos,\n    );\n    for (let i = 0; i < rewardGrowthsInside.length; i++) {\n      const rewardGrowthInside = rewardGrowthsInside[i];\n      const currRewardInfo = positionState.rewardInfos[i];\n\n      const rewardGrowthDelta = MathUtil.wrappingSubU128(rewardGrowthInside, currRewardInfo.growthInsideLastX64);\n      const amountOwedDelta = MathUtil.mulDivFloor(rewardGrowthDelta, positionState.liquidity, Q64);\n      const rewardAmountOwed = currRewardInfo.rewardAmountOwed.add(amountOwedDelta);\n      rewards.push(rewardAmountOwed);\n    }\n    return rewards;\n  }\n\n  static GetPositionRewards(\n    ammPool: ClmmPoolInfo,\n    positionState: ClmmPoolPersonalPosition,\n    tickLowerState: Tick,\n    tickUpperState: Tick,\n  ): BN[] {\n    const rewards: BN[] = [];\n\n    const rewardGrowthsInside = this.getRewardGrowthInside(\n      ammPool.tickCurrent,\n      tickLowerState,\n      tickUpperState,\n      ammPool.rewardInfos,\n    );\n    for (let i = 0; i < rewardGrowthsInside.length; i++) {\n      const rewardGrowthInside = rewardGrowthsInside[i];\n      const currRewardInfo = positionState.rewardInfos[i];\n\n      const rewardGrowthDelta = MathUtil.wrappingSubU128(rewardGrowthInside, currRewardInfo.growthInsideLastX64);\n      const amountOwedDelta = MathUtil.mulDivFloor(rewardGrowthDelta, positionState.liquidity, Q64);\n      const rewardAmountOwed = currRewardInfo.rewardAmountOwed.add(amountOwedDelta);\n      rewards.push(rewardAmountOwed);\n    }\n    return rewards;\n  }\n\n  static getRewardGrowthInside(\n    tickCurrentIndex: number,\n    tickLowerState: Tick,\n    tickUpperState: Tick,\n    rewardInfos: ClmmPoolRewardInfo[],\n  ): BN[] {\n    const rewardGrowthsInside: BN[] = [];\n    for (let i = 0; i < rewardInfos.length; i++) {\n      let rewardGrowthsBelow = new BN(0);\n      if (tickLowerState.liquidityGross.eqn(0)) {\n        rewardGrowthsBelow = rewardInfos[i].rewardGrowthGlobalX64;\n      } else if (tickCurrentIndex < tickLowerState.tick) {\n        rewardGrowthsBelow = rewardInfos[i].rewardGrowthGlobalX64.sub(tickLowerState.rewardGrowthsOutsideX64[i]);\n      } else {\n        rewardGrowthsBelow = tickLowerState.rewardGrowthsOutsideX64[i];\n      }\n\n      let rewardGrowthsAbove = new BN(0);\n      if (tickUpperState.liquidityGross.eqn(0)) {\n        //\n      } else if (tickCurrentIndex < tickUpperState.tick) {\n        rewardGrowthsAbove = tickUpperState.rewardGrowthsOutsideX64[i];\n      } else {\n        rewardGrowthsAbove = rewardInfos[i].rewardGrowthGlobalX64.sub(tickUpperState.rewardGrowthsOutsideX64[i]);\n      }\n\n      rewardGrowthsInside.push(\n        MathUtil.wrappingSubU128(\n          MathUtil.wrappingSubU128(rewardInfos[i].rewardGrowthGlobalX64, rewardGrowthsBelow),\n          rewardGrowthsAbove,\n        ),\n      );\n    }\n\n    return rewardGrowthsInside;\n  }\n\n  static getRewardGrowthInsideV2(\n    tickCurrentIndex: number,\n    tickLowerState: Tick,\n    tickUpperState: Tick,\n    rewardInfos: Pick<ClmmPoolRewardInfo, \"rewardGrowthGlobalX64\">[],\n  ): BN[] {\n    const rewardGrowthsInside: BN[] = [];\n    for (let i = 0; i < rewardInfos.length; i++) {\n      let rewardGrowthsBelow = new BN(0);\n      if (tickLowerState.liquidityGross.eqn(0)) {\n        rewardGrowthsBelow = rewardInfos[i].rewardGrowthGlobalX64;\n      } else if (tickCurrentIndex < tickLowerState.tick) {\n        rewardGrowthsBelow = rewardInfos[i].rewardGrowthGlobalX64.sub(tickLowerState.rewardGrowthsOutsideX64[i]);\n      } else {\n        rewardGrowthsBelow = tickLowerState.rewardGrowthsOutsideX64[i];\n      }\n\n      let rewardGrowthsAbove = new BN(0);\n      if (tickUpperState.liquidityGross.eqn(0)) {\n        //\n      } else if (tickCurrentIndex < tickUpperState.tick) {\n        rewardGrowthsAbove = tickUpperState.rewardGrowthsOutsideX64[i];\n      } else {\n        rewardGrowthsAbove = rewardInfos[i].rewardGrowthGlobalX64.sub(tickUpperState.rewardGrowthsOutsideX64[i]);\n      }\n\n      rewardGrowthsInside.push(\n        MathUtil.wrappingSubU128(\n          MathUtil.wrappingSubU128(rewardInfos[i].rewardGrowthGlobalX64, rewardGrowthsBelow),\n          rewardGrowthsAbove,\n        ),\n      );\n    }\n\n    return rewardGrowthsInside;\n  }\n\n  static getAmountsFromLiquidity({\n    poolInfo,\n    ownerPosition,\n    liquidity,\n    slippage,\n    add,\n    epochInfo,\n  }: GetAmountParams): ReturnTypeGetLiquidityAmountOut {\n    const sqrtPriceX64 = SqrtPriceMath.priceToSqrtPriceX64(\n      new Decimal(poolInfo.price),\n      poolInfo.mintA.decimals,\n      poolInfo.mintB.decimals,\n    );\n    const sqrtPriceX64A = SqrtPriceMath.getSqrtPriceX64FromTick(ownerPosition.tickLower);\n    const sqrtPriceX64B = SqrtPriceMath.getSqrtPriceX64FromTick(ownerPosition.tickUpper);\n\n    const coefficientRe = add ? 1 + slippage : 1 - slippage;\n\n    const amounts = LiquidityMath.getAmountsFromLiquidity(sqrtPriceX64, sqrtPriceX64A, sqrtPriceX64B, liquidity, add);\n\n    const [amountA, amountB] = [\n      getTransferAmountFeeV2(amounts.amountA, poolInfo.mintA.extensions?.feeConfig, epochInfo, true),\n      getTransferAmountFeeV2(amounts.amountB, poolInfo.mintB.extensions?.feeConfig, epochInfo, true),\n    ];\n    const [amountSlippageA, amountSlippageB] = [\n      getTransferAmountFeeV2(\n        new BN(new Decimal(amounts.amountA.toString()).mul(coefficientRe).toFixed(0)),\n        poolInfo.mintA.extensions?.feeConfig,\n        epochInfo,\n        true,\n      ),\n      getTransferAmountFeeV2(\n        new BN(new Decimal(amounts.amountB.toString()).mul(coefficientRe).toFixed(0)),\n        poolInfo.mintB.extensions?.feeConfig,\n        epochInfo,\n        true,\n      ),\n    ];\n\n    return {\n      liquidity,\n      amountA,\n      amountB,\n      amountSlippageA,\n      amountSlippageB,\n      expirationTime: minExpirationTime(amountA.expirationTime, amountB.expirationTime),\n    };\n  }\n}\n","import { blob, bool, i128, publicKey, s32, seq, struct, u128, u16, u32, u64, u8 } from \"@/marshmallow\";\n\nimport { TICK_ARRAY_SIZE } from \"./utils/tick\";\nimport { EXTENSION_TICKARRAY_BITMAP_SIZE } from \"./utils/tickarrayBitmap\";\n\nexport const AmmConfigLayout = struct([\n  blob(8),\n  u8(\"bump\"),\n  u16(\"index\"),\n  publicKey(\"\"),\n  u32(\"protocolFeeRate\"),\n  u32(\"tradeFeeRate\"),\n  u16(\"tickSpacing\"),\n  seq(u64(), 8, \"\"),\n]);\n\nexport const ObservationLayout = struct([\n  u32(\"blockTimestamp\"),\n  u128(\"sqrtPriceX64\"),\n  u128(\"cumulativeTimePriceX64\"),\n  seq(u128(), 1, \"\"),\n]);\nexport const ObservationInfoLayout = struct([\n  blob(8),\n  bool(\"initialized\"),\n  publicKey(\"poolId\"),\n  seq(ObservationLayout, 1000, \"observations\"),\n  seq(u128(), 5, \"\"),\n]);\n\nexport const RewardInfo = struct([\n  u8(\"rewardState\"),\n  u64(\"openTime\"),\n  u64(\"endTime\"),\n  u64(\"lastUpdateTime\"),\n  u128(\"emissionsPerSecondX64\"),\n  u64(\"rewardTotalEmissioned\"),\n  u64(\"rewardClaimed\"),\n  publicKey(\"tokenMint\"),\n  publicKey(\"tokenVault\"),\n  publicKey(\"creator\"),\n  u128(\"rewardGrowthGlobalX64\"),\n]);\nexport const PoolInfoLayout = struct([\n  blob(8),\n  u8(\"bump\"),\n  publicKey(\"ammConfig\"),\n  publicKey(\"creator\"),\n  publicKey(\"mintA\"),\n  publicKey(\"mintB\"),\n  publicKey(\"vaultA\"),\n  publicKey(\"vaultB\"),\n  publicKey(\"observationId\"),\n  u8(\"mintDecimalsA\"),\n  u8(\"mintDecimalsB\"),\n  u16(\"tickSpacing\"),\n  u128(\"liquidity\"),\n  u128(\"sqrtPriceX64\"),\n  s32(\"tickCurrent\"),\n  u16(\"observationIndex\"),\n  u16(\"observationUpdateDuration\"),\n  u128(\"feeGrowthGlobalX64A\"),\n  u128(\"feeGrowthGlobalX64B\"),\n  u64(\"protocolFeesTokenA\"),\n  u64(\"protocolFeesTokenB\"),\n\n  u128(\"swapInAmountTokenA\"),\n  u128(\"swapOutAmountTokenB\"),\n  u128(\"swapInAmountTokenB\"),\n  u128(\"swapOutAmountTokenA\"),\n\n  u8(\"status\"),\n\n  seq(u8(), 7, \"\"),\n\n  seq(RewardInfo, 3, \"rewardInfos\"),\n  seq(u64(), 16, \"tickArrayBitmap\"),\n\n  u64(\"totalFeesTokenA\"),\n  u64(\"totalFeesClaimedTokenA\"),\n  u64(\"totalFeesTokenB\"),\n  u64(\"totalFeesClaimedTokenB\"),\n\n  u64(\"fundFeesTokenA\"),\n  u64(\"fundFeesTokenB\"),\n\n  u64(\"startTime\"),\n\n  seq(u64(), 15 * 4 - 3, \"padding\"),\n]);\n\nexport const PositionRewardInfoLayout = struct([u128(\"growthInsideLastX64\"), u64(\"rewardAmountOwed\")]);\nexport const PositionInfoLayout = struct([\n  blob(8),\n  u8(\"bump\"),\n  publicKey(\"nftMint\"),\n  publicKey(\"poolId\"),\n\n  s32(\"tickLower\"),\n  s32(\"tickUpper\"),\n  u128(\"liquidity\"),\n  u128(\"feeGrowthInsideLastX64A\"),\n  u128(\"feeGrowthInsideLastX64B\"),\n  u64(\"tokenFeesOwedA\"),\n  u64(\"tokenFeesOwedB\"),\n\n  seq(PositionRewardInfoLayout, 3, \"rewardInfos\"),\n\n  seq(u64(), 8, \"\"),\n]);\n\nexport type ClmmPositionLayout = ReturnType<typeof PositionInfoLayout.decode>;\n\nexport const ProtocolPositionLayout = struct([\n  blob(8),\n  u8(\"bump\"),\n  publicKey(\"poolId\"),\n  s32(\"tickLowerIndex\"),\n  s32(\"tickUpperIndex\"),\n  u128(\"liquidity\"),\n  u128(\"feeGrowthInsideLastX64A\"),\n  u128(\"feeGrowthInsideLastX64B\"),\n  u64(\"tokenFeesOwedA\"),\n  u64(\"tokenFeesOwedB\"),\n  seq(u128(), 3, \"rewardGrowthInside\"),\n\n  seq(u64(), 8, \"\"),\n]);\n\nexport const TickLayout = struct([\n  s32(\"tick\"),\n  i128(\"liquidityNet\"),\n  u128(\"liquidityGross\"),\n  u128(\"feeGrowthOutsideX64A\"),\n  u128(\"feeGrowthOutsideX64B\"),\n  seq(u128(), 3, \"rewardGrowthsOutsideX64\"),\n\n  seq(u32(), 13, \"\"),\n]);\n\nexport const TickArrayLayout = struct([\n  blob(8),\n  publicKey(\"poolId\"),\n  s32(\"startTickIndex\"),\n  seq(TickLayout, TICK_ARRAY_SIZE, \"ticks\"),\n  u8(\"initializedTickCount\"),\n\n  seq(u8(), 115, \"\"),\n]);\n\nexport const OperationLayout = struct([blob(329), seq(publicKey(), 100, \"whitelistMints\")]);\n\nexport const TickArrayBitmapExtensionLayout = struct([\n  blob(8),\n  publicKey(\"poolId\"),\n  seq(seq(u64(), 8), EXTENSION_TICKARRAY_BITMAP_SIZE, \"positiveTickArrayBitmap\"),\n  seq(seq(u64(), 8), EXTENSION_TICKARRAY_BITMAP_SIZE, \"negativeTickArrayBitmap\"),\n]);\n","import { Connection, PublicKey } from \"@solana/web3.js\";\nimport { AmmV4Keys, AmmV5Keys } from \"@/api/type\";\nimport {\n  findProgramAddress,\n  simulateMultipleInstruction,\n  parseSimulateLogToJson,\n  parseSimulateValue,\n} from \"@/common/txTool/txUtils\";\nimport { getSerumAssociatedAuthority } from \"./serum\";\nimport { LiquidityPoolKeys } from \"./type\";\nimport { StableLayout } from \"./stable\";\nimport { makeSimulatePoolInfoInstruction } from \"./instruction\";\nimport BN from \"bn.js\";\n\ntype AssociatedName =\n  | \"amm_associated_seed\"\n  | \"lp_mint_associated_seed\"\n  | \"coin_vault_associated_seed\"\n  | \"pc_vault_associated_seed\"\n  | \"lp_mint_associated_seed\"\n  | \"temp_lp_token_associated_seed\"\n  | \"open_order_associated_seed\"\n  | \"target_associated_seed\"\n  | \"withdraw_associated_seed\";\n\ninterface GetAssociatedParam {\n  name: AssociatedName;\n  programId: PublicKey;\n  marketId: PublicKey;\n}\n\nexport function getAssociatedConfigId({ programId }: { programId: PublicKey }): PublicKey {\n  const { publicKey } = findProgramAddress([Buffer.from(\"amm_config_account_seed\", \"utf-8\")], programId);\n  return publicKey;\n}\n\nexport function getLiquidityAssociatedId({ name, programId, marketId }: GetAssociatedParam): PublicKey {\n  const { publicKey } = findProgramAddress(\n    [programId.toBuffer(), marketId.toBuffer(), Buffer.from(name, \"utf-8\")],\n    programId,\n  );\n  return publicKey;\n}\n\nexport function getAssociatedOpenOrders({ programId, marketId }: { programId: PublicKey; marketId: PublicKey }) {\n  const { publicKey } = findProgramAddress(\n    [programId.toBuffer(), marketId.toBuffer(), Buffer.from(\"open_order_associated_seed\", \"utf-8\")],\n    programId,\n  );\n  return publicKey;\n}\n\nexport function getLiquidityAssociatedAuthority({ programId }: { programId: PublicKey }): {\n  publicKey: PublicKey;\n  nonce: number;\n} {\n  return findProgramAddress([Buffer.from([97, 109, 109, 32, 97, 117, 116, 104, 111, 114, 105, 116, 121])], programId);\n}\n\nexport function getAssociatedPoolKeys({\n  version,\n  marketVersion,\n  marketId,\n  baseMint,\n  quoteMint,\n  baseDecimals,\n  quoteDecimals,\n  programId,\n  marketProgramId,\n}: {\n  version: 4 | 5;\n  marketVersion: 3;\n  marketId: PublicKey;\n  baseMint: PublicKey;\n  quoteMint: PublicKey;\n  baseDecimals: number;\n  quoteDecimals: number;\n  programId: PublicKey;\n  marketProgramId: PublicKey;\n}): LiquidityPoolKeys {\n  const id = getLiquidityAssociatedId({ name: \"amm_associated_seed\", programId, marketId });\n  const lpMint = getLiquidityAssociatedId({ name: \"lp_mint_associated_seed\", programId, marketId });\n  const { publicKey: authority, nonce } = getLiquidityAssociatedAuthority({ programId });\n  const baseVault = getLiquidityAssociatedId({ name: \"coin_vault_associated_seed\", programId, marketId });\n  const quoteVault = getLiquidityAssociatedId({ name: \"pc_vault_associated_seed\", programId, marketId });\n  const lpVault = getLiquidityAssociatedId({ name: \"temp_lp_token_associated_seed\", programId, marketId });\n  const openOrders = getAssociatedOpenOrders({ programId, marketId });\n  const targetOrders = getLiquidityAssociatedId({ name: \"target_associated_seed\", programId, marketId });\n  const withdrawQueue = getLiquidityAssociatedId({ name: \"withdraw_associated_seed\", programId, marketId });\n\n  const { publicKey: marketAuthority } = getSerumAssociatedAuthority({\n    programId: marketProgramId,\n    marketId,\n  });\n\n  return {\n    // base\n    id,\n    baseMint,\n    quoteMint,\n    lpMint,\n    baseDecimals,\n    quoteDecimals,\n    lpDecimals: baseDecimals,\n    // version\n    version,\n    programId,\n    // keys\n    authority,\n    nonce,\n    baseVault,\n    quoteVault,\n    lpVault,\n    openOrders,\n    targetOrders,\n    withdrawQueue,\n    // market version\n    marketVersion,\n    marketProgramId,\n    // market keys\n    marketId,\n    marketAuthority,\n    lookupTableAccount: PublicKey.default,\n    configId: getAssociatedConfigId({ programId }),\n  };\n}\n\nlet stableLayout: StableLayout | undefined;\n\nexport async function fetchMultipleInfo({\n  connection,\n  poolKeysList,\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  config,\n}: {\n  connection: Connection;\n  poolKeysList: (AmmV4Keys | AmmV5Keys)[];\n  config: any;\n}): Promise<\n  {\n    status: BN;\n    baseDecimals: number;\n    quoteDecimals: number;\n    lpDecimals: number;\n    baseReserve: BN;\n    quoteReserve: BN;\n    lpSupply: BN;\n    startTime: BN;\n  }[]\n> {\n  if (!stableLayout) {\n    stableLayout = new StableLayout({ connection });\n    await stableLayout.initStableModelLayout();\n  }\n\n  const instructions = poolKeysList.map((pool) => makeSimulatePoolInfoInstruction({ poolKeys: pool }));\n  const logs = await simulateMultipleInstruction(\n    connection,\n    instructions.map((i) => i.instruction),\n    \"GetPoolData\",\n  );\n\n  const poolsInfo = logs.map((log) => {\n    const json = parseSimulateLogToJson(log, \"GetPoolData\");\n\n    const status = new BN(parseSimulateValue(json, \"status\"));\n    const baseDecimals = Number(parseSimulateValue(json, \"coin_decimals\"));\n    const quoteDecimals = Number(parseSimulateValue(json, \"pc_decimals\"));\n    const lpDecimals = Number(parseSimulateValue(json, \"lp_decimals\"));\n    const baseReserve = new BN(parseSimulateValue(json, \"pool_coin_amount\"));\n    const quoteReserve = new BN(parseSimulateValue(json, \"pool_pc_amount\"));\n    const lpSupply = new BN(parseSimulateValue(json, \"pool_lp_supply\"));\n    // TODO fix it when split stable\n    let startTime = \"0\";\n    try {\n      startTime = parseSimulateValue(json, \"pool_open_time\");\n    } catch (error) {\n      //\n    }\n\n    return {\n      status,\n      baseDecimals,\n      quoteDecimals,\n      lpDecimals,\n      baseReserve,\n      quoteReserve,\n      lpSupply,\n      startTime: new BN(startTime),\n    };\n  });\n\n  return poolsInfo;\n}\n","import { PublicKey } from \"@solana/web3.js\";\nimport { LIQUIDITY_VERSION_TO_SERUM_VERSION } from \"./constant\";\nimport { SerumVersion } from \"../serum\";\nimport { createLogger } from \"@/common/logger\";\n\nconst logger = createLogger(\"Raydium_liquidity_serum\");\n\nexport function getSerumVersion(version: number): SerumVersion {\n  const serumVersion = LIQUIDITY_VERSION_TO_SERUM_VERSION[version];\n  if (!serumVersion) logger.logWithError(\"invalid version\", \"version\", version);\n\n  return serumVersion;\n}\n\nexport function getSerumAssociatedAuthority({ programId, marketId }: { programId: PublicKey; marketId: PublicKey }): {\n  publicKey: PublicKey;\n  nonce: number;\n} {\n  const seeds = [marketId.toBuffer()];\n\n  let nonce = 0;\n  let publicKey: PublicKey;\n\n  while (nonce < 100) {\n    try {\n      const seedsWithNonce = seeds.concat(Buffer.from([nonce]), Buffer.alloc(7));\n      publicKey = PublicKey.createProgramAddressSync(seedsWithNonce, programId);\n    } catch (err) {\n      if (err instanceof TypeError) {\n        throw err;\n      }\n      nonce++;\n      continue;\n    }\n    return { publicKey, nonce };\n  }\n\n  logger.logWithError(\"unable to find a viable program address nonce\", \"params\", {\n    programId,\n    marketId,\n  });\n  throw new Error(\"unable to find a viable program address nonce\");\n}\n","import BN from \"bn.js\";\nimport { SerumVersion } from \"../serum\";\n\nexport const LIQUIDITY_FEES_NUMERATOR = new BN(25);\nexport const LIQUIDITY_FEES_DENOMINATOR = new BN(10000);\n\n// liquidity version => serum version\nexport const LIQUIDITY_VERSION_TO_SERUM_VERSION: {\n  [key in 4 | 5]?: SerumVersion;\n} = {\n  4: 3,\n  5: 3,\n};\n","import { PublicKey } from \"@solana/web3.js\";\nimport Decimal from \"decimal.js\";\nimport { InstructionType, WSOLMint } from \"@/common\";\nimport { ApiV3PoolInfoConcentratedItem, ClmmKeys } from \"@/api/type\";\nimport { MakeTxData, MakeMultiTxData } from \"@/common/txTool/txTool\";\nimport { TxVersion } from \"@/common/txTool/txType\";\nimport { getATAAddress } from \"@/common\";\nimport ModuleBase, { ModuleBaseProps } from \"../moduleBase\";\nimport { mockV3CreatePoolInfo, MIN_SQRT_PRICE_X64, MAX_SQRT_PRICE_X64 } from \"./utils/constants\";\nimport { SqrtPriceMath } from \"./utils/math\";\nimport {\n  CreateConcentratedPool,\n  IncreasePositionFromLiquidity,\n  IncreasePositionFromBase,\n  DecreaseLiquidity,\n  OpenPositionFromBase,\n  OpenPositionFromLiquidity,\n  InitRewardParams,\n  InitRewardsParams,\n  SetRewardParams,\n  SetRewardsParams,\n  CollectRewardParams,\n  CollectRewardsParams,\n  ManipulateLiquidityExtInfo,\n  OpenPositionFromLiquidityExtInfo,\n  OpenPositionFromBaseExtInfo,\n  ClosePositionExtInfo,\n  InitRewardExtInfo,\n  HarvestAllRewardsParams,\n} from \"./type\";\nimport { ClmmInstrument } from \"./instrument\";\nimport { MakeTransaction } from \"../type\";\nimport { MathUtil } from \"./utils/math\";\nimport { getPdaOperationAccount, getPdaPersonalPositionAddress } from \"./utils/pda\";\nimport { ClmmPositionLayout, OperationLayout, PositionInfoLayout, PoolInfoLayout } from \"./layout\";\nimport BN from \"bn.js\";\n\nexport class Clmm extends ModuleBase {\n  constructor(params: ModuleBaseProps) {\n    super(params);\n  }\n\n  public async getClmmPoolKeys(poolId: string): Promise<ClmmKeys> {\n    return ((await this.scope.api.fetchPoolKeysById({ idList: [poolId] })) as ClmmKeys[])[0];\n  }\n\n  public async createPool<T extends TxVersion>(\n    props: CreateConcentratedPool<T>,\n  ): Promise<MakeTxData<T, { mockPoolInfo: ApiV3PoolInfoConcentratedItem; address: ClmmKeys }>> {\n    const {\n      programId,\n      owner = this.scope.owner?.publicKey || PublicKey.default,\n      mint1,\n      mint2,\n      ammConfig,\n      initialPrice,\n      startTime,\n      computeBudgetConfig,\n      forerunCreate,\n      txVersion,\n    } = props;\n    const txBuilder = this.createTxBuilder();\n    const [mintA, mintB, initPrice] = new BN(new PublicKey(mint1.address).toBuffer()).gt(\n      new BN(new PublicKey(mint2.address).toBuffer()),\n    )\n      ? [mint2, mint1, new Decimal(1).div(initialPrice)]\n      : [mint1, mint2, initialPrice];\n\n    const initialPriceX64 = SqrtPriceMath.priceToSqrtPriceX64(initPrice, mintA.decimals, mintB.decimals);\n\n    const insInfo = await ClmmInstrument.createPoolInstructions({\n      connection: this.scope.connection,\n      programId,\n      owner,\n      mintA,\n      mintB,\n      ammConfigId: ammConfig.id,\n      initialPriceX64,\n      startTime,\n      forerunCreate,\n    });\n\n    txBuilder.addInstruction(insInfo);\n    txBuilder.addCustomComputeBudget(computeBudgetConfig);\n\n    return txBuilder.versionBuild<{\n      mockPoolInfo: ApiV3PoolInfoConcentratedItem;\n      address: ClmmKeys;\n      forerunCreate?: boolean;\n    }>({\n      txVersion,\n      extInfo: {\n        address: {\n          ...insInfo.address,\n          programId: programId.toString(),\n          id: insInfo.address.poolId.toString(),\n          mintA,\n          mintB,\n          openTime: startTime.toString(),\n          vault: { A: insInfo.address.mintAVault.toString(), B: insInfo.address.mintBVault.toString() },\n          rewardInfos: [],\n          config: {\n            id: ammConfig.id.toString(),\n            index: ammConfig.index,\n            protocolFeeRate: ammConfig.protocolFeeRate,\n            tradeFeeRate: ammConfig.tradeFeeRate,\n            tickSpacing: ammConfig.tickSpacing,\n            fundFeeRate: ammConfig.fundFeeRate,\n            description: ammConfig.description,\n            defaultRange: 0,\n            defaultRangePoint: [],\n          },\n        },\n        mockPoolInfo: {\n          type: \"Concentrated\",\n          rewardDefaultPoolInfos: \"Clmm\",\n          id: insInfo.address.poolId.toString(),\n          mintA,\n          mintB,\n          feeRate: ammConfig.tradeFeeRate,\n          openTime: startTime.toString(),\n          programId: programId.toString(),\n          price: initPrice.toNumber(),\n          config: {\n            id: ammConfig.id.toString(),\n            index: ammConfig.index,\n            protocolFeeRate: ammConfig.protocolFeeRate,\n            tradeFeeRate: ammConfig.tradeFeeRate,\n            tickSpacing: ammConfig.tickSpacing,\n            fundFeeRate: ammConfig.fundFeeRate,\n            description: ammConfig.description,\n            defaultRange: 0,\n            defaultRangePoint: [],\n          },\n          ...mockV3CreatePoolInfo,\n        },\n        forerunCreate,\n      },\n    }) as Promise<MakeTxData<T, { mockPoolInfo: ApiV3PoolInfoConcentratedItem; address: ClmmKeys }>>;\n  }\n\n  public async openPositionFromBase<T extends TxVersion>({\n    poolInfo,\n    poolKeys: propPoolKeys,\n    ownerInfo,\n    tickLower,\n    tickUpper,\n    base,\n    baseAmount,\n    otherAmountMax,\n    associatedOnly = true,\n    checkCreateATAOwner = false,\n    withMetadata = \"create\",\n    getEphemeralSigners,\n    computeBudgetConfig,\n    txVersion,\n  }: OpenPositionFromBase<T>): Promise<MakeTxData<T, OpenPositionFromBaseExtInfo>> {\n    if (this.scope.availability.addConcentratedPosition === false)\n      this.logAndCreateError(\"add position feature disabled in your region\");\n\n    this.scope.checkOwner();\n    const txBuilder = this.createTxBuilder();\n\n    let ownerTokenAccountA: PublicKey | null = null;\n    let ownerTokenAccountB: PublicKey | null = null;\n    const mintAUseSOLBalance = ownerInfo.useSOLBalance && poolInfo.mintA.address === WSOLMint.toString();\n    const mintBUseSOLBalance = ownerInfo.useSOLBalance && poolInfo.mintB.address === WSOLMint.toString();\n    const [amountA, amountB] = base === \"MintA\" ? [baseAmount, otherAmountMax] : [otherAmountMax, baseAmount];\n\n    const { account: _ownerTokenAccountA, instructionParams: _tokenAccountAInstruction } =\n      await this.scope.account.getOrCreateTokenAccount({\n        tokenProgram: poolInfo.mintA.programId,\n        mint: new PublicKey(poolInfo.mintA.address),\n        owner: this.scope.ownerPubKey,\n\n        createInfo:\n          mintAUseSOLBalance || amountA.isZero()\n            ? {\n                payer: this.scope.ownerPubKey,\n                amount: amountA,\n              }\n            : undefined,\n        skipCloseAccount: !mintAUseSOLBalance,\n        notUseTokenAccount: mintAUseSOLBalance,\n        associatedOnly: mintAUseSOLBalance ? false : associatedOnly,\n        checkCreateATAOwner,\n      });\n    if (_ownerTokenAccountA) ownerTokenAccountA = _ownerTokenAccountA;\n    txBuilder.addInstruction(_tokenAccountAInstruction || {});\n\n    const { account: _ownerTokenAccountB, instructionParams: _tokenAccountBInstruction } =\n      await this.scope.account.getOrCreateTokenAccount({\n        tokenProgram: poolInfo.mintB.programId,\n        mint: new PublicKey(poolInfo.mintB.address),\n        owner: this.scope.ownerPubKey,\n\n        createInfo:\n          mintBUseSOLBalance || amountB.isZero()\n            ? {\n                payer: this.scope.ownerPubKey!,\n                amount: amountB,\n              }\n            : undefined,\n        skipCloseAccount: !mintBUseSOLBalance,\n        notUseTokenAccount: mintBUseSOLBalance,\n        associatedOnly: mintBUseSOLBalance ? false : associatedOnly,\n        checkCreateATAOwner,\n      });\n    if (_ownerTokenAccountB) ownerTokenAccountB = _ownerTokenAccountB;\n    txBuilder.addInstruction(_tokenAccountBInstruction || {});\n\n    if (!ownerTokenAccountA || !ownerTokenAccountB)\n      this.logAndCreateError(\"cannot found target token accounts\", \"tokenAccounts\", this.scope.account.tokenAccounts);\n\n    const poolKeys = propPoolKeys || (await this.getClmmPoolKeys(poolInfo.id));\n    const insInfo = await ClmmInstrument.openPositionFromBaseInstructions({\n      poolInfo,\n      poolKeys,\n      ownerInfo: {\n        ...ownerInfo,\n        feePayer: this.scope.ownerPubKey,\n        wallet: this.scope.ownerPubKey,\n        tokenAccountA: ownerTokenAccountA!,\n        tokenAccountB: ownerTokenAccountB!,\n      },\n      tickLower,\n      tickUpper,\n      base,\n      baseAmount,\n      otherAmountMax,\n      withMetadata,\n      getEphemeralSigners,\n    });\n\n    txBuilder.addInstruction(insInfo);\n    txBuilder.addCustomComputeBudget(computeBudgetConfig);\n    return txBuilder.versionBuild<OpenPositionFromBaseExtInfo>({ txVersion, extInfo: insInfo.address }) as Promise<\n      MakeTxData<T, OpenPositionFromBaseExtInfo>\n    >;\n  }\n\n  public async openPositionFromLiquidity<T extends TxVersion>({\n    poolInfo,\n    poolKeys: propPoolKeys,\n    ownerInfo,\n    amountMaxA,\n    amountMaxB,\n    tickLower,\n    tickUpper,\n    liquidity,\n    associatedOnly = true,\n    checkCreateATAOwner = false,\n    withMetadata = \"create\",\n    txVersion,\n    getEphemeralSigners,\n  }: OpenPositionFromLiquidity<T>): Promise<MakeTxData<T, OpenPositionFromLiquidityExtInfo>> {\n    if (this.scope.availability.createConcentratedPosition === false)\n      this.logAndCreateError(\"open position feature disabled in your region\");\n    const txBuilder = this.createTxBuilder();\n\n    let ownerTokenAccountA: PublicKey | null = null;\n    let ownerTokenAccountB: PublicKey | null = null;\n    const mintAUseSOLBalance = ownerInfo.useSOLBalance && poolInfo.mintA.address === WSOLMint.toBase58();\n    const mintBUseSOLBalance = ownerInfo.useSOLBalance && poolInfo.mintB.address === WSOLMint.toBase58();\n\n    const { account: _ownerTokenAccountA, instructionParams: _tokenAccountAInstruction } =\n      await this.scope.account.getOrCreateTokenAccount({\n        tokenProgram: poolInfo.mintA.programId,\n        mint: new PublicKey(poolInfo.mintA.address),\n        owner: this.scope.ownerPubKey,\n\n        createInfo: mintAUseSOLBalance\n          ? {\n              payer: this.scope.ownerPubKey,\n              amount: amountMaxA,\n            }\n          : undefined,\n\n        skipCloseAccount: !mintAUseSOLBalance,\n        notUseTokenAccount: mintAUseSOLBalance,\n        associatedOnly: mintAUseSOLBalance ? false : associatedOnly,\n        checkCreateATAOwner,\n      });\n    if (_ownerTokenAccountA) ownerTokenAccountA = _ownerTokenAccountA;\n    txBuilder.addInstruction(_tokenAccountAInstruction || {});\n\n    const { account: _ownerTokenAccountB, instructionParams: _tokenAccountBInstruction } =\n      await this.scope.account.getOrCreateTokenAccount({\n        tokenProgram: poolInfo.mintB.programId,\n        mint: new PublicKey(poolInfo.mintB.address),\n        owner: this.scope.ownerPubKey,\n\n        createInfo: mintBUseSOLBalance\n          ? {\n              payer: this.scope.ownerPubKey!,\n              amount: amountMaxB,\n            }\n          : undefined,\n        skipCloseAccount: !mintBUseSOLBalance,\n        notUseTokenAccount: mintBUseSOLBalance,\n        associatedOnly: mintBUseSOLBalance ? false : associatedOnly,\n        checkCreateATAOwner,\n      });\n    if (_ownerTokenAccountB) ownerTokenAccountB = _ownerTokenAccountB;\n    txBuilder.addInstruction(_tokenAccountBInstruction || {});\n\n    if (ownerTokenAccountA === undefined || ownerTokenAccountB === undefined)\n      this.logAndCreateError(\"cannot found target token accounts\", \"tokenAccounts\", this.scope.account.tokenAccounts);\n\n    const poolKeys = propPoolKeys || (await this.getClmmPoolKeys(poolInfo.id));\n\n    const makeOpenPositionInstructions = await ClmmInstrument.openPositionFromLiquidityInstructions({\n      poolInfo,\n      poolKeys,\n      ownerInfo: {\n        wallet: this.scope.ownerPubKey,\n        tokenAccountA: ownerTokenAccountA!,\n        tokenAccountB: ownerTokenAccountB!,\n      },\n      tickLower,\n      tickUpper,\n      liquidity,\n      amountMaxA,\n      amountMaxB,\n      withMetadata,\n      getEphemeralSigners,\n    });\n    txBuilder.addInstruction(makeOpenPositionInstructions);\n\n    return txBuilder.versionBuild<OpenPositionFromLiquidityExtInfo>({\n      txVersion,\n      extInfo: { address: makeOpenPositionInstructions.address },\n    }) as Promise<MakeTxData<T, OpenPositionFromLiquidityExtInfo>>;\n  }\n\n  public async increasePositionFromLiquidity<T extends TxVersion>(\n    props: IncreasePositionFromLiquidity<T>,\n  ): Promise<MakeTxData<T, ManipulateLiquidityExtInfo>> {\n    const {\n      poolInfo,\n      ownerPosition,\n      amountMaxA,\n      amountMaxB,\n      liquidity,\n      ownerInfo,\n      associatedOnly = true,\n      checkCreateATAOwner = false,\n      computeBudgetConfig,\n      txVersion,\n    } = props;\n    const txBuilder = this.createTxBuilder();\n\n    let ownerTokenAccountA: PublicKey | undefined = undefined;\n    let ownerTokenAccountB: PublicKey | undefined = undefined;\n\n    const mintAUseSOLBalance = ownerInfo.useSOLBalance && poolInfo.mintA.address === WSOLMint.toString();\n    const mintBUseSOLBalance = ownerInfo.useSOLBalance && poolInfo.mintB.address === WSOLMint.toString();\n    const { account: _ownerTokenAccountA, instructionParams: _tokenAccountAInstruction } =\n      await this.scope.account.getOrCreateTokenAccount({\n        tokenProgram: poolInfo.mintA.programId,\n        mint: new PublicKey(poolInfo.mintA.address),\n        notUseTokenAccount: mintAUseSOLBalance,\n        owner: this.scope.ownerPubKey,\n\n        createInfo: mintAUseSOLBalance\n          ? {\n              payer: this.scope.ownerPubKey,\n              amount: amountMaxA,\n            }\n          : undefined,\n        skipCloseAccount: !mintAUseSOLBalance,\n        associatedOnly: mintAUseSOLBalance ? false : associatedOnly,\n        checkCreateATAOwner,\n      });\n    if (_ownerTokenAccountA) ownerTokenAccountA = _ownerTokenAccountA;\n    txBuilder.addInstruction(_tokenAccountAInstruction || {});\n    const { account: _ownerTokenAccountB, instructionParams: _tokenAccountBInstruction } =\n      await this.scope.account.getOrCreateTokenAccount({\n        tokenProgram: poolInfo.mintB.programId,\n        mint: new PublicKey(poolInfo.mintB.address),\n        owner: this.scope.ownerPubKey,\n\n        createInfo: mintBUseSOLBalance\n          ? {\n              payer: this.scope.ownerPubKey!,\n              amount: amountMaxB,\n            }\n          : undefined,\n        notUseTokenAccount: mintBUseSOLBalance,\n        skipCloseAccount: !mintBUseSOLBalance,\n        associatedOnly: mintBUseSOLBalance ? false : associatedOnly,\n        checkCreateATAOwner,\n      });\n    if (_ownerTokenAccountB) ownerTokenAccountB = _ownerTokenAccountB;\n    txBuilder.addInstruction(_tokenAccountBInstruction || {});\n\n    if (!ownerTokenAccountA && !ownerTokenAccountB)\n      this.logAndCreateError(\"cannot found target token accounts\", \"tokenAccounts\", this.scope.account.tokenAccounts);\n    const poolKeys = await this.getClmmPoolKeys(poolInfo.id);\n    const ins = ClmmInstrument.increasePositionFromLiquidityInstructions({\n      poolInfo,\n      poolKeys,\n      ownerPosition,\n      ownerInfo: {\n        wallet: this.scope.ownerPubKey,\n        tokenAccountA: ownerTokenAccountA!,\n        tokenAccountB: ownerTokenAccountB!,\n      },\n      liquidity,\n      amountMaxA,\n      amountMaxB,\n    });\n    txBuilder.addInstruction(ins);\n    txBuilder.addCustomComputeBudget(computeBudgetConfig);\n    return txBuilder.versionBuild<ManipulateLiquidityExtInfo>({\n      txVersion,\n      extInfo: { address: ins.address },\n    }) as Promise<MakeTxData<T, ManipulateLiquidityExtInfo>>;\n  }\n\n  public async increasePositionFromBase<T extends TxVersion>(\n    props: IncreasePositionFromBase<T>,\n  ): Promise<MakeTxData<T, ManipulateLiquidityExtInfo>> {\n    const {\n      poolInfo,\n      ownerPosition,\n      base,\n      baseAmount,\n      otherAmountMax,\n      ownerInfo,\n      associatedOnly = true,\n      checkCreateATAOwner = false,\n      computeBudgetConfig,\n      txVersion,\n    } = props;\n    const txBuilder = this.createTxBuilder();\n\n    let ownerTokenAccountA: PublicKey | undefined = undefined;\n    let ownerTokenAccountB: PublicKey | undefined = undefined;\n    const mintAUseSOLBalance = ownerInfo.useSOLBalance && poolInfo.mintA.address === WSOLMint.toString();\n    const mintBUseSOLBalance = ownerInfo.useSOLBalance && poolInfo.mintB.address === WSOLMint.toString();\n\n    const { account: _ownerTokenAccountA, instructionParams: _tokenAccountAInstruction } =\n      await this.scope.account.getOrCreateTokenAccount({\n        tokenProgram: poolInfo.mintA.programId,\n        mint: new PublicKey(poolInfo.mintA.address),\n        notUseTokenAccount: mintAUseSOLBalance,\n        owner: this.scope.ownerPubKey,\n\n        createInfo: mintAUseSOLBalance\n          ? {\n              payer: this.scope.ownerPubKey,\n              amount: base === \"MintA\" ? baseAmount : otherAmountMax,\n            }\n          : undefined,\n        skipCloseAccount: !mintAUseSOLBalance,\n        associatedOnly: mintAUseSOLBalance ? false : associatedOnly,\n        checkCreateATAOwner,\n      });\n    if (_ownerTokenAccountA) ownerTokenAccountA = _ownerTokenAccountA;\n    txBuilder.addInstruction(_tokenAccountAInstruction || {});\n\n    const { account: _ownerTokenAccountB, instructionParams: _tokenAccountBInstruction } =\n      await this.scope.account.getOrCreateTokenAccount({\n        tokenProgram: poolInfo.mintB.programId,\n        mint: new PublicKey(poolInfo.mintB.address),\n        owner: this.scope.ownerPubKey,\n\n        createInfo: mintBUseSOLBalance\n          ? {\n              payer: this.scope.ownerPubKey!,\n              amount: base === \"MintA\" ? otherAmountMax : baseAmount,\n            }\n          : undefined,\n        notUseTokenAccount: mintBUseSOLBalance,\n        skipCloseAccount: !mintBUseSOLBalance,\n        associatedOnly: mintBUseSOLBalance ? false : associatedOnly,\n        checkCreateATAOwner,\n      });\n    if (_ownerTokenAccountB) ownerTokenAccountB = _ownerTokenAccountB;\n    txBuilder.addInstruction(_tokenAccountBInstruction || {});\n    if (!ownerTokenAccountA && !ownerTokenAccountB)\n      this.logAndCreateError(\"cannot found target token accounts\", \"tokenAccounts\", this.scope.account.tokenAccounts);\n\n    const poolKeys = await this.getClmmPoolKeys(poolInfo.id);\n    const ins = ClmmInstrument.increasePositionFromBaseInstructions({\n      poolInfo,\n      poolKeys,\n      ownerPosition,\n      ownerInfo: {\n        wallet: this.scope.ownerPubKey,\n        tokenAccountA: ownerTokenAccountA!,\n        tokenAccountB: ownerTokenAccountB!,\n      },\n      base,\n      baseAmount,\n      otherAmountMax,\n    });\n    txBuilder.addInstruction(ins);\n    txBuilder.addCustomComputeBudget(computeBudgetConfig);\n\n    return txBuilder.versionBuild<ManipulateLiquidityExtInfo>({\n      txVersion,\n      extInfo: { address: ins.address },\n    }) as Promise<MakeTxData<T, ManipulateLiquidityExtInfo>>;\n  }\n\n  public async decreaseLiquidity<T extends TxVersion>(\n    props: DecreaseLiquidity<T>,\n  ): Promise<MakeTxData<T, ManipulateLiquidityExtInfo & Partial<ClosePositionExtInfo>>> {\n    const {\n      poolInfo,\n      ownerPosition,\n      ownerInfo,\n      amountMinA,\n      amountMinB,\n      liquidity,\n      associatedOnly = true,\n      checkCreateATAOwner = false,\n      computeBudgetConfig,\n      txVersion,\n    } = props;\n    if (this.scope.availability.removeConcentratedPosition === false)\n      this.logAndCreateError(\"remove position feature disabled in your region\");\n    const txBuilder = this.createTxBuilder();\n\n    const mintAUseSOLBalance = ownerInfo.useSOLBalance && poolInfo.mintA.address === WSOLMint.toString();\n    const mintBUseSOLBalance = ownerInfo.useSOLBalance && poolInfo.mintB.address === WSOLMint.toString();\n\n    let ownerTokenAccountA: PublicKey | undefined = undefined;\n    let ownerTokenAccountB: PublicKey | undefined = undefined;\n    const { account: _ownerTokenAccountA, instructionParams: accountAInstructions } =\n      await this.scope.account.getOrCreateTokenAccount({\n        tokenProgram: poolInfo.mintA.programId,\n        mint: new PublicKey(poolInfo.mintA.address),\n        notUseTokenAccount: mintAUseSOLBalance,\n        owner: this.scope.ownerPubKey,\n        createInfo: {\n          payer: this.scope.ownerPubKey,\n          amount: 0,\n        },\n        skipCloseAccount: !mintAUseSOLBalance,\n        associatedOnly: mintAUseSOLBalance ? false : associatedOnly,\n        checkCreateATAOwner,\n      });\n    ownerTokenAccountA = _ownerTokenAccountA;\n    accountAInstructions && txBuilder.addInstruction(accountAInstructions);\n\n    const { account: _ownerTokenAccountB, instructionParams: accountBInstructions } =\n      await this.scope.account.getOrCreateTokenAccount({\n        tokenProgram: poolInfo.mintB.programId,\n        mint: new PublicKey(poolInfo.mintB.address),\n        notUseTokenAccount: mintBUseSOLBalance,\n        owner: this.scope.ownerPubKey,\n        createInfo: {\n          payer: this.scope.ownerPubKey,\n          amount: 0,\n        },\n        skipCloseAccount: !mintBUseSOLBalance,\n        associatedOnly: mintBUseSOLBalance ? false : associatedOnly,\n        checkCreateATAOwner,\n      });\n    ownerTokenAccountB = _ownerTokenAccountB;\n    accountBInstructions && txBuilder.addInstruction(accountBInstructions);\n\n    const rewardAccounts: PublicKey[] = [];\n    for (const itemReward of poolInfo.rewardDefaultInfos) {\n      const rewardUseSOLBalance = ownerInfo.useSOLBalance && itemReward.mint.address === WSOLMint.toString();\n\n      let ownerRewardAccount: PublicKey | undefined;\n\n      if (itemReward.mint.address === poolInfo.mintA.address) ownerRewardAccount = ownerTokenAccountA;\n      else if (itemReward.mint.address === poolInfo.mintB.address) ownerRewardAccount = ownerTokenAccountB;\n      else {\n        const { account: _ownerRewardAccount, instructionParams: ownerRewardAccountInstructions } =\n          await this.scope.account.getOrCreateTokenAccount({\n            tokenProgram: new PublicKey(itemReward.mint.programId),\n            mint: new PublicKey(itemReward.mint.address),\n            notUseTokenAccount: rewardUseSOLBalance,\n            owner: this.scope.ownerPubKey,\n            createInfo: {\n              payer: this.scope.ownerPubKey,\n              amount: 0,\n            },\n            skipCloseAccount: !rewardUseSOLBalance,\n            associatedOnly: rewardUseSOLBalance ? false : associatedOnly,\n            checkCreateATAOwner,\n          });\n        ownerRewardAccount = _ownerRewardAccount;\n        ownerRewardAccountInstructions && txBuilder.addInstruction(ownerRewardAccountInstructions);\n      }\n\n      rewardAccounts.push(ownerRewardAccount!);\n    }\n\n    if (!ownerTokenAccountA && !ownerTokenAccountB)\n      this.logAndCreateError(\n        \"cannot found target token accounts\",\n        \"tokenAccounts\",\n        this.scope.account.tokenAccountRawInfos,\n      );\n\n    const poolKeys = await this.getClmmPoolKeys(poolInfo.id);\n\n    const decreaseInsInfo = await ClmmInstrument.decreaseLiquidityInstructions({\n      poolInfo,\n      poolKeys,\n      ownerPosition,\n      ownerInfo: {\n        wallet: this.scope.ownerPubKey,\n        tokenAccountA: ownerTokenAccountA!,\n        tokenAccountB: ownerTokenAccountB!,\n        rewardAccounts,\n      },\n      liquidity,\n      amountMinA,\n      amountMinB,\n    });\n\n    txBuilder.addInstruction({\n      instructions: decreaseInsInfo.instructions,\n      instructionTypes: [InstructionType.ClmmDecreasePosition],\n    });\n\n    let extInfo = { ...decreaseInsInfo.address };\n    if (ownerInfo.closePosition) {\n      const closeInsInfo = await ClmmInstrument.closePositionInstructions({\n        poolInfo,\n        poolKeys,\n        ownerInfo: { wallet: this.scope.ownerPubKey },\n        ownerPosition,\n      });\n      txBuilder.addInstruction({\n        endInstructions: closeInsInfo.instructions,\n        endInstructionTypes: closeInsInfo.instructionTypes,\n      });\n      extInfo = { ...extInfo, ...closeInsInfo.address };\n    }\n    txBuilder.addCustomComputeBudget(computeBudgetConfig);\n\n    return txBuilder.versionBuild<ManipulateLiquidityExtInfo>({\n      txVersion,\n      extInfo: { address: extInfo },\n    }) as Promise<MakeTxData<T, ManipulateLiquidityExtInfo>>;\n  }\n\n  public async closePosition<T extends TxVersion>({\n    poolInfo,\n    ownerPosition,\n    txVersion,\n  }: {\n    poolInfo: ApiV3PoolInfoConcentratedItem;\n    ownerPosition: ClmmPositionLayout;\n    txVersion: T;\n  }): Promise<MakeTxData<T, ClosePositionExtInfo>> {\n    if (this.scope.availability.removeConcentratedPosition === false)\n      this.logAndCreateError(\"remove position feature disabled in your region\");\n    const txBuilder = this.createTxBuilder();\n    const poolKeys = await this.getClmmPoolKeys(poolInfo.id);\n    const ins = ClmmInstrument.closePositionInstructions({\n      poolInfo,\n      poolKeys,\n      ownerInfo: { wallet: this.scope.ownerPubKey },\n      ownerPosition,\n    });\n\n    return txBuilder.addInstruction(ins).versionBuild<ClosePositionExtInfo>({\n      txVersion,\n      extInfo: { address: ins.address },\n    }) as Promise<MakeTxData<T, ClosePositionExtInfo>>;\n  }\n\n  public async initReward<T extends TxVersion>({\n    poolInfo,\n    ownerInfo,\n    rewardInfo,\n    associatedOnly = true,\n    checkCreateATAOwner = false,\n    computeBudgetConfig,\n    txVersion,\n  }: InitRewardParams<T>): Promise<MakeTxData<T, InitRewardExtInfo>> {\n    if (rewardInfo.endTime <= rewardInfo.openTime)\n      this.logAndCreateError(\"reward time error\", \"rewardInfo\", rewardInfo);\n\n    const txBuilder = this.createTxBuilder();\n\n    const rewardMintUseSOLBalance =\n      ownerInfo.useSOLBalance && rewardInfo.mint.address.toString() === WSOLMint.toString();\n    const _baseRewardAmount = rewardInfo.perSecond.mul(rewardInfo.endTime - rewardInfo.openTime);\n\n    const { account: ownerRewardAccount, instructionParams: ownerRewardAccountIns } =\n      await this.scope.account.getOrCreateTokenAccount({\n        tokenProgram: new PublicKey(rewardInfo.mint.address),\n        mint: new PublicKey(rewardInfo.mint.address),\n        notUseTokenAccount: !!rewardMintUseSOLBalance,\n        skipCloseAccount: !rewardMintUseSOLBalance,\n        owner: this.scope.ownerPubKey,\n        createInfo: rewardMintUseSOLBalance\n          ? {\n              payer: ownerInfo.feePayer || this.scope.ownerPubKey,\n              amount: new BN(\n                new Decimal(_baseRewardAmount.toFixed(0)).gte(_baseRewardAmount)\n                  ? _baseRewardAmount.toFixed(0)\n                  : _baseRewardAmount.add(1).toFixed(0),\n              ),\n            }\n          : undefined,\n        associatedOnly: rewardMintUseSOLBalance ? false : associatedOnly,\n        checkCreateATAOwner,\n      });\n    ownerRewardAccountIns && txBuilder.addInstruction(ownerRewardAccountIns);\n\n    if (!ownerRewardAccount)\n      this.logAndCreateError(\"no money\", \"ownerRewardAccount\", this.scope.account.tokenAccountRawInfos);\n    const poolKeys = await this.getClmmPoolKeys(poolInfo.id);\n    const insInfo = ClmmInstrument.initRewardInstructions({\n      poolInfo,\n      poolKeys,\n      ownerInfo: {\n        wallet: this.scope.ownerPubKey,\n        tokenAccount: ownerRewardAccount!,\n      },\n      rewardInfo: {\n        programId: new PublicKey(rewardInfo.mint.programId),\n        mint: new PublicKey(rewardInfo.mint.address),\n        openTime: rewardInfo.openTime,\n        endTime: rewardInfo.endTime,\n        emissionsPerSecondX64: MathUtil.decimalToX64(rewardInfo.perSecond),\n      },\n    });\n    txBuilder.addInstruction(insInfo);\n    txBuilder.addCustomComputeBudget(computeBudgetConfig);\n    return txBuilder.versionBuild<InitRewardExtInfo>({\n      txVersion,\n      extInfo: { address: insInfo.address },\n    }) as Promise<MakeTxData<T, InitRewardExtInfo>>;\n  }\n\n  public async initRewards<T extends TxVersion>({\n    poolInfo,\n    ownerInfo,\n    rewardInfos,\n    associatedOnly = true,\n    checkCreateATAOwner = false,\n    computeBudgetConfig,\n    txVersion,\n  }: InitRewardsParams<T>): Promise<MakeTxData<T, { address: Record<string, PublicKey> }>> {\n    for (const rewardInfo of rewardInfos) {\n      if (rewardInfo.endTime <= rewardInfo.openTime)\n        this.logAndCreateError(\"reward time error\", \"rewardInfo\", rewardInfo);\n    }\n\n    const txBuilder = this.createTxBuilder();\n    let address: Record<string, PublicKey> = {};\n\n    for (const rewardInfo of rewardInfos) {\n      const rewardMintUseSOLBalance = ownerInfo.useSOLBalance && rewardInfo.mint.address === WSOLMint.toString();\n      const _baseRewardAmount = rewardInfo.perSecond.mul(rewardInfo.endTime - rewardInfo.openTime);\n\n      const { account: ownerRewardAccount, instructionParams: ownerRewardAccountIns } =\n        await this.scope.account.getOrCreateTokenAccount({\n          tokenProgram: new PublicKey(rewardInfo.mint.programId),\n          mint: new PublicKey(rewardInfo.mint.address),\n          notUseTokenAccount: !!rewardMintUseSOLBalance,\n          skipCloseAccount: !rewardMintUseSOLBalance,\n          owner: this.scope.ownerPubKey,\n          createInfo: rewardMintUseSOLBalance\n            ? {\n                payer: ownerInfo.feePayer || this.scope.ownerPubKey,\n                amount: new BN(\n                  new Decimal(_baseRewardAmount.toFixed(0)).gte(_baseRewardAmount)\n                    ? _baseRewardAmount.toFixed(0)\n                    : _baseRewardAmount.add(1).toFixed(0),\n                ),\n              }\n            : undefined,\n          associatedOnly: rewardMintUseSOLBalance ? false : associatedOnly,\n          checkCreateATAOwner,\n        });\n      ownerRewardAccountIns && txBuilder.addInstruction(ownerRewardAccountIns);\n\n      if (!ownerRewardAccount)\n        this.logAndCreateError(\"no money\", \"ownerRewardAccount\", this.scope.account.tokenAccountRawInfos);\n\n      const poolKeys = await this.getClmmPoolKeys(poolInfo.id);\n      const insInfo = ClmmInstrument.initRewardInstructions({\n        poolInfo,\n        poolKeys,\n        ownerInfo: {\n          wallet: this.scope.ownerPubKey,\n          tokenAccount: ownerRewardAccount!,\n        },\n        rewardInfo: {\n          programId: new PublicKey(rewardInfo.mint.programId),\n          mint: new PublicKey(rewardInfo.mint.address),\n          openTime: rewardInfo.openTime,\n          endTime: rewardInfo.endTime,\n          emissionsPerSecondX64: MathUtil.decimalToX64(rewardInfo.perSecond),\n        },\n      });\n      address = {\n        ...address,\n        ...insInfo.address,\n      };\n      txBuilder.addInstruction(insInfo);\n    }\n    txBuilder.addCustomComputeBudget(computeBudgetConfig);\n    return txBuilder.versionBuild({\n      txVersion,\n      extInfo: { address },\n    }) as Promise<MakeTxData<T, { address: Record<string, PublicKey> }>>;\n  }\n\n  public async setReward<T extends TxVersion>({\n    poolInfo,\n    ownerInfo,\n    rewardInfo,\n    associatedOnly = true,\n    checkCreateATAOwner = false,\n    computeBudgetConfig,\n    txVersion,\n  }: SetRewardParams<T>): Promise<MakeTxData<T, { address: Record<string, PublicKey> }>> {\n    if (rewardInfo.endTime <= rewardInfo.openTime)\n      this.logAndCreateError(\"reward time error\", \"rewardInfo\", rewardInfo);\n\n    const txBuilder = this.createTxBuilder();\n    const rewardMintUseSOLBalance = ownerInfo.useSOLBalance && rewardInfo.mint.equals(WSOLMint);\n    const { account: ownerRewardAccount, instructionParams: ownerRewardIns } =\n      await this.scope.account.getOrCreateTokenAccount({\n        tokenProgram: rewardInfo.programId,\n        mint: rewardInfo.mint,\n        notUseTokenAccount: rewardMintUseSOLBalance,\n        owner: this.scope.ownerPubKey,\n        createInfo: rewardMintUseSOLBalance\n          ? {\n              payer: ownerInfo.feePayer || this.scope.ownerPubKey,\n              amount: new BN(\n                new Decimal(rewardInfo.perSecond.sub(rewardInfo.endTime - rewardInfo.openTime).toFixed(0)).gte(\n                  rewardInfo.perSecond.sub(rewardInfo.endTime - rewardInfo.openTime),\n                )\n                  ? rewardInfo.perSecond.sub(rewardInfo.endTime - rewardInfo.openTime).toFixed(0)\n                  : rewardInfo.perSecond\n                      .sub(rewardInfo.endTime - rewardInfo.openTime)\n                      .add(1)\n                      .toFixed(0),\n              ),\n            }\n          : undefined,\n\n        associatedOnly: rewardMintUseSOLBalance ? false : associatedOnly,\n        checkCreateATAOwner,\n      });\n    ownerRewardIns && txBuilder.addInstruction(ownerRewardIns);\n    if (!ownerRewardAccount)\n      this.logAndCreateError(\"no money\", \"ownerRewardAccount\", this.scope.account.tokenAccountRawInfos);\n    const poolKeys = await this.getClmmPoolKeys(poolInfo.id);\n    const insInfo = ClmmInstrument.setRewardInstructions({\n      poolInfo,\n      poolKeys,\n      ownerInfo: {\n        wallet: this.scope.ownerPubKey,\n        tokenAccount: ownerRewardAccount!,\n      },\n      rewardInfo: {\n        mint: rewardInfo.mint,\n        openTime: rewardInfo.openTime,\n        endTime: rewardInfo.endTime,\n        emissionsPerSecondX64: MathUtil.decimalToX64(rewardInfo.perSecond),\n      },\n    });\n\n    txBuilder.addInstruction(insInfo);\n    txBuilder.addCustomComputeBudget(computeBudgetConfig);\n    return txBuilder.versionBuild<{ address: Record<string, PublicKey> }>({\n      txVersion,\n      extInfo: { address: insInfo.address },\n    }) as Promise<MakeTxData<T, { address: Record<string, PublicKey> }>>;\n  }\n\n  public async setRewards<T extends TxVersion>({\n    poolInfo,\n    ownerInfo,\n    rewardInfos,\n    associatedOnly = true,\n    checkCreateATAOwner = false,\n    computeBudgetConfig,\n    txVersion,\n  }: SetRewardsParams<T>): Promise<MakeTxData<T, { address: Record<string, PublicKey> }>> {\n    const txBuilder = this.createTxBuilder();\n    let address: Record<string, PublicKey> = {};\n    for (const rewardInfo of rewardInfos) {\n      if (rewardInfo.endTime <= rewardInfo.openTime)\n        this.logAndCreateError(\"reward time error\", \"rewardInfo\", rewardInfo);\n\n      const rewardMintUseSOLBalance = ownerInfo.useSOLBalance && rewardInfo.mint.address === WSOLMint.toString();\n      const { account: ownerRewardAccount, instructionParams: ownerRewardIns } =\n        await this.scope.account.getOrCreateTokenAccount({\n          tokenProgram: new PublicKey(rewardInfo.mint.programId),\n          mint: new PublicKey(rewardInfo.mint.address),\n          notUseTokenAccount: rewardMintUseSOLBalance,\n          owner: this.scope.ownerPubKey,\n          createInfo: rewardMintUseSOLBalance\n            ? {\n                payer: ownerInfo.feePayer || this.scope.ownerPubKey,\n                amount: new BN(\n                  new Decimal(rewardInfo.perSecond.sub(rewardInfo.endTime - rewardInfo.openTime).toFixed(0)).gte(\n                    rewardInfo.perSecond.sub(rewardInfo.endTime - rewardInfo.openTime),\n                  )\n                    ? rewardInfo.perSecond.sub(rewardInfo.endTime - rewardInfo.openTime).toFixed(0)\n                    : rewardInfo.perSecond\n                        .sub(rewardInfo.endTime - rewardInfo.openTime)\n                        .add(1)\n                        .toFixed(0),\n                ),\n              }\n            : undefined,\n          associatedOnly: rewardMintUseSOLBalance ? false : associatedOnly,\n          checkCreateATAOwner,\n        });\n      ownerRewardIns && txBuilder.addInstruction(ownerRewardIns);\n      if (!ownerRewardAccount)\n        this.logAndCreateError(\"no money\", \"ownerRewardAccount\", this.scope.account.tokenAccountRawInfos);\n      const poolKeys = await this.getClmmPoolKeys(poolInfo.id);\n      const insInfo = ClmmInstrument.setRewardInstructions({\n        poolInfo,\n        poolKeys,\n        ownerInfo: {\n          wallet: this.scope.ownerPubKey,\n          tokenAccount: ownerRewardAccount!,\n        },\n        rewardInfo: {\n          mint: new PublicKey(rewardInfo.mint.address),\n          openTime: rewardInfo.openTime,\n          endTime: rewardInfo.endTime,\n          emissionsPerSecondX64: MathUtil.decimalToX64(rewardInfo.perSecond),\n        },\n      });\n      txBuilder.addInstruction(insInfo);\n      address = {\n        ...address,\n        ...insInfo.address,\n      };\n    }\n    txBuilder.addCustomComputeBudget(computeBudgetConfig);\n    return txBuilder.versionBuild<{ address: Record<string, PublicKey> }>({\n      txVersion,\n      extInfo: { address },\n    }) as Promise<MakeTxData<T, { address: Record<string, PublicKey> }>>;\n  }\n\n  public async collectReward({\n    poolInfo,\n    ownerInfo,\n    rewardMint,\n    associatedOnly = true,\n    checkCreateATAOwner = false,\n  }: CollectRewardParams): Promise<MakeTransaction> {\n    const rewardInfo = poolInfo!.rewardDefaultInfos.find((i) => i.mint.address === rewardMint.toString());\n    if (!rewardInfo) this.logAndCreateError(\"reward mint error\", \"not found reward mint\", rewardMint);\n\n    const txBuilder = this.createTxBuilder();\n    const rewardMintUseSOLBalance = ownerInfo.useSOLBalance && rewardMint.equals(WSOLMint);\n    const { account: ownerRewardAccount, instructionParams: ownerRewardIns } =\n      await this.scope.account.getOrCreateTokenAccount({\n        tokenProgram: new PublicKey(rewardInfo!.mint.programId),\n        mint: rewardMint,\n        notUseTokenAccount: rewardMintUseSOLBalance,\n        owner: this.scope.ownerPubKey,\n        skipCloseAccount: !rewardMintUseSOLBalance,\n        createInfo: {\n          payer: ownerInfo.feePayer || this.scope.ownerPubKey,\n          amount: 0,\n        },\n        associatedOnly: rewardMintUseSOLBalance ? false : associatedOnly,\n        checkCreateATAOwner,\n      });\n    ownerRewardIns && txBuilder.addInstruction(ownerRewardIns);\n\n    if (!ownerRewardAccount)\n      this.logAndCreateError(\"no money\", \"ownerRewardAccount\", this.scope.account.tokenAccountRawInfos);\n    const poolKeys = await this.getClmmPoolKeys(poolInfo.id);\n    const insInfo = ClmmInstrument.collectRewardInstructions({\n      poolInfo,\n      poolKeys,\n      ownerInfo: {\n        wallet: this.scope.ownerPubKey,\n        tokenAccount: ownerRewardAccount!,\n      },\n      rewardMint,\n    });\n    txBuilder.addInstruction(insInfo);\n\n    return txBuilder.build<{ address: Record<string, PublicKey> }>({ address: insInfo.address });\n  }\n\n  public async collectRewards({\n    poolInfo,\n    ownerInfo,\n    rewardMints,\n    associatedOnly = true,\n    checkCreateATAOwner = false,\n  }: CollectRewardsParams): Promise<MakeTransaction> {\n    const txBuilder = this.createTxBuilder();\n    let address: Record<string, PublicKey> = {};\n\n    for (const rewardMint of rewardMints) {\n      const rewardInfo = poolInfo!.rewardDefaultInfos.find((i) => i.mint.address === rewardMint.toString());\n      if (!rewardInfo) {\n        this.logAndCreateError(\"reward mint error\", \"not found reward mint\", rewardMint);\n        continue;\n      }\n\n      const rewardMintUseSOLBalance = ownerInfo.useSOLBalance && rewardMint.equals(WSOLMint);\n      const { account: ownerRewardAccount, instructionParams: ownerRewardIns } =\n        await this.scope.account.getOrCreateTokenAccount({\n          tokenProgram: new PublicKey(rewardInfo.mint.programId),\n          mint: rewardMint,\n          notUseTokenAccount: rewardMintUseSOLBalance,\n          owner: this.scope.ownerPubKey,\n          skipCloseAccount: !rewardMintUseSOLBalance,\n          createInfo: {\n            payer: ownerInfo.feePayer || this.scope.ownerPubKey,\n            amount: 0,\n          },\n          associatedOnly: rewardMintUseSOLBalance ? false : associatedOnly,\n          checkCreateATAOwner,\n        });\n      if (!ownerRewardAccount)\n        this.logAndCreateError(\"no money\", \"ownerRewardAccount\", this.scope.account.tokenAccountRawInfos);\n      ownerRewardIns && txBuilder.addInstruction(ownerRewardIns);\n      const poolKeys = await this.getClmmPoolKeys(poolInfo.id);\n      const insInfo = ClmmInstrument.collectRewardInstructions({\n        poolInfo,\n        poolKeys,\n        ownerInfo: {\n          wallet: this.scope.ownerPubKey,\n          tokenAccount: ownerRewardAccount!,\n        },\n\n        rewardMint,\n      });\n      txBuilder.addInstruction(insInfo);\n      address = { ...address, ...insInfo.address };\n    }\n\n    return txBuilder.build<{ address: Record<string, PublicKey> }>({ address });\n  }\n\n  // currently only support\n  public async swap<T extends TxVersion>({\n    poolInfo,\n    inputMint,\n    amountIn,\n    amountOutMin,\n    priceLimit,\n    ownerInfo,\n    remainingAccounts,\n    associatedOnly = true,\n    checkCreateATAOwner = false,\n    txVersion,\n  }: {\n    poolInfo: ApiV3PoolInfoConcentratedItem;\n    inputMint: string | PublicKey;\n    amountIn: BN;\n    amountOutMin: BN;\n    priceLimit?: Decimal;\n    ownerInfo: {\n      useSOLBalance?: boolean;\n      feePayer?: PublicKey;\n    };\n    remainingAccounts: PublicKey[];\n    associatedOnly?: boolean;\n    checkCreateATAOwner?: boolean;\n    txVersion?: T;\n  }): Promise<MakeTxData<T>> {\n    const txBuilder = this.createTxBuilder();\n\n    const mintAUseSOLBalance = ownerInfo.useSOLBalance && poolInfo.mintA.address === WSOLMint.toBase58();\n    const mintBUseSOLBalance = ownerInfo.useSOLBalance && poolInfo.mintB.address === WSOLMint.toBase58();\n\n    let sqrtPriceLimitX64: BN;\n    if (!priceLimit || priceLimit.equals(new Decimal(0))) {\n      sqrtPriceLimitX64 =\n        inputMint.toString() === poolInfo.mintA.address\n          ? MIN_SQRT_PRICE_X64.add(new BN(1))\n          : MAX_SQRT_PRICE_X64.sub(new BN(1));\n    } else {\n      sqrtPriceLimitX64 = SqrtPriceMath.priceToSqrtPriceX64(\n        priceLimit,\n        poolInfo.mintA.decimals,\n        poolInfo.mintB.decimals,\n      );\n    }\n\n    let ownerTokenAccountA: PublicKey | undefined;\n    if (!ownerTokenAccountA) {\n      const { account, instructionParams } = await this.scope.account.getOrCreateTokenAccount({\n        tokenProgram: poolInfo.mintA.programId,\n        mint: new PublicKey(poolInfo.mintA.address),\n        notUseTokenAccount: mintAUseSOLBalance,\n        owner: this.scope.ownerPubKey,\n        skipCloseAccount: !mintAUseSOLBalance,\n        createInfo: {\n          payer: ownerInfo.feePayer || this.scope.ownerPubKey,\n          amount: 0,\n        },\n        associatedOnly: mintAUseSOLBalance ? false : associatedOnly,\n        checkCreateATAOwner,\n      });\n      ownerTokenAccountA = account!;\n      instructionParams && txBuilder.addInstruction(instructionParams);\n    }\n\n    let ownerTokenAccountB: PublicKey | undefined;\n    if (!ownerTokenAccountB) {\n      const { account, instructionParams } = await this.scope.account.getOrCreateTokenAccount({\n        tokenProgram: poolInfo.mintB.programId,\n        mint: new PublicKey(poolInfo.mintB.address),\n        notUseTokenAccount: mintBUseSOLBalance,\n        owner: this.scope.ownerPubKey,\n        skipCloseAccount: !mintBUseSOLBalance,\n        createInfo: {\n          payer: ownerInfo.feePayer || this.scope.ownerPubKey,\n          amount: 0,\n        },\n        associatedOnly: mintBUseSOLBalance ? false : associatedOnly,\n        checkCreateATAOwner,\n      });\n      ownerTokenAccountB = account!;\n      instructionParams && txBuilder.addInstruction(instructionParams);\n    }\n\n    if (!ownerTokenAccountA || !ownerTokenAccountB)\n      this.logAndCreateError(\"user do not have token account\", this.scope.account.tokenAccountRawInfos);\n\n    const poolKeys = await this.getClmmPoolKeys(poolInfo.id);\n    txBuilder.addInstruction(\n      ClmmInstrument.makeSwapBaseInInstructions({\n        poolInfo,\n        poolKeys,\n        ownerInfo: {\n          wallet: this.scope.ownerPubKey,\n          tokenAccountA: ownerTokenAccountA!,\n          tokenAccountB: ownerTokenAccountB!,\n        },\n        inputMint: new PublicKey(inputMint),\n        amountIn,\n        amountOutMin,\n        sqrtPriceLimitX64,\n        remainingAccounts,\n      }),\n    );\n\n    return txBuilder.versionBuild({ txVersion }) as Promise<MakeTxData<T>>;\n  }\n\n  public async harvestAllRewards<T extends TxVersion = TxVersion.LEGACY>({\n    allPoolInfo,\n    allPositions,\n    ownerInfo,\n    associatedOnly = true,\n    checkCreateATAOwner = false,\n    programId,\n    txVersion,\n    computeBudgetConfig,\n  }: HarvestAllRewardsParams<T>): Promise<MakeMultiTxData<T>> {\n    const ownerMintToAccount: { [mint: string]: PublicKey } = {};\n    for (const item of this.scope.account.tokenAccountRawInfos) {\n      if (associatedOnly) {\n        const ata = getATAAddress(this.scope.ownerPubKey, item.accountInfo.mint, programId).publicKey;\n        if (ata.equals(item.pubkey)) ownerMintToAccount[item.accountInfo.mint.toString()] = item.pubkey;\n      } else {\n        ownerMintToAccount[item.accountInfo.mint.toString()] = item.pubkey;\n      }\n    }\n    const txBuilder = this.createTxBuilder();\n    for (const itemInfo of Object.values(allPoolInfo)) {\n      if (allPositions[itemInfo.id] === undefined) continue;\n      if (\n        !allPositions[itemInfo.id].find(\n          (i) => !i.liquidity.isZero() || i.rewardInfos.find((ii) => !ii.rewardAmountOwed.isZero()),\n        )\n      )\n        continue;\n\n      const poolInfo = itemInfo;\n      const mintAUseSOLBalance = ownerInfo.useSOLBalance && poolInfo.mintA.address === WSOLMint.toString();\n      const mintBUseSOLBalance = ownerInfo.useSOLBalance && poolInfo.mintB.address === WSOLMint.toString();\n\n      let ownerTokenAccountA = ownerMintToAccount[poolInfo.mintA.address];\n      if (!ownerTokenAccountA) {\n        const { account, instructionParams } = await this.scope.account.getOrCreateTokenAccount({\n          tokenProgram: poolInfo.mintA.programId,\n          mint: new PublicKey(poolInfo.mintA.address),\n          notUseTokenAccount: mintAUseSOLBalance,\n          owner: this.scope.ownerPubKey,\n          skipCloseAccount: !mintAUseSOLBalance,\n          createInfo: {\n            payer: ownerInfo.feePayer || this.scope.ownerPubKey,\n            amount: 0,\n          },\n          associatedOnly: mintAUseSOLBalance ? false : associatedOnly,\n          checkCreateATAOwner,\n        });\n        ownerTokenAccountA = account!;\n        instructionParams && txBuilder.addInstruction(instructionParams);\n      }\n\n      let ownerTokenAccountB = ownerMintToAccount[poolInfo.mintB.address];\n      if (!ownerTokenAccountB) {\n        const { account, instructionParams } = await this.scope.account.getOrCreateTokenAccount({\n          tokenProgram: poolInfo.mintB.programId,\n          mint: new PublicKey(poolInfo.mintB.address),\n          notUseTokenAccount: mintBUseSOLBalance,\n          owner: this.scope.ownerPubKey,\n          skipCloseAccount: !mintBUseSOLBalance,\n          createInfo: {\n            payer: ownerInfo.feePayer || this.scope.ownerPubKey,\n            amount: 0,\n          },\n          associatedOnly: mintBUseSOLBalance ? false : associatedOnly,\n          checkCreateATAOwner,\n        });\n        ownerTokenAccountB = account!;\n        instructionParams && txBuilder.addInstruction(instructionParams);\n      }\n\n      ownerMintToAccount[poolInfo.mintA.address] = ownerTokenAccountA;\n      ownerMintToAccount[poolInfo.mintB.address] = ownerTokenAccountB;\n\n      const rewardAccounts: PublicKey[] = [];\n      for (const itemReward of poolInfo.rewardDefaultInfos) {\n        const rewardUseSOLBalance = ownerInfo.useSOLBalance && itemReward.mint.address === WSOLMint.toString();\n        let ownerRewardAccount = ownerMintToAccount[itemReward.mint.address];\n        if (!ownerRewardAccount) {\n          const { account, instructionParams } = await this.scope.account.getOrCreateTokenAccount({\n            tokenProgram: new PublicKey(itemReward.mint.programId),\n            mint: new PublicKey(itemReward.mint.address),\n            notUseTokenAccount: rewardUseSOLBalance,\n            owner: this.scope.ownerPubKey,\n            skipCloseAccount: !rewardUseSOLBalance,\n            createInfo: {\n              payer: ownerInfo.feePayer || this.scope.ownerPubKey,\n              amount: 0,\n            },\n            associatedOnly: rewardUseSOLBalance ? false : associatedOnly,\n          });\n          ownerRewardAccount = account!;\n          instructionParams && txBuilder.addInstruction(instructionParams);\n        }\n\n        ownerMintToAccount[itemReward.mint.address] = ownerRewardAccount;\n        rewardAccounts.push(ownerRewardAccount!);\n      }\n\n      const poolKeys = await this.getClmmPoolKeys(poolInfo.id);\n\n      for (const itemPosition of allPositions[itemInfo.id]) {\n        const insData = ClmmInstrument.decreaseLiquidityInstructions({\n          poolInfo,\n          poolKeys,\n          ownerPosition: itemPosition,\n          ownerInfo: {\n            wallet: this.scope.ownerPubKey,\n            tokenAccountA: ownerTokenAccountA,\n            tokenAccountB: ownerTokenAccountB,\n            rewardAccounts,\n          },\n          liquidity: new BN(0),\n          amountMinA: new BN(0),\n          amountMinB: new BN(0),\n        });\n        txBuilder.addInstruction(insData);\n      }\n    }\n\n    if (txVersion === TxVersion.V0)\n      return txBuilder.sizeCheckBuildV0({ computeBudgetConfig }) as Promise<MakeMultiTxData<T>>;\n    return txBuilder.sizeCheckBuild({ computeBudgetConfig }) as Promise<MakeMultiTxData<T>>;\n  }\n\n  public async getWhiteListMint({ programId }: { programId: PublicKey }): Promise<PublicKey[]> {\n    const accountInfo = await this.scope.connection.getAccountInfo(getPdaOperationAccount(programId).publicKey);\n    if (!accountInfo) return [];\n    const whitelistMintsInfo = OperationLayout.decode(accountInfo.data);\n    return whitelistMintsInfo.whitelistMints.filter((i) => !i.equals(PublicKey.default));\n  }\n\n  public async getOwnerPositionInfo({\n    programId,\n  }: {\n    programId: string | PublicKey;\n  }): Promise<ReturnType<typeof PositionInfoLayout.decode>[]> {\n    await this.scope.account.fetchWalletTokenAccounts();\n    const balanceMints = this.scope.account.tokenAccountRawInfos.filter((acc) => acc.accountInfo.amount.eq(new BN(1)));\n    const allPositionKey = balanceMints.map(\n      (acc) => getPdaPersonalPositionAddress(new PublicKey(programId), acc.accountInfo.mint).publicKey,\n    );\n\n    const accountInfo = await this.scope.connection.getMultipleAccountsInfo(allPositionKey);\n    const allPosition: ReturnType<typeof PositionInfoLayout.decode>[] = [];\n    accountInfo.forEach((positionRes) => {\n      if (!positionRes) return;\n      const position = PositionInfoLayout.decode(positionRes.data);\n      allPosition.push(position);\n    });\n\n    return allPosition;\n  }\n\n  public async getRpcClmmPoolInfo({\n    poolId,\n  }: {\n    poolId: string | PublicKey;\n  }): Promise<ReturnType<typeof PoolInfoLayout.decode> & { currentPrice: number }> {\n    const account = await this.scope.connection.getAccountInfo(new PublicKey(poolId));\n    const rpc = PoolInfoLayout.decode(account!.data);\n    const currentPrice = SqrtPriceMath.sqrtPriceX64ToPrice(\n      rpc.sqrtPriceX64,\n      rpc.mintDecimalsA,\n      rpc.mintDecimalsB,\n    ).toNumber();\n    return {\n      ...rpc,\n      currentPrice,\n    };\n  }\n\n  /*\n  public async computeAmountIn({\n    poolInfo,\n    tickArrayCache,\n    baseMint,\n    token2022Infos,\n    amountOut,\n    slippage,\n    priceLimit = new Decimal(0),\n  }: {\n    poolInfo: ApiV3PoolInfoConcentratedItem;\n    tickArrayCache: { [key: string]: TickArray };\n    baseMint: PublicKey;\n    token2022Infos: ReturnTypeFetchMultipleMintInfos;\n    amountOut: BN;\n    slippage: number;\n    priceLimit?: Decimal;\n  }): Promise<ReturnTypeComputeAmountOutBaseOut> {\n    const epochInfo = await this.scope.fetchEpochInfo();\n\n    let sqrtPriceLimitX64: BN;\n    if (priceLimit.equals(new Decimal(0))) {\n      sqrtPriceLimitX64 =\n        baseMint.toString() === poolInfo.mintB.address ? MIN_SQRT_PRICE_X64.add(ONE) : MAX_SQRT_PRICE_X64.sub(ONE);\n    } else {\n      sqrtPriceLimitX64 = SqrtPriceMath.priceToSqrtPriceX64(\n        priceLimit,\n        poolInfo.mintA.decimals,\n        poolInfo.mintB.decimals,\n      );\n    }\n\n    const realAmountOut = getTransferAmountFee(\n      amountOut,\n      token2022Infos[baseMint.toString()]?.feeConfig,\n      epochInfo,\n      true,\n    );\n\n    const {\n      expectedAmountIn,\n      remainingAccounts,\n      executionPrice: _executionPriceX64,\n      feeAmount,\n    } = PoolUtils.getInputAmountAndRemainAccounts(\n      poolInfo as any, // todo\n      tickArrayCache,\n      baseMint,\n      realAmountOut.amount.sub(realAmountOut.fee || new BN(0)),\n      sqrtPriceLimitX64,\n    );\n\n    const _executionPrice = SqrtPriceMath.sqrtPriceX64ToPrice(\n      _executionPriceX64,\n      poolInfo.mintA.decimals,\n      poolInfo.mintB.decimals,\n    );\n    const executionPrice =\n      baseMint.toString() === poolInfo.mintA.address ? _executionPrice : new Decimal(1).div(_executionPrice);\n\n    const maxAmountIn = expectedAmountIn.mul(new BN(Math.floor((1 + slippage) * 10000000000))).div(new BN(10000000000));\n\n    const poolPrice =\n      poolInfo.mintA.address === baseMint.toString() ? poolInfo.price : new Decimal(1).div(poolInfo.price);\n\n    const _numerator = new Decimal(executionPrice).sub(poolPrice).abs();\n    const _denominator = poolPrice;\n    const priceImpact = new Percent(\n      new Decimal(_numerator).mul(10 ** 15).toFixed(0),\n      new Decimal(_denominator).mul(10 ** 15).toFixed(0),\n    );\n\n    return {\n      amountIn: expectedAmountIn,\n      maxAmountIn,\n      currentPrice: new Decimal(poolInfo.price),\n      executionPrice,\n      priceImpact,\n      fee: feeAmount,\n\n      remainingAccounts,\n    };\n  }\n  */\n}\n","import { PublicKey } from \"@solana/web3.js\";\nimport {\n  NATIVE_MINT,\n  TOKEN_PROGRAM_ID,\n  AccountLayout,\n} from \"@solana/spl-token\";\nimport { CpmmKeys } from \"@/api/type\";\nimport { TokenAmount, Percent } from \"@/module\";\nimport { toToken } from \"../token\";\nimport { BN_ZERO } from \"@/common/bignumber\";\nimport { getATAAddress } from \"@/common/pda\";\nimport { WSOLMint } from \"@/common/pubKey\";\nimport { InstructionType, TxVersion } from \"@/common/txTool/txType\";\nimport { MakeTxData } from \"@/common/txTool/txTool\";\n\nimport ModuleBase, { ModuleBaseProps } from \"../moduleBase\";\nimport {\n  CreateCpmmPoolParam,\n  CreateCpmmPoolAddress,\n  AddCpmmLiquidityParams,\n  WithdrawCpmmLiquidityParams,\n  CpmmSwapParams,\n  ComputePairAmountParams,\n  CpmmConfigInfoInterface,\n} from \"./type\";\nimport { getCreatePoolKeys, getPdaObservationId } from \"./pda\";\nimport {\n  makeCreateCpmmPoolInInstruction,\n  makeDepositCpmmInInstruction,\n  makeWithdrawCpmmInInstruction,\n  makeSwapCpmmBaseInInInstruction,\n  makeSwapCpmmBaseOutInInstruction,\n} from \"./instruction\";\nimport BN from \"bn.js\";\nimport { CpmmPoolInfoLayout, CpmmConfigInfoLayout } from \"./layout\";\nimport Decimal from \"decimal.js\";\nimport { getTransferAmountFeeV2 } from \"@/common\";\nimport { GetTransferAmountFee } from \"@/raydium/type\";\n\nexport default class CpmmModule extends ModuleBase {\n  constructor(params: ModuleBaseProps) {\n    super(params);\n  }\n\n  public async load(): Promise<void> {\n    this.checkDisabled();\n  }\n\n  public async getCpmmPoolKeys(poolId: string): Promise<CpmmKeys> {\n    return (\n      (await this.scope.api.fetchPoolKeysById({\n        idList: [poolId],\n      })) as CpmmKeys[]\n    )[0];\n  }\n\n  public async getRpcPoolInfo(\n    poolId: string,\n    fetchConfigInfo?: boolean\n  ): Promise<\n    ReturnType<typeof CpmmPoolInfoLayout.decode> & {\n      baseReserve: BN;\n      quoteReserve: BN;\n      configInfo?: CpmmConfigInfoInterface;\n    }\n  > {\n    const accountData = await this.scope.connection.getAccountInfo(\n      new PublicKey(poolId)\n    );\n    if (!accountData) throw new Error(`pool not found: ${poolId}`);\n    const poolInfo = CpmmPoolInfoLayout.decode(accountData.data);\n    const [poolVaultAState, poolVaultBState] =\n      await this.scope.connection.getMultipleAccountsInfo([\n        poolInfo.vaultA,\n        poolInfo.vaultB,\n      ]);\n\n    if (!poolVaultAState)\n      throw new Error(\n        `pool vaultA info not found: ${poolInfo.vaultA.toBase58()}`\n      );\n    if (!poolVaultBState)\n      throw new Error(\n        `pool vaultB info not found: ${poolInfo.vaultB.toBase58()}`\n      );\n\n    let configInfo: CpmmConfigInfoInterface | undefined;\n    if (fetchConfigInfo) {\n      const configState = await this.scope.connection.getAccountInfo(\n        poolInfo.configId\n      );\n      if (configState)\n        configInfo = CpmmConfigInfoLayout.decode(configState.data);\n    }\n\n    return {\n      ...poolInfo,\n      baseReserve: new BN(\n        AccountLayout.decode(poolVaultAState.data).amount.toString()\n      )\n        .sub(poolInfo.protocolFeesMintA)\n        .sub(poolInfo.fundFeesMintA),\n      quoteReserve: new BN(\n        AccountLayout.decode(poolVaultBState.data).amount.toString()\n      )\n        .sub(poolInfo.protocolFeesMintB)\n        .sub(poolInfo.fundFeesMintB),\n      configInfo,\n    };\n  }\n\n  public async createPool<T extends TxVersion>({\n    programId,\n    poolFeeAccount,\n    startTime,\n    ownerInfo,\n    associatedOnly = false,\n    checkCreateATAOwner = false,\n    txVersion,\n    computeBudgetConfig,\n    ...params\n  }: CreateCpmmPoolParam<T>): Promise<\n    MakeTxData<T, { address: CreateCpmmPoolAddress }>\n  > {\n    const payer = ownerInfo.feePayer || this.scope.owner?.publicKey;\n    const isFront = new BN(new PublicKey(params.mintA.address).toBuffer()).lte(\n      new BN(new PublicKey(params.mintB.address).toBuffer())\n    );\n\n    const [mintA, mintB] = isFront\n      ? [params.mintA, params.mintB]\n      : [params.mintB, params.mintA];\n    const [mintAAmount, mintBAmount] = isFront\n      ? [params.mintAAmount, params.mintBAmount]\n      : [params.mintBAmount, params.mintAAmount];\n\n    const mintAUseSOLBalance =\n      ownerInfo.useSOLBalance && mintA.address === NATIVE_MINT.toBase58();\n    const mintBUseSOLBalance =\n      ownerInfo.useSOLBalance && mintB.address === NATIVE_MINT.toBase58();\n    const [mintAPubkey, mintBPubkey] = [\n      new PublicKey(mintA.address),\n      new PublicKey(mintB.address),\n    ];\n    const txBuilder = this.createTxBuilder();\n\n    const { account: userVaultA, instructionParams: userVaultAInstruction } =\n      await this.scope.account.getOrCreateTokenAccount({\n        mint: mintAPubkey,\n        tokenProgram: mintA.programId,\n        owner: this.scope.ownerPubKey,\n        createInfo: mintAUseSOLBalance\n          ? {\n              payer: payer!,\n              amount: mintAAmount,\n            }\n          : undefined,\n        notUseTokenAccount: mintAUseSOLBalance,\n        skipCloseAccount: !mintAUseSOLBalance,\n        associatedOnly: mintAUseSOLBalance ? false : associatedOnly,\n        checkCreateATAOwner,\n      });\n    txBuilder.addInstruction(userVaultAInstruction || {});\n    const { account: userVaultB, instructionParams: userVaultBInstruction } =\n      await this.scope.account.getOrCreateTokenAccount({\n        mint: new PublicKey(mintB.address),\n        tokenProgram: mintB.programId,\n        owner: this.scope.ownerPubKey,\n        createInfo: mintBUseSOLBalance\n          ? {\n              payer: payer!,\n              amount: mintBAmount,\n            }\n          : undefined,\n\n        notUseTokenAccount: mintBUseSOLBalance,\n        skipCloseAccount: !mintBUseSOLBalance,\n        associatedOnly: mintBUseSOLBalance ? false : associatedOnly,\n        checkCreateATAOwner,\n      });\n    txBuilder.addInstruction(userVaultBInstruction || {});\n\n    if (userVaultA === undefined || userVaultB === undefined)\n      throw Error(\"you don't has some token account\");\n\n    const poolKeys = getCreatePoolKeys({\n      programId,\n      mintA: mintAPubkey,\n      mintB: mintBPubkey,\n    });\n\n    txBuilder.addInstruction({\n      instructions: [\n        makeCreateCpmmPoolInInstruction(\n          programId,\n          this.scope.ownerPubKey,\n          poolKeys.configId,\n          poolKeys.authority,\n          poolKeys.poolId,\n          mintAPubkey,\n          mintBPubkey,\n          poolKeys.lpMint,\n          userVaultA,\n          userVaultB,\n          getATAAddress(this.scope.ownerPubKey, poolKeys.lpMint).publicKey,\n          poolKeys.vaultA,\n          poolKeys.vaultB,\n          poolFeeAccount,\n          new PublicKey(mintA.programId ?? TOKEN_PROGRAM_ID),\n          new PublicKey(mintB.programId ?? TOKEN_PROGRAM_ID),\n          poolKeys.observationId,\n          mintAAmount,\n          mintBAmount,\n          startTime\n        ),\n      ],\n      instructionTypes: [InstructionType.CpmmCreatePool],\n    });\n\n    txBuilder.addCustomComputeBudget(computeBudgetConfig);\n\n    return txBuilder.versionBuild({\n      txVersion,\n      extInfo: {\n        address: { ...poolKeys, mintA, mintB, programId, poolFeeAccount },\n      },\n    }) as Promise<MakeTxData<T, { address: CreateCpmmPoolAddress }>>;\n  }\n\n  public async addLiquidity<T extends TxVersion>(\n    params: AddCpmmLiquidityParams<T>\n  ): Promise<MakeTxData<T>> {\n    const {\n      poolInfo,\n      inputAmount,\n      baseIn,\n      slippage,\n      computeResult,\n      computeBudgetConfig,\n      config,\n      txVersion,\n    } = params;\n\n    if (this.scope.availability.addStandardPosition === false)\n      this.logAndCreateError(\"add liquidity feature disabled in your region\");\n\n    if (inputAmount.isZero())\n      this.logAndCreateError(\"amounts must greater than zero\", \"amountInA\", {\n        amountInA: inputAmount.toString(),\n      });\n    const { account } = this.scope;\n    const { bypassAssociatedCheck, checkCreateATAOwner } = {\n      // default\n      ...{ bypassAssociatedCheck: false, checkCreateATAOwner: false },\n      // custom\n      ...config,\n    };\n    const rpcPoolData = await this.getRpcPoolInfo(poolInfo.id);\n    const {\n      liquidity,\n      inputAmountFee,\n      anotherAmount: _anotherAmount,\n    } = computeResult ||\n    this.computePairAmount({\n      poolInfo: {\n        ...poolInfo,\n        mintAmountA: new Decimal(rpcPoolData.baseReserve.toString())\n          .div(10 ** poolInfo.mintA.decimals)\n          .toNumber(),\n        mintAmountB: new Decimal(rpcPoolData.quoteReserve.toString())\n          .div(10 ** poolInfo.mintB.decimals)\n          .toNumber(),\n        lpAmount: new Decimal(rpcPoolData.lpAmount.toString())\n          .div(10 ** poolInfo.lpMint.decimals)\n          .toNumber(),\n      },\n      slippage,\n      baseIn,\n      epochInfo: await this.scope.fetchEpochInfo(),\n      amount: new Decimal(inputAmount.toString()).div(\n        10 ** (baseIn ? poolInfo.mintA.decimals : poolInfo.mintB.decimals)\n      ),\n    });\n\n    const anotherAmount = _anotherAmount.amount;\n    const mintAUseSOLBalance =\n      poolInfo.mintA.address === NATIVE_MINT.toString();\n    const mintBUseSOLBalance =\n      poolInfo.mintB.address === NATIVE_MINT.toString();\n\n    const txBuilder = this.createTxBuilder();\n    const [mintA, mintB] = [\n      new PublicKey(poolInfo.mintA.address),\n      new PublicKey(poolInfo.mintB.address),\n    ];\n\n    const {\n      account: tokenAccountA,\n      instructionParams: _tokenAccountAInstruction,\n    } = await this.scope.account.getOrCreateTokenAccount({\n      tokenProgram: poolInfo.mintA.programId,\n      mint: new PublicKey(poolInfo.mintA.address),\n      owner: this.scope.ownerPubKey,\n\n      createInfo:\n        mintAUseSOLBalance || (baseIn ? inputAmount : anotherAmount).isZero()\n          ? {\n              payer: this.scope.ownerPubKey,\n              amount: baseIn ? inputAmount : anotherAmount,\n            }\n          : undefined,\n      skipCloseAccount: !mintAUseSOLBalance,\n      notUseTokenAccount: mintAUseSOLBalance,\n      associatedOnly: false,\n      checkCreateATAOwner,\n    });\n\n    txBuilder.addInstruction(_tokenAccountAInstruction || {});\n\n    const {\n      account: tokenAccountB,\n      instructionParams: _tokenAccountBInstruction,\n    } = await this.scope.account.getOrCreateTokenAccount({\n      tokenProgram: poolInfo.mintB.programId,\n      mint: new PublicKey(poolInfo.mintB.address),\n      owner: this.scope.ownerPubKey,\n\n      createInfo:\n        mintBUseSOLBalance || (baseIn ? anotherAmount : inputAmount).isZero()\n          ? {\n              payer: this.scope.ownerPubKey,\n              amount: baseIn ? anotherAmount : inputAmount,\n            }\n          : undefined,\n      skipCloseAccount: !mintBUseSOLBalance,\n      notUseTokenAccount: mintBUseSOLBalance,\n      associatedOnly: false,\n      checkCreateATAOwner,\n    });\n\n    txBuilder.addInstruction(_tokenAccountBInstruction || {});\n\n    if (!tokenAccountA && !tokenAccountB)\n      this.logAndCreateError(\n        \"cannot found target token accounts\",\n        \"tokenAccounts\",\n        account.tokenAccounts\n      );\n    const lpTokenAccount = await account.getCreatedTokenAccount({\n      mint: new PublicKey(poolInfo.lpMint.address),\n    });\n    const { tokenAccount: _lpTokenAccount, ...lpInstruction } =\n      await account.handleTokenAccount({\n        side: \"out\",\n        amount: 0,\n        mint: new PublicKey(poolInfo.lpMint.address),\n        tokenAccount: lpTokenAccount,\n        bypassAssociatedCheck,\n        checkCreateATAOwner,\n      });\n    txBuilder.addInstruction(lpInstruction);\n    const poolKeys = await this.getCpmmPoolKeys(poolInfo.id);\n\n    txBuilder.addInstruction({\n      instructions: [\n        makeDepositCpmmInInstruction(\n          new PublicKey(poolInfo.programId),\n          this.scope.ownerPubKey,\n          new PublicKey(poolKeys.authority),\n          new PublicKey(poolInfo.id),\n          _lpTokenAccount!,\n          tokenAccountA!,\n          tokenAccountB!,\n          new PublicKey(poolKeys.vault.A),\n          new PublicKey(poolKeys.vault.B),\n          mintA,\n          mintB,\n          new PublicKey(poolInfo.lpMint.address),\n\n          liquidity,\n          baseIn ? inputAmountFee.amount : anotherAmount,\n          baseIn ? anotherAmount : inputAmountFee.amount\n        ),\n      ],\n      instructionTypes: [InstructionType.CpmmAddLiquidity],\n      lookupTableAddress: poolKeys.lookupTableAccount\n        ? [poolKeys.lookupTableAccount]\n        : [],\n    });\n    txBuilder.addCustomComputeBudget(computeBudgetConfig);\n    return txBuilder.versionBuild({ txVersion }) as Promise<MakeTxData<T>>;\n  }\n\n  public async withdrawLiquidity<T extends TxVersion>(\n    params: WithdrawCpmmLiquidityParams<T>\n  ): Promise<MakeTxData<T>> {\n    const { poolInfo, lpAmount, slippage, computeBudgetConfig, txVersion } =\n      params;\n\n    if (this.scope.availability.addStandardPosition === false)\n      this.logAndCreateError(\"add liquidity feature disabled in your region\");\n\n    const _slippage = new Percent(new BN(1)).sub(slippage);\n\n    const rpcPoolData = await this.getRpcPoolInfo(poolInfo.id);\n    const [amountMintA, amountMintB] = [\n      _slippage.mul(\n        lpAmount.mul(rpcPoolData.baseReserve).div(rpcPoolData.lpAmount)\n      ).quotient,\n      _slippage.mul(\n        lpAmount.mul(rpcPoolData.quoteReserve).div(rpcPoolData.lpAmount)\n      ).quotient,\n    ];\n\n    const epochInfo = await this.scope.fetchEpochInfo();\n    const [mintAAmountFee, mintBAmountFee] = [\n      getTransferAmountFeeV2(\n        amountMintA,\n        poolInfo.mintA.extensions.feeConfig,\n        epochInfo,\n        true\n      ),\n      getTransferAmountFeeV2(\n        amountMintB,\n        poolInfo.mintB.extensions.feeConfig,\n        epochInfo,\n        true\n      ),\n    ];\n\n    const { account } = this.scope;\n    const txBuilder = this.createTxBuilder();\n    const [mintA, mintB] = [\n      new PublicKey(poolInfo.mintA.address),\n      new PublicKey(poolInfo.mintB.address),\n    ];\n\n    const mintAUseSOLBalance = mintA.equals(WSOLMint);\n    const mintBUseSOLBalance = mintB.equals(WSOLMint);\n\n    let tokenAccountA: PublicKey | undefined = undefined;\n    let tokenAccountB: PublicKey | undefined = undefined;\n    const {\n      account: _ownerTokenAccountA,\n      instructionParams: accountAInstructions,\n    } = await this.scope.account.getOrCreateTokenAccount({\n      tokenProgram: poolInfo.mintA.programId,\n      mint: new PublicKey(poolInfo.mintA.address),\n      notUseTokenAccount: mintAUseSOLBalance,\n      owner: this.scope.ownerPubKey,\n      createInfo: {\n        payer: this.scope.ownerPubKey,\n        amount: 0,\n      },\n      skipCloseAccount: !mintAUseSOLBalance,\n      associatedOnly: mintAUseSOLBalance ? false : true,\n      checkCreateATAOwner: false,\n    });\n    tokenAccountA = _ownerTokenAccountA;\n    accountAInstructions && txBuilder.addInstruction(accountAInstructions);\n\n    const {\n      account: _ownerTokenAccountB,\n      instructionParams: accountBInstructions,\n    } = await this.scope.account.getOrCreateTokenAccount({\n      tokenProgram: poolInfo.mintB.programId,\n      mint: new PublicKey(poolInfo.mintB.address),\n      notUseTokenAccount: mintBUseSOLBalance,\n      owner: this.scope.ownerPubKey,\n      createInfo: {\n        payer: this.scope.ownerPubKey,\n        amount: 0,\n      },\n      skipCloseAccount: !mintBUseSOLBalance,\n      associatedOnly: mintBUseSOLBalance ? false : true,\n      checkCreateATAOwner: false,\n    });\n    tokenAccountB = _ownerTokenAccountB;\n    accountBInstructions && txBuilder.addInstruction(accountBInstructions);\n\n    if (!tokenAccountA || !tokenAccountB)\n      this.logAndCreateError(\n        \"cannot found target token accounts\",\n        \"tokenAccounts\",\n        account.tokenAccounts\n      );\n\n    const lpTokenAccount = await account.getCreatedTokenAccount({\n      mint: new PublicKey(poolInfo.lpMint.address),\n    });\n\n    if (!lpTokenAccount)\n      this.logAndCreateError(\n        \"cannot found lp token account\",\n        \"tokenAccounts\",\n        account.tokenAccounts\n      );\n    const poolKeys = await this.getCpmmPoolKeys(poolInfo.id);\n    txBuilder.addInstruction({\n      instructions: [\n        makeWithdrawCpmmInInstruction(\n          new PublicKey(poolInfo.programId),\n          this.scope.ownerPubKey,\n          new PublicKey(poolKeys.authority),\n          new PublicKey(poolInfo.id),\n          lpTokenAccount!,\n          tokenAccountA!,\n          tokenAccountB!,\n          new PublicKey(poolKeys.vault.A),\n          new PublicKey(poolKeys.vault.B),\n          mintA,\n          mintB,\n          new PublicKey(poolInfo.lpMint.address),\n\n          lpAmount,\n          amountMintA.sub(mintAAmountFee.fee ?? new BN(0)),\n          amountMintB.sub(mintBAmountFee.fee ?? new BN(0))\n        ),\n      ],\n      instructionTypes: [InstructionType.CpmmWithdrawLiquidity],\n      lookupTableAddress: poolKeys.lookupTableAccount\n        ? [poolKeys.lookupTableAccount]\n        : [],\n    });\n    txBuilder.addCustomComputeBudget(computeBudgetConfig);\n    return txBuilder.versionBuild({ txVersion }) as Promise<MakeTxData<T>>;\n  }\n\n  public async swap<T extends TxVersion>(\n    params: CpmmSwapParams\n  ): Promise<MakeTxData<T>> {\n    const {\n      poolInfo,\n      baseIn,\n      swapResult,\n      config,\n      computeBudgetConfig,\n      txVersion,\n      isSell = false,\n    } = params;\n\n    const { bypassAssociatedCheck, checkCreateATAOwner } = {\n      // default\n      ...{ bypassAssociatedCheck: false, checkCreateATAOwner: false },\n      // custom\n      ...config,\n    };\n\n    const txBuilder = this.createTxBuilder();\n\n    const [mintA, mintB] = isSell\n      ? [\n          new PublicKey(poolInfo.mintB.address),\n          new PublicKey(poolInfo.mintA.address),\n        ]\n      : [\n          new PublicKey(poolInfo.mintA.address),\n          new PublicKey(poolInfo.mintB.address),\n        ];\n\n    const [programIdA, programIdB] = isSell\n      ? [poolInfo.mintB.programId, poolInfo.mintA.programId]\n      : [poolInfo.mintA.programId, poolInfo.mintB.programId];\n\n    const mintATokenAcc = await this.scope.account.getCreatedTokenAccount({\n      programId: new PublicKey(programIdA ?? TOKEN_PROGRAM_ID),\n      mint: mintA,\n      associatedOnly: false,\n    });\n\n    const mintBTokenAcc = await this.scope.account.getCreatedTokenAccount({\n      programId: new PublicKey(programIdB ?? TOKEN_PROGRAM_ID),\n      mint: mintB,\n      associatedOnly: false,\n    });\n\n    const { tokenAccount: _mintATokenAcc, ...mintATokenAccInstruction } =\n      await this.scope.account.handleTokenAccount({\n        side: baseIn ? \"in\" : \"out\",\n        amount: baseIn\n          ? swapResult.sourceAmountSwapped\n          : swapResult.destinationAmountSwapped,\n        mint: mintA,\n        tokenAccount: mintATokenAcc,\n        bypassAssociatedCheck,\n        checkCreateATAOwner,\n        programId: new PublicKey(programIdA ?? TOKEN_PROGRAM_ID),\n      });\n    txBuilder.addInstruction(mintATokenAccInstruction);\n\n    const { tokenAccount: _mintBTokenAcc, ...mintBTokenAccInstruction } =\n      await this.scope.account.handleTokenAccount({\n        side: baseIn ? \"out\" : \"in\",\n        amount: baseIn\n          ? swapResult.destinationAmountSwapped\n          : swapResult.sourceAmountSwapped,\n        mint: mintB,\n        tokenAccount: mintBTokenAcc,\n        bypassAssociatedCheck,\n        checkCreateATAOwner,\n        programId: new PublicKey(programIdB ?? TOKEN_PROGRAM_ID),\n      });\n    txBuilder.addInstruction(mintBTokenAccInstruction);\n\n    if (!_mintATokenAcc && !_mintBTokenAcc)\n      this.logAndCreateError(\n        \"cannot found target token accounts\",\n        \"tokenAccounts\",\n        this.scope.account.tokenAccounts\n      );\n\n    const poolKeys = await this.getCpmmPoolKeys(poolInfo.id);\n\n    const [vaultA, vaultB] = isSell\n      ? [poolKeys.vault.B, poolKeys.vault.A]\n      : [poolKeys.vault.A, poolKeys.vault.B];\n\n    txBuilder.addInstruction({\n      instructions: [\n        baseIn\n          ? makeSwapCpmmBaseInInInstruction(\n              new PublicKey(poolInfo.programId),\n              this.scope.ownerPubKey,\n              new PublicKey(poolKeys.authority),\n              new PublicKey(poolKeys.config.id),\n              new PublicKey(poolInfo.id),\n              _mintATokenAcc!,\n              _mintBTokenAcc!,\n              new PublicKey(vaultA),\n              new PublicKey(vaultB),\n              new PublicKey(programIdA ?? TOKEN_PROGRAM_ID),\n              new PublicKey(programIdB ?? TOKEN_PROGRAM_ID),\n              mintA,\n              mintB,\n              getPdaObservationId(\n                new PublicKey(poolInfo.programId),\n                new PublicKey(poolInfo.id)\n              ).publicKey,\n\n              swapResult.sourceAmountSwapped,\n              swapResult.destinationAmountSwapped\n            )\n          : makeSwapCpmmBaseOutInInstruction(\n              new PublicKey(poolInfo.programId),\n              this.scope.ownerPubKey,\n              new PublicKey(poolKeys.authority),\n              new PublicKey(poolKeys.config.id),\n              new PublicKey(poolInfo.id),\n\n              _mintBTokenAcc!,\n              _mintATokenAcc!,\n\n              new PublicKey(vaultB),\n              new PublicKey(vaultA),\n\n              new PublicKey(programIdB ?? TOKEN_PROGRAM_ID),\n              new PublicKey(programIdA ?? TOKEN_PROGRAM_ID),\n\n              mintB,\n              mintA,\n\n              getPdaObservationId(\n                new PublicKey(poolInfo.programId),\n                new PublicKey(poolInfo.id)\n              ).publicKey,\n\n              swapResult.sourceAmountSwapped,\n              swapResult.destinationAmountSwapped\n            ),\n      ],\n      instructionTypes: [\n        baseIn\n          ? InstructionType.CpmmSwapBaseIn\n          : InstructionType.CpmmSwapBaseOut,\n      ],\n    });\n\n    txBuilder.addCustomComputeBudget(computeBudgetConfig);\n\n    return txBuilder.versionBuild({ txVersion }) as Promise<MakeTxData<T>>;\n  }\n\n  public computePairAmount({\n    poolInfo,\n    amount,\n    slippage,\n    epochInfo,\n    baseIn,\n  }: ComputePairAmountParams): {\n    inputAmountFee: GetTransferAmountFee;\n    anotherAmount: GetTransferAmountFee;\n    maxAnotherAmount: GetTransferAmountFee;\n    liquidity: BN;\n  } {\n    const coefficient = 1 - Number(slippage.toSignificant()) / 100;\n    const inputAmount = new BN(\n      new Decimal(amount)\n        .mul(10 ** poolInfo[baseIn ? \"mintA\" : \"mintB\"].decimals)\n        .mul(coefficient)\n        .toFixed(0)\n    );\n    const inputAmountFee = getTransferAmountFeeV2(\n      inputAmount,\n      poolInfo[baseIn ? \"mintA\" : \"mintB\"].extensions.feeConfig,\n      epochInfo,\n      false\n    );\n    const _inputAmountWithoutFee = inputAmount.sub(\n      inputAmountFee.fee ?? new BN(0)\n    );\n\n    const [baseReserve, quoteReserve] = [\n      new BN(\n        new Decimal(poolInfo.mintAmountA)\n          .mul(10 ** poolInfo.mintA.decimals)\n          .toString()\n      ),\n      new BN(\n        new Decimal(poolInfo.mintAmountB)\n          .mul(10 ** poolInfo.mintB.decimals)\n          .toString()\n      ),\n    ];\n\n    const lpAmount = new BN(\n      new Decimal(poolInfo.lpAmount)\n        .mul(10 ** poolInfo.lpMint.decimals)\n        .toFixed(0, Decimal.ROUND_DOWN)\n    );\n    this.logDebug(\n      \"baseReserve:\",\n      baseReserve.toString(),\n      \"quoteReserve:\",\n      quoteReserve.toString()\n    );\n\n    this.logDebug(\n      \"tokenIn:\",\n      baseIn ? poolInfo.mintA.symbol : poolInfo.mintB.symbol,\n      \"amountIn:\",\n      inputAmount.toString(),\n      \"amountInFee:\",\n      inputAmountFee.fee?.toString() ?? 0,\n      \"anotherToken:\",\n      baseIn ? poolInfo.mintB.symbol : poolInfo.mintA.symbol,\n      \"slippage:\",\n      `${slippage.toSignificant()}%`\n    );\n\n    // input is fixed\n    const input = baseIn ? \"base\" : \"quote\";\n    this.logDebug(\"input side:\", input);\n\n    const liquidity = _inputAmountWithoutFee\n      .mul(lpAmount)\n      .div(input === \"base\" ? baseReserve : quoteReserve);\n    let anotherAmountFee: GetTransferAmountFee = {\n      amount: BN_ZERO,\n      fee: undefined,\n      expirationTime: undefined,\n    };\n    if (!_inputAmountWithoutFee.isZero()) {\n      anotherAmountFee = getTransferAmountFeeV2(\n        lpToAmount(liquidity, baseReserve, quoteReserve, lpAmount)[\n          baseIn ? \"amountB\" : \"amountA\"\n        ],\n        poolInfo[baseIn ? \"mintB\" : \"mintA\"].extensions.feeConfig,\n        epochInfo,\n        true\n      );\n    }\n\n    const _slippage = new Percent(new BN(1)).add(slippage);\n    const slippageAdjustedAmount = getTransferAmountFeeV2(\n      _slippage.mul(\n        anotherAmountFee.amount.sub(anotherAmountFee.fee ?? new BN(0))\n      ).quotient,\n      poolInfo[baseIn ? \"mintB\" : \"mintA\"].extensions.feeConfig,\n      epochInfo,\n      true\n    );\n\n    this.logDebug(\n      \"anotherAmount:\",\n      anotherAmountFee.amount.toString(),\n      \"anotherAmountFee:\",\n      anotherAmountFee.fee?.toString() ?? 0,\n      \"maxAnotherAmount:\",\n      slippageAdjustedAmount.amount.toString(),\n      \"maxAnotherAmountFee:\",\n      slippageAdjustedAmount.fee?.toString() ?? 0\n    );\n\n    return {\n      inputAmountFee,\n      anotherAmount: anotherAmountFee,\n      maxAnotherAmount: slippageAdjustedAmount,\n      liquidity,\n    };\n  }\n}\n\nfunction lpToAmount(\n  lp: BN,\n  poolAmountA: BN,\n  poolAmountB: BN,\n  supply: BN\n): { amountA: BN; amountB: BN } {\n  let amountA = lp.mul(poolAmountA).div(supply);\n  if (!amountA.isZero() && !lp.mul(poolAmountA).mod(supply).isZero())\n    amountA = amountA.add(new BN(1));\n  let amountB = lp.mul(poolAmountB).div(supply);\n  if (!amountB.isZero() && !lp.mul(poolAmountB).mod(supply).isZero())\n    amountB = amountB.add(new BN(1));\n  return {\n    amountA,\n    amountB,\n  };\n}\n","import { PublicKey } from \"@solana/web3.js\";\nimport { findProgramAddress } from \"@/common/txTool/txUtils\";\n\nconst AUTH_SEED = Buffer.from(\"vault_and_lp_mint_auth_seed\", \"utf8\");\nconst AMM_CONFIG_SEED = Buffer.from(\"amm_config\", \"utf8\");\nconst POOL_SEED = Buffer.from(\"pool\", \"utf8\");\nconst POOL_LP_MINT_SEED = Buffer.from(\"pool_lp_mint\", \"utf8\");\nconst POOL_VAULT_SEED = Buffer.from(\"pool_vault\", \"utf8\");\nconst OBSERVATION_SEED = Buffer.from(\"observation\", \"utf8\");\n\nexport function getPdaPoolAuthority(programId: PublicKey): {\n  publicKey: PublicKey;\n  nonce: number;\n} {\n  return findProgramAddress([AUTH_SEED], programId);\n}\n\nexport function getCpmmPdaAmmConfigId(\n  programId: PublicKey,\n  index: number,\n): {\n  publicKey: PublicKey;\n  nonce: number;\n} {\n  return findProgramAddress([AMM_CONFIG_SEED, u16ToBytes(index)], programId);\n}\n\nexport function getCpmmPdaPoolId(\n  programId: PublicKey,\n  ammConfigId: PublicKey,\n  mintA: PublicKey,\n  mintB: PublicKey,\n): {\n  publicKey: PublicKey;\n  nonce: number;\n} {\n  return findProgramAddress([POOL_SEED, ammConfigId.toBuffer(), mintA.toBuffer(), mintB.toBuffer()], programId);\n}\n\nexport function getPdaLpMint(\n  programId: PublicKey,\n  poolId: PublicKey,\n): {\n  publicKey: PublicKey;\n  nonce: number;\n} {\n  return findProgramAddress([POOL_LP_MINT_SEED, poolId.toBuffer()], programId);\n}\n\nexport function getPdaVault(\n  programId: PublicKey,\n  poolId: PublicKey,\n  mint: PublicKey,\n): {\n  publicKey: PublicKey;\n  nonce: number;\n} {\n  return findProgramAddress([POOL_VAULT_SEED, poolId.toBuffer(), mint.toBuffer()], programId);\n}\n\nexport function getPdaObservationId(\n  programId: PublicKey,\n  poolId: PublicKey,\n): {\n  publicKey: PublicKey;\n  nonce: number;\n} {\n  return findProgramAddress([OBSERVATION_SEED, poolId.toBuffer()], programId);\n}\n\nfunction u16ToBytes(num: number): Uint8Array {\n  const arr = new ArrayBuffer(2);\n  const view = new DataView(arr);\n  view.setUint16(0, num, false);\n  return new Uint8Array(arr);\n}\n\nexport function getCreatePoolKeys({\n  programId,\n  mintA,\n  mintB,\n}: {\n  programId: PublicKey;\n  mintA: PublicKey;\n  mintB: PublicKey;\n}): {\n  poolId: PublicKey;\n  configId: PublicKey;\n  authority: PublicKey;\n  lpMint: PublicKey;\n  vaultA: PublicKey;\n  vaultB: PublicKey;\n  observationId: PublicKey;\n} {\n  const configId = getCpmmPdaAmmConfigId(programId, 0).publicKey;\n  const authority = getPdaPoolAuthority(programId).publicKey;\n  const poolId = getCpmmPdaPoolId(programId, configId, mintA, mintB).publicKey;\n  const lpMint = getPdaLpMint(programId, poolId).publicKey;\n  const vaultA = getPdaVault(programId, poolId, mintA).publicKey;\n  const vaultB = getPdaVault(programId, poolId, mintB).publicKey;\n  const observationId = getPdaObservationId(programId, poolId).publicKey;\n\n  return {\n    poolId,\n    configId,\n    authority,\n    lpMint,\n    vaultA,\n    vaultB,\n    observationId,\n  };\n}\n","import BN from \"bn.js\";\n\nimport { AccountMeta, PublicKey, TransactionInstruction } from \"@solana/web3.js\";\nimport { TOKEN_PROGRAM_ID, TOKEN_2022_PROGRAM_ID, ASSOCIATED_TOKEN_PROGRAM_ID } from \"@solana/spl-token\";\nimport { SYSTEM_PROGRAM_ID, RENT_PROGRAM_ID, MEMO_PROGRAM_ID2, createLogger } from \"@/common\";\n\nimport { struct, u64 } from \"@/marshmallow\";\nconst logger = createLogger(\"Raydium_cpmm\");\nconst anchorDataBuf = {\n  initialize: [175, 175, 109, 31, 13, 152, 155, 237],\n  deposit: [242, 35, 198, 137, 82, 225, 242, 182],\n  withdraw: [183, 18, 70, 156, 148, 109, 161, 34],\n  swapBaseInput: [143, 190, 90, 218, 196, 30, 51, 222],\n  swapBaseOutput: [55, 217, 98, 86, 163, 74, 180, 173],\n};\n\nexport function makeCreateCpmmPoolInInstruction(\n  programId: PublicKey,\n  creator: PublicKey,\n  configId: PublicKey,\n  authority: PublicKey,\n  poolId: PublicKey,\n  mintA: PublicKey,\n  mintB: PublicKey,\n  lpMint: PublicKey,\n  userVaultA: PublicKey,\n  userVaultB: PublicKey,\n  userLpAccount: PublicKey,\n  vaultA: PublicKey,\n  vaultB: PublicKey,\n  createPoolFeeAccount: PublicKey,\n  mintProgramA: PublicKey,\n  mintProgramB: PublicKey,\n  observationId: PublicKey,\n\n  amountMaxA: BN,\n  amountMaxB: BN,\n  openTime: BN,\n): TransactionInstruction {\n  const dataLayout = struct([u64(\"amountMaxA\"), u64(\"amountMaxB\"), u64(\"openTime\")]);\n\n  const keys: Array<AccountMeta> = [\n    { pubkey: creator, isSigner: true, isWritable: false },\n    { pubkey: configId, isSigner: false, isWritable: false },\n    { pubkey: authority, isSigner: false, isWritable: false },\n    { pubkey: poolId, isSigner: false, isWritable: true },\n    { pubkey: mintA, isSigner: false, isWritable: false },\n    { pubkey: mintB, isSigner: false, isWritable: false },\n    { pubkey: lpMint, isSigner: false, isWritable: true },\n    { pubkey: userVaultA, isSigner: false, isWritable: true },\n    { pubkey: userVaultB, isSigner: false, isWritable: true },\n    { pubkey: userLpAccount, isSigner: false, isWritable: true },\n    { pubkey: vaultA, isSigner: false, isWritable: true },\n    { pubkey: vaultB, isSigner: false, isWritable: true },\n    { pubkey: createPoolFeeAccount, isSigner: false, isWritable: true },\n    { pubkey: observationId, isSigner: false, isWritable: true },\n\n    { pubkey: TOKEN_PROGRAM_ID, isSigner: false, isWritable: false },\n    { pubkey: mintProgramA, isSigner: false, isWritable: false },\n    { pubkey: mintProgramB, isSigner: false, isWritable: false },\n    { pubkey: ASSOCIATED_TOKEN_PROGRAM_ID, isSigner: false, isWritable: false },\n    { pubkey: SYSTEM_PROGRAM_ID, isSigner: false, isWritable: false },\n    { pubkey: RENT_PROGRAM_ID, isSigner: false, isWritable: false },\n  ];\n\n  const data = Buffer.alloc(dataLayout.span);\n  dataLayout.encode(\n    {\n      amountMaxA,\n      amountMaxB,\n      openTime,\n    },\n    data,\n  );\n\n  return new TransactionInstruction({\n    keys,\n    programId,\n    data: Buffer.from([...anchorDataBuf.initialize, ...data]),\n  });\n}\n\nexport function makeDepositCpmmInInstruction(\n  programId: PublicKey,\n  owner: PublicKey,\n  authority: PublicKey,\n  poolId: PublicKey,\n  userLpAccount: PublicKey,\n  userVaultA: PublicKey,\n  userVaultB: PublicKey,\n  vaultA: PublicKey,\n  vaultB: PublicKey,\n  mintA: PublicKey,\n  mintB: PublicKey,\n  lpMint: PublicKey,\n\n  lpAmount: BN,\n  amountMaxA: BN,\n  amountMaxB: BN,\n): TransactionInstruction {\n  const dataLayout = struct([u64(\"lpAmount\"), u64(\"amountMaxA\"), u64(\"amountMaxB\")]);\n\n  const keys: Array<AccountMeta> = [\n    { pubkey: owner, isSigner: true, isWritable: false },\n    { pubkey: authority, isSigner: false, isWritable: false },\n    { pubkey: poolId, isSigner: false, isWritable: true },\n    { pubkey: userLpAccount, isSigner: false, isWritable: true },\n    { pubkey: userVaultA, isSigner: false, isWritable: true },\n    { pubkey: userVaultB, isSigner: false, isWritable: true },\n    { pubkey: vaultA, isSigner: false, isWritable: true },\n    { pubkey: vaultB, isSigner: false, isWritable: true },\n    { pubkey: TOKEN_PROGRAM_ID, isSigner: false, isWritable: false },\n    { pubkey: TOKEN_2022_PROGRAM_ID, isSigner: false, isWritable: false },\n    { pubkey: mintA, isSigner: false, isWritable: false },\n    { pubkey: mintB, isSigner: false, isWritable: false },\n    { pubkey: lpMint, isSigner: false, isWritable: true },\n  ];\n\n  const data = Buffer.alloc(dataLayout.span);\n  logger.debug(\"cpmm deposit data\", {\n    lpAmount: lpAmount.toString(),\n    amountMaxA: amountMaxA.toString(),\n    amountMaxB: amountMaxB.toString(),\n  });\n  dataLayout.encode(\n    {\n      lpAmount,\n      amountMaxA,\n      amountMaxB,\n    },\n    data,\n  );\n\n  return new TransactionInstruction({\n    keys,\n    programId,\n    data: Buffer.from([...anchorDataBuf.deposit, ...data]),\n  });\n}\n\nexport function makeWithdrawCpmmInInstruction(\n  programId: PublicKey,\n  owner: PublicKey,\n  authority: PublicKey,\n  poolId: PublicKey,\n  userLpAccount: PublicKey,\n  userVaultA: PublicKey,\n  userVaultB: PublicKey,\n  vaultA: PublicKey,\n  vaultB: PublicKey,\n  mintA: PublicKey,\n  mintB: PublicKey,\n  lpMint: PublicKey,\n\n  lpAmount: BN,\n  amountMinA: BN,\n  amountMinB: BN,\n): TransactionInstruction {\n  const dataLayout = struct([u64(\"lpAmount\"), u64(\"amountMinA\"), u64(\"amountMinB\")]);\n\n  const keys: Array<AccountMeta> = [\n    { pubkey: owner, isSigner: true, isWritable: false },\n    { pubkey: authority, isSigner: false, isWritable: false },\n    { pubkey: poolId, isSigner: false, isWritable: true },\n    { pubkey: userLpAccount, isSigner: false, isWritable: true },\n    { pubkey: userVaultA, isSigner: false, isWritable: true },\n    { pubkey: userVaultB, isSigner: false, isWritable: true },\n    { pubkey: vaultA, isSigner: false, isWritable: true },\n    { pubkey: vaultB, isSigner: false, isWritable: true },\n    { pubkey: TOKEN_PROGRAM_ID, isSigner: false, isWritable: false },\n    { pubkey: TOKEN_2022_PROGRAM_ID, isSigner: false, isWritable: false },\n    { pubkey: mintA, isSigner: false, isWritable: false },\n    { pubkey: mintB, isSigner: false, isWritable: false },\n    { pubkey: lpMint, isSigner: false, isWritable: true },\n    { pubkey: MEMO_PROGRAM_ID2, isSigner: false, isWritable: false },\n  ];\n\n  const data = Buffer.alloc(dataLayout.span);\n  dataLayout.encode(\n    {\n      lpAmount,\n      amountMinA,\n      amountMinB,\n    },\n    data,\n  );\n\n  return new TransactionInstruction({\n    keys,\n    programId,\n    data: Buffer.from([...anchorDataBuf.withdraw, ...data]),\n  });\n}\n\nexport function makeSwapCpmmBaseInInInstruction(\n  programId: PublicKey,\n  payer: PublicKey,\n  authority: PublicKey,\n  configId: PublicKey,\n  poolId: PublicKey,\n  userInputAccount: PublicKey,\n  userOutputAccount: PublicKey,\n  inputVault: PublicKey,\n  outputVault: PublicKey,\n  inputTokenProgram: PublicKey,\n  outputTokenProgram: PublicKey,\n  inputMint: PublicKey,\n  outputMint: PublicKey,\n  observationId: PublicKey,\n\n  amountIn: BN,\n  amounOutMin: BN,\n): TransactionInstruction {\n  const dataLayout = struct([u64(\"amountIn\"), u64(\"amounOutMin\")]);\n\n  const keys: Array<AccountMeta> = [\n    { pubkey: payer, isSigner: true, isWritable: false },\n    { pubkey: authority, isSigner: false, isWritable: false },\n    { pubkey: configId, isSigner: false, isWritable: false },\n    { pubkey: poolId, isSigner: false, isWritable: true },\n    { pubkey: userInputAccount, isSigner: false, isWritable: true },\n    { pubkey: userOutputAccount, isSigner: false, isWritable: true },\n    { pubkey: inputVault, isSigner: false, isWritable: true },\n    { pubkey: outputVault, isSigner: false, isWritable: true },\n    { pubkey: inputTokenProgram, isSigner: false, isWritable: false },\n    { pubkey: outputTokenProgram, isSigner: false, isWritable: false },\n    { pubkey: inputMint, isSigner: false, isWritable: false },\n    { pubkey: outputMint, isSigner: false, isWritable: false },\n    { pubkey: observationId, isSigner: false, isWritable: true },\n  ];\n\n  const data = Buffer.alloc(dataLayout.span);\n  dataLayout.encode(\n    {\n      amountIn,\n      amounOutMin,\n    },\n    data,\n  );\n\n  return new TransactionInstruction({\n    keys,\n    programId,\n    data: Buffer.from([...anchorDataBuf.swapBaseInput, ...data]),\n  });\n}\nexport function makeSwapCpmmBaseOutInInstruction(\n  programId: PublicKey,\n  payer: PublicKey,\n  authority: PublicKey,\n  configId: PublicKey,\n  poolId: PublicKey,\n  userInputAccount: PublicKey,\n  userOutputAccount: PublicKey,\n  inputVault: PublicKey,\n  outputVault: PublicKey,\n  inputTokenProgram: PublicKey,\n  outputTokenProgram: PublicKey,\n  inputMint: PublicKey,\n  outputMint: PublicKey,\n  observationId: PublicKey,\n\n  amountInMax: BN,\n  amountOut: BN,\n): TransactionInstruction {\n  const dataLayout = struct([u64(\"amountInMax\"), u64(\"amountOut\")]);\n\n  const keys: Array<AccountMeta> = [\n    { pubkey: payer, isSigner: true, isWritable: false },\n    { pubkey: authority, isSigner: false, isWritable: false },\n    { pubkey: configId, isSigner: false, isWritable: false },\n    { pubkey: poolId, isSigner: false, isWritable: true },\n    { pubkey: userInputAccount, isSigner: false, isWritable: true },\n    { pubkey: userOutputAccount, isSigner: false, isWritable: true },\n    { pubkey: inputVault, isSigner: false, isWritable: true },\n    { pubkey: outputVault, isSigner: false, isWritable: true },\n    { pubkey: inputTokenProgram, isSigner: false, isWritable: false },\n    { pubkey: outputTokenProgram, isSigner: false, isWritable: false },\n    { pubkey: inputMint, isSigner: false, isWritable: false },\n    { pubkey: outputMint, isSigner: false, isWritable: false },\n    { pubkey: observationId, isSigner: false, isWritable: true },\n  ];\n\n  const data = Buffer.alloc(dataLayout.span);\n  dataLayout.encode(\n    {\n      amountInMax,\n      amountOut,\n    },\n    data,\n  );\n\n  return new TransactionInstruction({\n    keys,\n    programId,\n    data: Buffer.from([...anchorDataBuf.swapBaseOutput, ...data]),\n  });\n}\n","import { publicKey, seq, struct, u64, u8, u16, blob, bool } from \"@/marshmallow\";\n\nexport const CpmmConfigInfoLayout = struct([\n  blob(8),\n  u8(\"bump\"),\n  bool(\"disableCreatePool\"),\n  u16(\"index\"),\n  u64(\"tradeFeeRate\"),\n  u64(\"protocolFeeRate\"),\n  u64(\"fundFeeRate\"),\n  u64(\"createPoolFee\"),\n\n  publicKey(\"protocolOwner\"),\n  publicKey(\"fundOwner\"),\n  seq(u64(), 16),\n]);\n\nexport const CpmmPoolInfoLayout = struct([\n  blob(8),\n\n  publicKey(\"configId\"),\n  publicKey(\"poolCreator\"),\n  publicKey(\"vaultA\"),\n  publicKey(\"vaultB\"),\n\n  publicKey(\"mintLp\"),\n  publicKey(\"mintA\"),\n  publicKey(\"mintB\"),\n\n  publicKey(\"mintProgramA\"),\n  publicKey(\"mintProgramB\"),\n\n  publicKey(\"observationId\"),\n\n  u8(\"bump\"),\n  u8(\"status\"),\n\n  u8(\"lpDecimals\"),\n  u8(\"mintDecimalA\"),\n  u8(\"mintDecimalB\"),\n\n  u64(\"lpAmount\"),\n  u64(\"protocolFeesMintA\"),\n  u64(\"protocolFeesMintB\"),\n  u64(\"fundFeesMintA\"),\n  u64(\"fundFeesMintB\"),\n  u64(\"openTime\"),\n\n  seq(u64(), 32),\n]);\n","import { PublicKey, TransactionInstruction } from \"@solana/web3.js\";\nimport { createTransferInstruction } from \"@solana/spl-token\";\nimport { forecastTransactionSize, solToWSol, TxBuilder, BN_ZERO, SOLMint, WSOLMint, addComputeBudget } from \"@/common\";\nimport { Token } from \"@/module\";\nimport { StableLayout } from \"../liquidity/stable\";\nimport ModuleBase, { ModuleBaseProps } from \"../moduleBase\";\nimport {\n  ComputeAmountOutLayout,\n  ComputeAmountOutRouteLayout,\n  PoolAccountInfoV4,\n  ReturnTypeGetAddLiquidityDefaultPool,\n} from \"./type\";\nimport { makeSwapInstruction } from \"./instrument\";\nimport { MakeMultiTransaction, MakeTransaction } from \"../type\";\nimport { InstructionType } from \"@/common/txTool/txType\";\nimport { BigNumberish, parseBigNumberish } from \"@/common/bignumber\";\nimport {\n  createWSolAccountInstructions,\n  closeAccountInstruction,\n  makeTransferInstruction,\n} from \"../account/instruction\";\nimport { TokenAccount } from \"../account/types\";\nimport { ComputeBudgetConfig } from \"@/raydium/type\";\n\ntype LiquidityPoolJsonInfo = any;\nexport default class TradeV2 extends ModuleBase {\n  constructor(params: ModuleBaseProps) {\n    super(params);\n  }\n\n  static getAddLiquidityDefaultPool({\n    addLiquidityPools,\n    poolInfosCache,\n  }: {\n    addLiquidityPools: LiquidityPoolJsonInfo[];\n    poolInfosCache: { [ammId: string]: PoolAccountInfoV4 };\n  }): ReturnTypeGetAddLiquidityDefaultPool {\n    if (addLiquidityPools.length === 0) return undefined;\n    if (addLiquidityPools.length === 1) return addLiquidityPools[0];\n    addLiquidityPools.sort((a, b) => b.version - a.version);\n    if (addLiquidityPools[0].version !== addLiquidityPools[1].version) return addLiquidityPools[0];\n\n    const _addLiquidityPools = addLiquidityPools.filter((i) => i.version === addLiquidityPools[0].version);\n\n    _addLiquidityPools.sort((a, b) => this.comparePoolSize(a, b, poolInfosCache));\n    return _addLiquidityPools[0];\n  }\n\n  private static comparePoolSize(\n    a: LiquidityPoolJsonInfo,\n    b: LiquidityPoolJsonInfo,\n    ammIdToPoolInfo: { [ammId: string]: PoolAccountInfoV4 },\n  ): number {\n    const aInfo = ammIdToPoolInfo[a.id];\n    const bInfo = ammIdToPoolInfo[b.id];\n    if (aInfo === undefined) return 1;\n    if (bInfo === undefined) return -1;\n\n    if (a.baseMint === b.baseMint) {\n      const sub = aInfo.baseReserve.sub(bInfo.baseReserve);\n      return sub.gte(BN_ZERO) ? -1 : 1;\n    } else {\n      const sub = aInfo.baseReserve.sub(bInfo.quoteReserve);\n      return sub.gte(BN_ZERO) ? -1 : 1;\n    }\n  }\n\n  private async getWSolAccounts(): Promise<TokenAccount[]> {\n    this.scope.checkOwner();\n    await this.scope.account.fetchWalletTokenAccounts();\n    const tokenAccounts = this.scope.account.tokenAccounts.filter((acc) => acc.mint.equals(WSOLMint));\n    tokenAccounts.sort((a, b) => {\n      if (a.isAssociated) return 1;\n      if (b.isAssociated) return -1;\n      return a.amount.lt(b.amount) ? -1 : 1;\n    });\n    return tokenAccounts;\n  }\n\n  public async unWrapWSol(props: {\n    amount: BigNumberish;\n    computeBudgetConfig?: ComputeBudgetConfig;\n    tokenProgram?: PublicKey;\n  }): Promise<MakeTransaction> {\n    const { amount, tokenProgram } = props;\n    const tokenAccounts = await this.getWSolAccounts();\n    const txBuilder = this.createTxBuilder();\n    txBuilder.addCustomComputeBudget(props.computeBudgetConfig);\n    const ins = await createWSolAccountInstructions({\n      connection: this.scope.connection,\n      owner: this.scope.ownerPubKey,\n      payer: this.scope.ownerPubKey,\n      amount: 0,\n    });\n    txBuilder.addInstruction(ins);\n\n    const amountBN = parseBigNumberish(amount);\n    for (let i = 0; i < tokenAccounts.length; i++) {\n      if (amountBN.gte(tokenAccounts[i].amount)) {\n        txBuilder.addInstruction({\n          instructions: [\n            closeAccountInstruction({\n              tokenAccount: tokenAccounts[i].publicKey!,\n              payer: this.scope.ownerPubKey,\n              owner: this.scope.ownerPubKey,\n              programId: tokenProgram,\n            }),\n          ],\n        });\n        amountBN.sub(tokenAccounts[i].amount);\n      } else {\n        txBuilder.addInstruction({\n          instructions: [\n            closeAccountInstruction({\n              tokenAccount: tokenAccounts[i].publicKey!,\n              payer: this.scope.ownerPubKey,\n              owner: this.scope.ownerPubKey,\n              programId: tokenProgram,\n            }),\n          ],\n        });\n        makeTransferInstruction({\n          destination: ins.addresses.newAccount,\n          source: tokenAccounts[i].publicKey!,\n          amount: amountBN,\n          owner: this.scope.ownerPubKey,\n          tokenProgram,\n        });\n      }\n    }\n\n    return txBuilder.build();\n  }\n\n  public async wrapWSol(amount: BigNumberish, tokenProgram?: PublicKey): Promise<MakeTransaction> {\n    const tokenAccounts = await this.getWSolAccounts();\n\n    const txBuilder = this.createTxBuilder();\n    const ins = await createWSolAccountInstructions({\n      connection: this.scope.connection,\n      owner: this.scope.ownerPubKey,\n      payer: this.scope.ownerPubKey,\n      amount,\n      skipCloseAccount: true,\n    });\n    txBuilder.addInstruction(ins);\n\n    if (tokenAccounts.length) {\n      // already have wsol account\n      txBuilder.addInstruction({\n        instructions: [\n          makeTransferInstruction({\n            // destination: ins.signers![0].publicKey,\n            destination: tokenAccounts[0].publicKey!,\n            source: ins.addresses.newAccount,\n            amount,\n            owner: this.scope.ownerPubKey,\n            tokenProgram,\n          }),\n        ],\n        endInstructions: [\n          closeAccountInstruction({\n            tokenAccount: ins.addresses.newAccount,\n            payer: this.scope.ownerPubKey,\n            owner: this.scope.ownerPubKey,\n            programId: tokenProgram,\n          }),\n        ],\n      });\n    }\n    return txBuilder.build();\n  }\n}\n","import { TOKEN_PROGRAM_ID } from \"@solana/spl-token\";\nimport { Connection, PublicKey, Signer, Transaction, TransactionInstruction } from \"@solana/web3.js\";\nimport BN from \"bn.js\";\nimport ModuleBase from \"../moduleBase\";\nimport { findProgramAddress, forecastTransactionSize, getMultipleAccountsInfo } from \"@/common\";\nimport { Token } from \"@/module\";\nimport { blob, publicKey, seq, struct, u64, u8 } from \"@/marshmallow\";\n\nexport interface SHOW_INFO {\n  programId: PublicKey;\n  poolId: PublicKey;\n  ammId: PublicKey;\n  ownerAccountId: PublicKey;\n  snapshotLpAmount: BN;\n\n  openTime: number;\n  endTime: number;\n\n  project: typeof Utils1216.VERSION_PROJECT[number];\n\n  canClaim: boolean;\n  canClaimErrorType: canClaimErrorType;\n\n  tokenInfo: {\n    mintAddress: PublicKey;\n    mintVault: PublicKey;\n    mintDecimals: number;\n    perLpLoss: BN;\n    debtAmount: BN;\n  }[];\n}\n\nexport type canClaimErrorType = \"outOfOperationalTime\" | \"alreadyClaimIt\" | undefined;\n\nexport default class Utils1216 extends ModuleBase {\n  static CLAIMED_NUM = 3;\n  static POOL_LAYOUT = struct([\n    blob(8),\n    u8(\"bump\"),\n    u8(\"status\"),\n    u64(\"openTime\"),\n    u64(\"endTime\"),\n    publicKey(\"ammId\"),\n\n    seq(\n      struct([\n        u8(\"mintDecimals\"),\n        publicKey(\"mintAddress\"),\n        publicKey(\"mintVault\"),\n        u64(\"perLpLoss\"),\n        u64(\"totalClaimedAmount\"),\n      ]),\n      Utils1216.CLAIMED_NUM,\n      \"tokenInfo\",\n    ),\n    seq(u64(), 10, \"padding\"),\n  ]);\n\n  static OWNER_LAYOUT = struct([\n    blob(8),\n    u8(\"bump\"),\n    u8(\"version\"),\n    publicKey(\"poolId\"),\n    publicKey(\"owner\"),\n    u64(\"lpAmount\"),\n\n    seq(\n      struct([publicKey(\"mintAddress\"), u64(\"debtAmount\"), u64(\"claimedAmount\")]),\n      Utils1216.CLAIMED_NUM,\n      \"tokenInfo\",\n    ),\n    seq(u64(), 4, \"padding\"),\n  ]);\n\n  static DEFAULT_POOL_ID = [\n    \"58oQChx4yWmvKdwLLZzBi4ChoCc2fqCUWBkwMihLYQo2\",\n    \"6UmmUiYoBjSrhakAobJw8BvkmJtDVxaeBtbt7rxWo1mg\",\n    \"AVs9TA4nWDzfPJE9gGVNJMVhcQy3V9PGazuz33BfG2RA\",\n    \"DVa7Qmb5ct9RCpaU7UTpSaf3GVMYz17vNVU67XpdCRut\",\n    \"7XawhbbxtsRcQA8KTkHT9f9nc6d69UwqCDh6U5EEbEmX\",\n    \"6a1CsrpeZubDjEJE9s1CMVheB6HWM5d7m1cj2jkhyXhj\",\n    \"EoNrn8iUhwgJySD1pHu8Qxm5gSQqLK3za4m8xzD2RuEb\",\n    \"AceAyRTWt4PyB2pHqf2qhDgNZDtKVNaxgL8Ru3V4aN1P\",\n    \"6tmFJbMk5yVHFcFy7X2K8RwHjKLr6KVFLYXpgpBNeAxB\",\n  ].map((i) => new PublicKey(i));\n\n  static SEED_CONFIG = {\n    pool: {\n      id: Buffer.from(\"pool_seed\", \"utf8\"),\n    },\n    owner: {\n      id: Buffer.from(\"user_claim_seed\", \"utf8\"),\n    },\n  };\n\n  static VERSION_PROJECT = [undefined, \"Francium\", \"Tulip\", \"Larix\"] as const;\n\n  // pda\n  static getPdaPoolId(\n    programId: PublicKey,\n    ammId: PublicKey,\n  ): {\n    publicKey: PublicKey;\n    nonce: number;\n  } {\n    return findProgramAddress([Utils1216.SEED_CONFIG.pool.id, ammId.toBuffer()], programId);\n  }\n\n  static getPdaOwnerId(\n    programId: PublicKey,\n    poolId: PublicKey,\n    owner: PublicKey,\n    version: number,\n  ): {\n    publicKey: PublicKey;\n    nonce: number;\n  } {\n    return findProgramAddress(\n      [\n        Utils1216.SEED_CONFIG.owner.id,\n        poolId.toBuffer(),\n        owner.toBuffer(),\n        // new BN(version).toBuffer()\n        Buffer.from(new BN(version).toArray()),\n      ],\n      programId,\n    );\n  }\n\n  static async getAllInfo({\n    connection,\n    programId,\n    poolIds,\n    wallet,\n    chainTime,\n  }: {\n    connection: Connection;\n    programId: PublicKey;\n    poolIds: PublicKey[];\n    wallet: PublicKey;\n    chainTime: number;\n  }): Promise<SHOW_INFO[]> {\n    if (poolIds.length === 0) return [];\n\n    const allPoolPda = poolIds.map((id) => Utils1216.getPdaPoolId(programId, id).publicKey);\n\n    const allOwnerPda: PublicKey[] = [];\n    for (let itemVersion = 0; itemVersion < Utils1216.VERSION_PROJECT.length; itemVersion++) {\n      allOwnerPda.push(\n        ...allPoolPda.map((id) => Utils1216.getPdaOwnerId(programId, id, wallet, itemVersion).publicKey),\n      );\n    }\n\n    const pdaInfo = await getMultipleAccountsInfo(connection, [...allPoolPda, ...allOwnerPda]);\n\n    const info: SHOW_INFO[] = [];\n    for (let index = 0; index < pdaInfo.length; index++) {\n      const version = Math.floor(index / poolIds.length);\n      const i = index % poolIds.length;\n\n      const itemPoolId = allPoolPda[i];\n      const itemOwnerId = allOwnerPda[index];\n      const itemPoolInfoS = pdaInfo[i];\n      const itemOwnerInfoS = pdaInfo[poolIds.length + index];\n      if (!(itemPoolInfoS && itemOwnerInfoS)) continue;\n      if (\n        itemPoolInfoS.data.length !== Utils1216.POOL_LAYOUT.span ||\n        itemOwnerInfoS.data.length !== Utils1216.OWNER_LAYOUT.span\n      )\n        continue;\n\n      const itemPoolInfo = Utils1216.POOL_LAYOUT.decode(itemPoolInfoS.data);\n      const itemOwnerInfo = Utils1216.OWNER_LAYOUT.decode(itemOwnerInfoS.data);\n\n      const openTime = itemPoolInfo.openTime.toNumber();\n      const endTime = itemPoolInfo.endTime.toNumber();\n\n      const hasCanClaimToken =\n        itemOwnerInfo.tokenInfo.map((i) => i.debtAmount.gt(new BN(0))).filter((i) => !i).length !== 3;\n      const inCanClaimTime = chainTime > openTime && chainTime < endTime && itemPoolInfo.status === 1;\n\n      const canClaim = hasCanClaimToken && inCanClaimTime;\n\n      info.push({\n        programId,\n        poolId: itemPoolId,\n        ammId: itemPoolInfo.ammId,\n        ownerAccountId: itemOwnerId,\n        snapshotLpAmount: itemOwnerInfo.lpAmount,\n\n        project: Utils1216.VERSION_PROJECT[version],\n\n        openTime,\n        endTime,\n\n        canClaim,\n        canClaimErrorType: !hasCanClaimToken ? \"alreadyClaimIt\" : !inCanClaimTime ? \"outOfOperationalTime\" : undefined,\n\n        tokenInfo: itemPoolInfo.tokenInfo.map((itemPoolToken, i) => ({\n          mintAddress: itemPoolToken.mintAddress,\n          mintVault: itemPoolToken.mintVault,\n          mintDecimals: itemPoolToken.mintDecimals,\n          perLpLoss: itemPoolToken.perLpLoss,\n          debtAmount: itemOwnerInfo.tokenInfo[i].debtAmount.add(itemOwnerInfo.tokenInfo[i].claimedAmount),\n        })),\n      });\n    }\n\n    return info;\n  }\n\n  public async makeClaimTransaction({\n    poolInfo,\n    ownerInfo,\n  }: {\n    connection: Connection;\n    poolInfo: SHOW_INFO;\n    ownerInfo: {\n      wallet?: PublicKey;\n      associatedOnly: boolean;\n    };\n  }): Promise<\n    {\n      transaction: Transaction;\n      signer: Signer[];\n    }[]\n  > {\n    if (!ownerInfo.wallet) this.scope.checkOwner();\n    const txBuilder = this.createTxBuilder();\n    const wallet = ownerInfo.wallet || this.scope.ownerPubKey;\n\n    const ownerVaultList: PublicKey[] = [];\n    for (const itemToken of poolInfo.tokenInfo) {\n      const { account, instructionParams } = await this.scope.account.getOrCreateTokenAccount({\n        mint: itemToken.mintAddress,\n        owner: this.scope.ownerPubKey,\n        notUseTokenAccount: itemToken.mintAddress.equals(Token.WSOL.mint),\n        createInfo: {\n          payer: wallet,\n          amount: 0,\n        },\n        skipCloseAccount: !itemToken.mintAddress.equals(Token.WSOL.mint),\n\n        associatedOnly: itemToken.mintAddress.equals(Token.WSOL.mint) ? false : ownerInfo.associatedOnly,\n      });\n      instructionParams && txBuilder.addInstruction(instructionParams);\n      ownerVaultList.push(account!);\n    }\n\n    txBuilder.addInstruction({\n      instructions: [\n        Utils1216.makeClaimInstruction({\n          programId: poolInfo.programId,\n          poolInfo,\n          ownerInfo: {\n            wallet,\n            ownerPda: poolInfo.ownerAccountId,\n            claimAddress: ownerVaultList,\n          },\n        }),\n      ],\n    });\n    const { transaction, signers } = txBuilder.build();\n\n    return [\n      {\n        transaction,\n        signer: signers,\n      },\n    ];\n  }\n\n  public async makeClaimAllTransaction({\n    poolInfos,\n    ownerInfo,\n  }: {\n    poolInfos: SHOW_INFO[];\n    ownerInfo: {\n      wallet?: PublicKey;\n      associatedOnly: boolean;\n    };\n  }): Promise<\n    {\n      transaction: Transaction;\n      signer: Signer[];\n    }[]\n  > {\n    const txBuilder = this.createTxBuilder();\n    const wallet = ownerInfo.wallet || this.scope.ownerPubKey;\n\n    const tempNewVault: { [mint: string]: PublicKey } = {};\n\n    for (const poolInfo of poolInfos) {\n      const ownerVaultList: PublicKey[] = [];\n      for (const itemToken of poolInfo.tokenInfo) {\n        const { account: tempVault, instructionParams } = await this.scope.account.getOrCreateTokenAccount({\n          mint: itemToken.mintAddress,\n          owner: this.scope.ownerPubKey,\n          notUseTokenAccount: itemToken.mintAddress.equals(Token.WSOL.mint),\n          createInfo: {\n            payer: wallet,\n            amount: 0,\n          },\n          skipCloseAccount: !itemToken.mintAddress.equals(Token.WSOL.mint),\n\n          associatedOnly: itemToken.mintAddress.equals(Token.WSOL.mint) ? false : ownerInfo.associatedOnly,\n        });\n        instructionParams && txBuilder.addInstruction(instructionParams);\n\n        if (tempVault) {\n          tempNewVault[itemToken.mintAddress.toString()] = tempVault;\n          ownerVaultList.push(tempVault);\n        }\n      }\n\n      txBuilder.addInstruction({\n        instructions: [\n          Utils1216.makeClaimInstruction({\n            programId: poolInfo.programId,\n            poolInfo,\n            ownerInfo: {\n              wallet,\n              ownerPda: poolInfo.ownerAccountId,\n              claimAddress: ownerVaultList,\n            },\n          }),\n        ],\n      });\n    }\n\n    const { transaction, signers } = txBuilder.build();\n    const instructions = txBuilder.allInstructions;\n\n    if (forecastTransactionSize(instructions, [wallet, ...signers.map((s) => s.publicKey)])) {\n      return [\n        {\n          transaction,\n          signer: signers,\n        },\n      ];\n    } else {\n      return [\n        {\n          transaction: new Transaction().add(...instructions.slice(0, txBuilder.AllTxData.instructions.length - 1)),\n          signer: signers,\n        },\n        {\n          transaction: new Transaction().add(...instructions.slice(txBuilder.AllTxData.instructions.length - 1)),\n          signer: [],\n        },\n        { transaction: new Transaction().add(...txBuilder.AllTxData.endInstructions), signer: [] },\n      ];\n    }\n  }\n\n  static makeClaimInstruction({\n    programId,\n    poolInfo,\n    ownerInfo,\n  }: {\n    programId: PublicKey;\n\n    poolInfo: SHOW_INFO;\n    ownerInfo: {\n      wallet: PublicKey;\n      ownerPda: PublicKey;\n      claimAddress: PublicKey[];\n    };\n  }): TransactionInstruction {\n    const dataLayout = struct([]);\n\n    const keys = [\n      { pubkey: ownerInfo.wallet, isSigner: true, isWritable: true },\n      { pubkey: poolInfo.poolId, isSigner: false, isWritable: true },\n      { pubkey: ownerInfo.ownerPda, isSigner: false, isWritable: true },\n\n      ...ownerInfo.claimAddress.map((i) => ({ pubkey: i, isSigner: false, isWritable: true })),\n      ...poolInfo.tokenInfo.map(({ mintVault }) => ({ pubkey: mintVault, isSigner: false, isWritable: true })),\n\n      { pubkey: TOKEN_PROGRAM_ID, isSigner: false, isWritable: false },\n    ];\n\n    const data = Buffer.alloc(dataLayout.span);\n    dataLayout.encode({}, data);\n    const aData = Buffer.from([...[10, 66, 208, 184, 161, 6, 191, 98], ...data]);\n\n    return new TransactionInstruction({\n      keys,\n      programId,\n      data: aData,\n    });\n  }\n}\n","import { PublicKey } from \"@solana/web3.js\";\nimport { TOKEN_PROGRAM_ID } from \"@solana/spl-token\";\nimport BN from \"bn.js\";\nimport ModuleBase from \"../moduleBase\";\nimport { TxVersion } from \"@/common/txTool/txType\";\nimport { MakeMultiTxData, TxBuildData, TxV0BuildData } from \"@/common/txTool/txTool\";\nimport { generatePubKey } from \"../account/util\";\nimport { BN_ZERO } from \"@/common/bignumber\";\nimport { makeCreateMarketInstruction } from \"./instrument\";\nimport { ComputeBudgetConfig } from \"@/raydium/type\";\n\ninterface ExtInfo {\n  address: {\n    marketId: PublicKey;\n    requestQueue: PublicKey;\n    eventQueue: PublicKey;\n    bids: PublicKey;\n    asks: PublicKey;\n    baseVault: PublicKey;\n    quoteVault: PublicKey;\n    baseMint: PublicKey;\n    quoteMin: PublicKey;\n  };\n}\n\nexport default class MarketV2 extends ModuleBase {\n  public async create<T extends TxVersion>({\n    baseInfo,\n    quoteInfo,\n    lotSize, // 1\n    tickSize, // 0.01\n    dexProgramId,\n    txVersion,\n    computeBudgetConfig,\n  }: {\n    baseInfo: {\n      mint: PublicKey;\n      decimals: number;\n    };\n    quoteInfo: {\n      mint: PublicKey;\n      decimals: number;\n    };\n    lotSize: number;\n    tickSize: number;\n    dexProgramId: PublicKey;\n    eventQueue?: PublicKey;\n    requestQueue?: PublicKey;\n    txVersion?: T;\n    computeBudgetConfig?: ComputeBudgetConfig;\n  }): Promise<MakeMultiTxData<T, ExtInfo>> {\n    const wallet = this.scope.ownerPubKey;\n    const market = generatePubKey({ fromPublicKey: wallet, programId: dexProgramId });\n    const requestQueue = generatePubKey({ fromPublicKey: wallet, programId: dexProgramId });\n    const eventQueue = generatePubKey({ fromPublicKey: wallet, programId: dexProgramId });\n    const bids = generatePubKey({ fromPublicKey: wallet, programId: dexProgramId });\n    const asks = generatePubKey({ fromPublicKey: wallet, programId: dexProgramId });\n    const baseVault = generatePubKey({ fromPublicKey: wallet, programId: TOKEN_PROGRAM_ID });\n    const quoteVault = generatePubKey({ fromPublicKey: wallet, programId: TOKEN_PROGRAM_ID });\n    const feeRateBps = 0;\n    const quoteDustThreshold = new BN(100);\n    function getVaultOwnerAndNonce() {\n      const vaultSignerNonce = new BN(0);\n      // eslint-disable-next-line no-constant-condition\n      while (true) {\n        try {\n          const vaultOwner = PublicKey.createProgramAddressSync(\n            [market.publicKey.toBuffer(), vaultSignerNonce.toArrayLike(Buffer, \"le\", 8)],\n            dexProgramId,\n          );\n          return { vaultOwner, vaultSignerNonce };\n        } catch (e) {\n          vaultSignerNonce.iaddn(1);\n          if (vaultSignerNonce.gt(new BN(25555))) throw Error(\"find vault owner error\");\n        }\n      }\n    }\n    const { vaultOwner, vaultSignerNonce } = getVaultOwnerAndNonce();\n    const baseLotSize = new BN(Math.round(10 ** baseInfo.decimals * lotSize));\n    const quoteLotSize = new BN(Math.round(lotSize * 10 ** quoteInfo.decimals * tickSize));\n\n    if (baseLotSize.eq(BN_ZERO)) throw Error(\"lot size is too small\");\n    if (quoteLotSize.eq(BN_ZERO)) throw Error(\"tick size or lot size is too small\");\n    const allTxArr = await makeCreateMarketInstruction({\n      connection: this.scope.connection,\n      wallet: this.scope.ownerPubKey,\n      marketInfo: {\n        programId: dexProgramId,\n        id: market,\n        baseMint: baseInfo.mint,\n        quoteMint: quoteInfo.mint,\n        baseVault,\n        quoteVault,\n        vaultOwner,\n        requestQueue,\n        eventQueue,\n        bids,\n        asks,\n\n        feeRateBps,\n        quoteDustThreshold,\n        vaultSignerNonce,\n        baseLotSize,\n        quoteLotSize,\n      },\n    });\n    const txBuilder = this.createTxBuilder();\n    txBuilder.addCustomComputeBudget(computeBudgetConfig);\n    txBuilder.addInstruction({\n      instructions: allTxArr[0].transaction.instructions,\n      signers: allTxArr[0].signer,\n    });\n\n    const extraTxBuildData: any[] = [];\n\n    for await (const txData of allTxArr.slice(1, allTxArr.length)) {\n      const extraTxBuilder = this.createTxBuilder();\n      extraTxBuilder.addCustomComputeBudget(computeBudgetConfig);\n      extraTxBuilder.addInstruction({\n        instructions: txData.transaction.instructions,\n        signers: txData.signer,\n        instructionTypes: txData.instructionTypes,\n      });\n      const build = await extraTxBuilder.versionBuild({ txVersion });\n      extraTxBuildData.push(build);\n    }\n\n    return txBuilder.versionMultiBuild<T, ExtInfo>({\n      extraPreBuildData: extraTxBuildData,\n      extInfo: {\n        address: {\n          marketId: market.publicKey,\n          requestQueue: requestQueue.publicKey,\n          eventQueue: eventQueue.publicKey,\n          bids: bids.publicKey,\n          asks: asks.publicKey,\n          baseVault: baseVault.publicKey,\n          quoteVault: quoteVault.publicKey,\n          baseMint: new PublicKey(baseInfo.mint),\n          quoteMin: new PublicKey(quoteInfo.mint),\n        },\n      },\n      txVersion,\n    }) as Promise<MakeMultiTxData<T, ExtInfo>>;\n  }\n}\n","import { TransactionInstruction, SYSVAR_RENT_PUBKEY } from \"@solana/web3.js\";\nimport { TOKEN_PROGRAM_ID } from \"@solana/spl-token\";\nimport { createInitializeAccountInstruction } from \"@solana/spl-token\";\nimport { Connection, Keypair, PublicKey, SystemProgram, Transaction } from \"@solana/web3.js\";\nimport BN from \"bn.js\";\nimport { MARKET_STATE_LAYOUT_V2 } from \"./layout\";\nimport { struct, u16, u32, u64, u8 } from \"@/marshmallow\";\nimport { InstructionType } from \"@/common/txTool/txType\";\n\ntype Transactions = {\n  transaction: Transaction;\n  signer?: Keypair[] | undefined;\n  instructionTypes?: string[];\n}[];\n\nexport function initializeMarket({\n  programId,\n  marketInfo,\n}: {\n  programId: PublicKey;\n  marketInfo: {\n    id: PublicKey;\n    requestQueue: PublicKey;\n    eventQueue: PublicKey;\n    bids: PublicKey;\n    asks: PublicKey;\n    baseVault: PublicKey;\n    quoteVault: PublicKey;\n    baseMint: PublicKey;\n    quoteMint: PublicKey;\n    authority?: PublicKey;\n    pruneAuthority?: PublicKey;\n\n    baseLotSize: BN;\n    quoteLotSize: BN;\n    feeRateBps: number;\n    vaultSignerNonce: BN;\n    quoteDustThreshold: BN;\n  };\n}): TransactionInstruction {\n  const dataLayout = struct([\n    u8(\"version\"),\n    u32(\"instruction\"),\n    u64(\"baseLotSize\"),\n    u64(\"quoteLotSize\"),\n    u16(\"feeRateBps\"),\n    u64(\"vaultSignerNonce\"),\n    u64(\"quoteDustThreshold\"),\n  ]);\n\n  const keys = [\n    { pubkey: marketInfo.id, isSigner: false, isWritable: true },\n    { pubkey: marketInfo.requestQueue, isSigner: false, isWritable: true },\n    { pubkey: marketInfo.eventQueue, isSigner: false, isWritable: true },\n    { pubkey: marketInfo.bids, isSigner: false, isWritable: true },\n    { pubkey: marketInfo.asks, isSigner: false, isWritable: true },\n    { pubkey: marketInfo.baseVault, isSigner: false, isWritable: true },\n    { pubkey: marketInfo.quoteVault, isSigner: false, isWritable: true },\n    { pubkey: marketInfo.baseMint, isSigner: false, isWritable: false },\n    { pubkey: marketInfo.quoteMint, isSigner: false, isWritable: false },\n    // Use a dummy address if using the new dex upgrade to save tx space.\n    {\n      pubkey: marketInfo.authority ? marketInfo.quoteMint : SYSVAR_RENT_PUBKEY,\n      isSigner: false,\n      isWritable: false,\n    },\n  ]\n    .concat(marketInfo.authority ? { pubkey: marketInfo.authority, isSigner: false, isWritable: false } : [])\n    .concat(\n      marketInfo.authority && marketInfo.pruneAuthority\n        ? { pubkey: marketInfo.pruneAuthority, isSigner: false, isWritable: false }\n        : [],\n    );\n\n  const data = Buffer.alloc(dataLayout.span);\n  dataLayout.encode(\n    {\n      version: 0,\n      instruction: 0,\n      baseLotSize: marketInfo.baseLotSize,\n      quoteLotSize: marketInfo.quoteLotSize,\n      feeRateBps: marketInfo.feeRateBps,\n      vaultSignerNonce: marketInfo.vaultSignerNonce,\n      quoteDustThreshold: marketInfo.quoteDustThreshold,\n    },\n    data,\n  );\n\n  return new TransactionInstruction({\n    keys,\n    programId,\n    data,\n  });\n}\n\nexport async function makeCreateMarketInstruction({\n  connection,\n  wallet,\n  marketInfo,\n}: {\n  connection: Connection;\n  wallet: PublicKey;\n  marketInfo: {\n    programId: PublicKey;\n    id: { publicKey: PublicKey; seed: string };\n    baseMint: PublicKey;\n    quoteMint: PublicKey;\n    baseVault: { publicKey: PublicKey; seed: string };\n    quoteVault: { publicKey: PublicKey; seed: string };\n    vaultOwner: PublicKey;\n\n    requestQueue: { publicKey: PublicKey; seed: string };\n    eventQueue: { publicKey: PublicKey; seed: string };\n    bids: { publicKey: PublicKey; seed: string };\n    asks: { publicKey: PublicKey; seed: string };\n\n    feeRateBps: number;\n    vaultSignerNonce: BN;\n    quoteDustThreshold: BN;\n\n    baseLotSize: BN;\n    quoteLotSize: BN;\n  };\n}): Promise<Transactions> {\n  const tx1 = new Transaction();\n  const accountLamports = await connection.getMinimumBalanceForRentExemption(165);\n  tx1.add(\n    SystemProgram.createAccountWithSeed({\n      fromPubkey: wallet,\n      basePubkey: wallet,\n      seed: marketInfo.baseVault.seed,\n      newAccountPubkey: marketInfo.baseVault.publicKey,\n      lamports: accountLamports,\n      space: 165,\n      programId: TOKEN_PROGRAM_ID,\n    }),\n    SystemProgram.createAccountWithSeed({\n      fromPubkey: wallet,\n      basePubkey: wallet,\n      seed: marketInfo.quoteVault.seed,\n      newAccountPubkey: marketInfo.quoteVault.publicKey,\n      lamports: accountLamports,\n      space: 165,\n      programId: TOKEN_PROGRAM_ID,\n    }),\n    createInitializeAccountInstruction(marketInfo.baseVault.publicKey, marketInfo.baseMint, marketInfo.vaultOwner),\n    createInitializeAccountInstruction(marketInfo.quoteVault.publicKey, marketInfo.quoteMint, marketInfo.vaultOwner),\n  );\n\n  const tx2 = new Transaction();\n  tx2.add(\n    SystemProgram.createAccountWithSeed({\n      fromPubkey: wallet,\n      basePubkey: wallet,\n      seed: marketInfo.id.seed,\n      newAccountPubkey: marketInfo.id.publicKey,\n      lamports: await connection.getMinimumBalanceForRentExemption(MARKET_STATE_LAYOUT_V2.span),\n      space: MARKET_STATE_LAYOUT_V2.span,\n      programId: marketInfo.programId,\n    }),\n    SystemProgram.createAccountWithSeed({\n      fromPubkey: wallet,\n      basePubkey: wallet,\n      seed: marketInfo.requestQueue.seed,\n      newAccountPubkey: marketInfo.requestQueue.publicKey,\n      lamports: await connection.getMinimumBalanceForRentExemption(5120 + 12),\n      space: 5120 + 12,\n      programId: marketInfo.programId,\n    }),\n    SystemProgram.createAccountWithSeed({\n      fromPubkey: wallet,\n      basePubkey: wallet,\n      seed: marketInfo.eventQueue.seed,\n      newAccountPubkey: marketInfo.eventQueue.publicKey,\n      lamports: await connection.getMinimumBalanceForRentExemption(262144 + 12),\n      space: 262144 + 12,\n      programId: marketInfo.programId,\n    }),\n    SystemProgram.createAccountWithSeed({\n      fromPubkey: wallet,\n      basePubkey: wallet,\n      seed: marketInfo.bids.seed,\n      newAccountPubkey: marketInfo.bids.publicKey,\n      lamports: await connection.getMinimumBalanceForRentExemption(65536 + 12),\n      space: 65536 + 12,\n      programId: marketInfo.programId,\n    }),\n    SystemProgram.createAccountWithSeed({\n      fromPubkey: wallet,\n      basePubkey: wallet,\n      seed: marketInfo.asks.seed,\n      newAccountPubkey: marketInfo.asks.publicKey,\n      lamports: await connection.getMinimumBalanceForRentExemption(65536 + 12),\n      space: 65536 + 12,\n      programId: marketInfo.programId,\n    }),\n    initializeMarket({\n      programId: marketInfo.programId,\n      marketInfo: {\n        id: marketInfo.id.publicKey,\n        requestQueue: marketInfo.requestQueue.publicKey,\n        eventQueue: marketInfo.eventQueue.publicKey,\n        bids: marketInfo.bids.publicKey,\n        asks: marketInfo.asks.publicKey,\n        baseVault: marketInfo.baseVault.publicKey,\n        quoteVault: marketInfo.quoteVault.publicKey,\n        baseMint: marketInfo.baseMint,\n        quoteMint: marketInfo.quoteMint,\n\n        baseLotSize: marketInfo.baseLotSize,\n        quoteLotSize: marketInfo.quoteLotSize,\n        feeRateBps: marketInfo.feeRateBps,\n        vaultSignerNonce: marketInfo.vaultSignerNonce,\n        quoteDustThreshold: marketInfo.quoteDustThreshold,\n      },\n    }),\n  );\n\n  return [\n    {\n      transaction: tx1,\n      signer: [],\n      instructionTypes: [\n        InstructionType.CreateAccount,\n        InstructionType.CreateAccount,\n        InstructionType.InitAccount,\n        InstructionType.InitAccount,\n      ],\n    },\n    {\n      transaction: tx2,\n      signer: [],\n      instructionTypes: [\n        InstructionType.CreateAccount,\n        InstructionType.CreateAccount,\n        InstructionType.CreateAccount,\n        InstructionType.CreateAccount,\n        InstructionType.CreateAccount,\n        InstructionType.InitMarket,\n      ],\n    },\n  ];\n}\n","import { blob, publicKey, struct, u64, WideBits } from \"@/marshmallow\";\n\nfunction accountFlagsLayout(property = \"accountFlags\"): WideBits<string> {\n  const ACCOUNT_FLAGS_LAYOUT = new WideBits(property);\n  ACCOUNT_FLAGS_LAYOUT.addBoolean(\"initialized\");\n  ACCOUNT_FLAGS_LAYOUT.addBoolean(\"market\");\n  ACCOUNT_FLAGS_LAYOUT.addBoolean(\"openOrders\");\n  ACCOUNT_FLAGS_LAYOUT.addBoolean(\"requestQueue\");\n  ACCOUNT_FLAGS_LAYOUT.addBoolean(\"eventQueue\");\n  ACCOUNT_FLAGS_LAYOUT.addBoolean(\"bids\");\n  ACCOUNT_FLAGS_LAYOUT.addBoolean(\"asks\");\n  return ACCOUNT_FLAGS_LAYOUT;\n}\n\nexport const MARKET_STATE_LAYOUT_V2 = struct([\n  blob(5),\n  accountFlagsLayout(\"accountFlags\"),\n  publicKey(\"ownAddress\"),\n  u64(\"vaultSignerNonce\"),\n  publicKey(\"baseMint\"),\n  publicKey(\"quoteMint\"),\n  publicKey(\"baseVault\"),\n  u64(\"baseDepositsTotal\"),\n  u64(\"baseFeesAccrued\"),\n  publicKey(\"quoteVault\"),\n  u64(\"quoteDepositsTotal\"),\n  u64(\"quoteFeesAccrued\"),\n  u64(\"quoteDustThreshold\"),\n  publicKey(\"requestQueue\"),\n  publicKey(\"eventQueue\"),\n  publicKey(\"bids\"),\n  publicKey(\"asks\"),\n  u64(\"baseLotSize\"),\n  u64(\"quoteLotSize\"),\n  u64(\"feeRateBps\"),\n  u64(\"referrerRebatesAccrued\"),\n  blob(7),\n]);\n","import { PublicKey } from \"@solana/web3.js\";\nimport ModuleBase from \"../moduleBase\";\nimport { makeClaimInstruction, makeClaimInstructionV4 } from \"./instruction\";\nimport { jsonInfo2PoolKeys } from \"@/common/utility\";\nimport { OwnerIdoInfo, IdoKeysData } from \"@/api/type\";\nimport { IDO_ALL_PROGRAM } from \"@/common/programId\";\nimport { WSOLMint } from \"@/common/pubKey\";\nimport { TxVersion } from \"@/common/txTool/txType\";\nimport { MakeTxData } from \"@/common/txTool/txTool\";\nimport BN from \"bn.js\";\n\nconst PROGRAM_TO_VERSION = {\n  [IDO_ALL_PROGRAM.IDO_PROGRAM_ID_V1.toString()]: 1,\n  [IDO_ALL_PROGRAM.IDO_PROGRAM_ID_V2.toString()]: 2,\n  [IDO_ALL_PROGRAM.IDO_PROGRAM_ID_V3.toString()]: 3,\n  [IDO_ALL_PROGRAM.IDO_PROGRAM_ID_V4.toString()]: 4,\n};\n\nexport default class MarketV2 extends ModuleBase {\n  public async claim<T extends TxVersion>({\n    ownerInfo,\n    idoKeys,\n    associatedOnly = true,\n    checkCreateATAOwner = false,\n    txVersion,\n  }: {\n    ownerInfo: OwnerIdoInfo[keyof OwnerIdoInfo] & { userIdoInfo: string };\n    idoKeys: IdoKeysData;\n    associatedOnly?: boolean;\n    checkCreateATAOwner?: boolean;\n    txVersion?: T;\n  }): Promise<MakeTxData> {\n    const txBuilder = this.createTxBuilder();\n    const version = PROGRAM_TO_VERSION[idoKeys.programId];\n\n    if (!version) this.logAndCreateError(\"invalid version\", version);\n    const poolConfigKey = jsonInfo2PoolKeys(idoKeys);\n\n    const [hasUnClaimedProject, hasUnClaimedBuy] = [!new BN(ownerInfo.coin).isZero(), !new BN(ownerInfo.pc).isZero()];\n\n    const userProjectUseSolBalance = poolConfigKey.projectInfo.mint.address.equals(WSOLMint);\n    const { account: userProjectTokenAccount, instructionParams: userProjectInstructionParams } =\n      await this.scope.account.getOrCreateTokenAccount({\n        tokenProgram: poolConfigKey.projectInfo.mint.programId,\n        mint: poolConfigKey.projectInfo.mint.address,\n        owner: this.scope.ownerPubKey,\n        createInfo: {\n          payer: this.scope.ownerPubKey,\n          amount: 0,\n        },\n        skipCloseAccount: !userProjectUseSolBalance,\n        notUseTokenAccount: userProjectUseSolBalance,\n        associatedOnly: userProjectUseSolBalance ? false : associatedOnly,\n        checkCreateATAOwner,\n      });\n\n    if (!userProjectTokenAccount && hasUnClaimedProject)\n      this.logAndCreateError(\"target token accounts not found\", \"mint\", idoKeys.projectInfo.mint.address);\n    hasUnClaimedProject && userProjectInstructionParams && txBuilder.addInstruction(userProjectInstructionParams);\n\n    const buyMintUseSolBalance = poolConfigKey.buyInfo.mint.address.equals(WSOLMint);\n    const { account: userBuyTokenAccount, instructionParams } = await this.scope.account.getOrCreateTokenAccount({\n      tokenProgram: poolConfigKey.buyInfo.mint.programId,\n      mint: poolConfigKey.buyInfo.mint.address,\n      owner: this.scope.ownerPubKey,\n      createInfo: {\n        payer: this.scope.ownerPubKey,\n        amount: 0,\n      },\n      skipCloseAccount: !buyMintUseSolBalance,\n      notUseTokenAccount: buyMintUseSolBalance,\n      associatedOnly: buyMintUseSolBalance ? false : associatedOnly,\n      checkCreateATAOwner,\n    });\n    if (!userProjectTokenAccount && hasUnClaimedBuy)\n      this.logAndCreateError(\"target token accounts not found\", \"mint\", idoKeys.projectInfo.mint.address);\n    hasUnClaimedBuy && instructionParams && txBuilder.addInstruction(instructionParams);\n\n    if (!userProjectTokenAccount || !userBuyTokenAccount)\n      this.logAndCreateError(\n        \"target token accounts not found\",\n        \"mint\",\n        idoKeys.projectInfo.mint.address,\n        idoKeys.buyInfo.mint.address,\n      );\n\n    if (version === 3) {\n      return txBuilder\n        .addInstruction({\n          instructions: [\n            ...(hasUnClaimedProject\n              ? [\n                  makeClaimInstruction<\"3\">(\n                    { programId: poolConfigKey.programId },\n                    {\n                      idoId: poolConfigKey.id,\n                      authority: poolConfigKey.authority,\n                      poolTokenAccount: poolConfigKey.projectInfo.vault,\n                      userTokenAccount: userProjectTokenAccount!,\n                      userIdoInfo: new PublicKey(ownerInfo.userIdoInfo),\n                      userOwner: this.scope.ownerPubKey,\n                    },\n                  ),\n                ]\n              : []),\n            ...(hasUnClaimedBuy\n              ? [\n                  makeClaimInstruction<\"3\">(\n                    { programId: new PublicKey(idoKeys.programId) },\n                    {\n                      idoId: poolConfigKey.id,\n                      authority: poolConfigKey.authority,\n                      poolTokenAccount: poolConfigKey.buyInfo.vault,\n                      userTokenAccount: userBuyTokenAccount!,\n                      userIdoInfo: new PublicKey(ownerInfo.userIdoInfo),\n                      userOwner: this.scope.ownerPubKey,\n                    },\n                  ),\n                ]\n              : []),\n          ],\n        })\n        .versionBuild({ txVersion }) as Promise<MakeTxData>;\n    }\n    if (version < 3) {\n      if (!hasUnClaimedProject && !hasUnClaimedBuy) this.logAndCreateError(\"no claimable rewards\");\n      return txBuilder\n        .addInstruction({\n          instructions: [\n            makeClaimInstruction<\"\">(\n              { programId: poolConfigKey.programId },\n              {\n                idoId: poolConfigKey.id,\n                authority: poolConfigKey.authority,\n                poolQuoteTokenAccount: poolConfigKey.buyInfo.vault,\n                poolBaseTokenAccount: poolConfigKey.projectInfo.vault,\n                userQuoteTokenAccount: userBuyTokenAccount!,\n                userBaseTokenAccount: userProjectTokenAccount!,\n                userIdoInfo: new PublicKey(ownerInfo.userIdoInfo),\n                userOwner: this.scope.ownerPubKey,\n              },\n            ),\n          ],\n        })\n        .versionBuild({ txVersion }) as Promise<MakeTxData>;\n    }\n\n    const keys = {\n      poolConfig: {\n        id: poolConfigKey.id,\n        programId: poolConfigKey.programId,\n        authority: poolConfigKey.authority,\n        baseVault: poolConfigKey.projectInfo.vault,\n        quoteVault: poolConfigKey.buyInfo.vault,\n        baseToken: idoKeys.projectInfo.mint,\n        quoteToken: idoKeys.buyInfo.mint,\n      },\n      userKeys: {\n        baseTokenAccount: userProjectTokenAccount!,\n        quoteTokenAccount: userBuyTokenAccount!,\n        ledgerAccount: new PublicKey(ownerInfo.userIdoInfo),\n        owner: this.scope.ownerPubKey,\n      },\n    };\n\n    return txBuilder\n      .addInstruction({\n        instructions: [\n          ...(hasUnClaimedProject ? [makeClaimInstructionV4({ ...keys, side: \"base\" })] : []),\n          ...(hasUnClaimedBuy ? [makeClaimInstructionV4({ ...keys, side: \"quote\" })] : []),\n        ],\n      })\n      .versionBuild({ txVersion }) as Promise<MakeTxData>;\n  }\n}\n","import { PublicKey, TransactionInstruction, SYSVAR_CLOCK_PUBKEY } from \"@solana/web3.js\";\nimport { TOKEN_PROGRAM_ID } from \"@solana/spl-token\";\nimport { RENT_PROGRAM_ID, CLOCK_PROGRAM_ID } from \"@/common/pubKey\";\nimport {\n  PurchaseInstructionKeys,\n  ClaimInstructionKeysV3,\n  ClaimInstructionKeys,\n  IdoClaimInstructionParams,\n} from \"./type\";\nimport { purchaseLayout, claimLayout } from \"./layout\";\n\nexport function makePurchaseInstruction({\n  programId,\n  amount,\n  instructionKeys,\n}: {\n  programId: PublicKey;\n  amount: string | number;\n  instructionKeys: PurchaseInstructionKeys;\n}): TransactionInstruction {\n  const keys = [\n    // system\n    { pubkey: new PublicKey(\"11111111111111111111111111111111\"), isSigner: false, isWritable: false },\n    { pubkey: TOKEN_PROGRAM_ID, isSigner: false, isWritable: false },\n    { pubkey: RENT_PROGRAM_ID, isSigner: false, isWritable: false },\n    { pubkey: CLOCK_PROGRAM_ID, isSigner: false, isWritable: false },\n    // pubkeys\n    ...Object.entries(instructionKeys).map(([name, pubkey]) => ({\n      pubkey,\n      isSigner: name === \"userOwner\",\n      isWritable: ![\"authority\", \"userOwner\", \"userIdoCheck\", \"userStakeInfo\"].includes(name),\n    })),\n  ];\n\n  const data = Buffer.alloc(purchaseLayout.span);\n  purchaseLayout.encode({ instruction: 1, amount: Number(amount) }, data);\n\n  return new TransactionInstruction({ keys, programId, data });\n}\n\nexport function makeClaimInstruction<Version extends \"\" | \"3\" = \"\">(\n  { programId }: { programId: PublicKey },\n  instructionKeys: Version extends \"3\" ? ClaimInstructionKeysV3 : ClaimInstructionKeys,\n): TransactionInstruction {\n  const keys = [\n    { pubkey: TOKEN_PROGRAM_ID, isSigner: false, isWritable: false },\n    { pubkey: CLOCK_PROGRAM_ID, isSigner: false, isWritable: false },\n    ...Object.entries(instructionKeys).map(([name, pubkey]) => ({\n      pubkey,\n      isSigner: name === \"userOwner\",\n      isWritable: ![\"authority\", \"userOwner\"].includes(name),\n    })),\n  ];\n\n  const data = Buffer.alloc(claimLayout.span);\n  claimLayout.encode({ instruction: 2 }, data);\n\n  return new TransactionInstruction({ keys, programId, data });\n}\n\nexport function makeClaimInstructionV4(params: IdoClaimInstructionParams): TransactionInstruction {\n  const { poolConfig, userKeys, side } = params;\n\n  const tokenAccount = side === \"base\" ? userKeys.baseTokenAccount : userKeys.quoteTokenAccount;\n  const vault = side === \"base\" ? poolConfig.baseVault : poolConfig.quoteVault;\n  const data = Buffer.alloc(claimLayout.span);\n  claimLayout.encode(\n    {\n      instruction: 2,\n    },\n    data,\n  );\n\n  const keys = [\n    {\n      pubkey: TOKEN_PROGRAM_ID,\n      isWritable: false,\n      isSigner: false,\n    },\n    {\n      pubkey: SYSVAR_CLOCK_PUBKEY,\n      isWritable: false,\n      isSigner: false,\n    },\n    // ido\n    {\n      pubkey: poolConfig.id,\n      isWritable: true,\n      isSigner: false,\n    },\n    {\n      pubkey: poolConfig.authority,\n      isWritable: false,\n      isSigner: false,\n    },\n    {\n      pubkey: vault,\n      isWritable: true,\n      isSigner: false,\n    },\n    // user\n    {\n      pubkey: tokenAccount,\n      isWritable: true,\n      isSigner: false,\n    },\n    {\n      pubkey: userKeys.ledgerAccount,\n      isWritable: true,\n      isSigner: false,\n    },\n    {\n      pubkey: userKeys.owner,\n      isWritable: false,\n      isSigner: true,\n    },\n  ];\n\n  return new TransactionInstruction({\n    programId: poolConfig.programId,\n    keys,\n    data,\n  });\n}\n","import { nu64, struct, u8 } from \"@/marshmallow\";\n\nexport const purchaseLayout = struct([u8(\"instruction\"), nu64(\"amount\")]);\nexport const claimLayout = struct([u8(\"instruction\")]);\n","import { PublicKey } from \"@solana/web3.js\";\nimport { MintLayout, TOKEN_2022_PROGRAM_ID, TOKEN_PROGRAM_ID } from \"@solana/spl-token\";\n\nimport { Price, Token } from \"@/module\";\nimport { validateAndParsePublicKey, SOLMint } from \"@/common/pubKey\";\nimport { ApiV3Token, JupTokenType } from \"@/api/type\";\nimport ModuleBase, { ModuleBaseProps } from \"../moduleBase\";\nimport { LoadParams } from \"../type\";\n\nimport { TokenInfo } from \"./type\";\nimport { SOL_INFO } from \"./constant\";\n\nexport default class TokenModule extends ModuleBase {\n  private _tokenList: TokenInfo[] = [];\n  private _tokenMap: Map<string, TokenInfo> = new Map();\n  private _blackTokenMap: Map<string, TokenInfo> = new Map();\n  private _mintGroup: { official: Set<string>; jup: Set<string>; extra: Set<string> } = {\n    official: new Set(),\n    jup: new Set(),\n    extra: new Set(),\n  };\n  private _whiteMap: Set<string> = new Set();\n  private _extraTokenList: TokenInfo[] = [];\n\n  constructor(params: ModuleBaseProps) {\n    super(params);\n  }\n\n  public async load(params?: LoadParams & { type?: JupTokenType }): Promise<void> {\n    this.checkDisabled();\n    const { forceUpdate = false, type = JupTokenType.Strict } = params || {};\n    const { mintList, blacklist, whiteList } = await this.scope.fetchV3TokenList(forceUpdate);\n    const jup = await this.scope.fetchJupTokenList(type, forceUpdate);\n    // reset all data\n    this._tokenList = [];\n    this._tokenMap = new Map();\n    this._blackTokenMap = new Map();\n    this._mintGroup = { official: new Set(), jup: new Set(), extra: new Set() };\n    this._whiteMap = new Set(whiteList);\n\n    this._tokenMap.set(SOL_INFO.address, SOL_INFO);\n    this._mintGroup.official.add(SOL_INFO.address);\n    blacklist.forEach((token) => {\n      this._blackTokenMap.set(token.address, { ...token, priority: -1 });\n    });\n\n    mintList.forEach((token) => {\n      if (this._blackTokenMap.has(token.address)) return;\n      this._tokenMap.set(token.address, {\n        ...token,\n        type: \"raydium\",\n        priority: 2,\n        programId:\n          token.programId ??\n          (token.tags.includes(\"token-2022\") ? TOKEN_2022_PROGRAM_ID.toBase58() : TOKEN_PROGRAM_ID.toBase58()),\n      });\n      this._mintGroup.official.add(token.address);\n    });\n\n    jup.forEach((token) => {\n      if (this._blackTokenMap.has(token.address) || this._tokenMap.has(token.address)) return;\n      this._tokenMap.set(token.address, {\n        ...token,\n        type: \"jupiter\",\n        priority: 1,\n        programId:\n          token.programId ??\n          (token.tags.includes(\"token-2022\") ? TOKEN_2022_PROGRAM_ID.toBase58() : TOKEN_PROGRAM_ID.toBase58()),\n      });\n      this._mintGroup.jup.add(token.address);\n    });\n\n    this._extraTokenList.forEach((token) => {\n      if (this._blackTokenMap.has(token.address) || this._tokenMap.has(token.address)) return;\n      this._tokenMap.set(token.address, {\n        ...token,\n        type: \"extra\",\n        priority: 1,\n        programId:\n          token.programId || token.tags.includes(\"token-2022\")\n            ? TOKEN_2022_PROGRAM_ID.toBase58()\n            : TOKEN_PROGRAM_ID.toBase58(),\n      });\n      this._mintGroup.extra.add(token.address);\n    });\n\n    this._tokenList = Array.from(this._tokenMap).map((data) => data[1]);\n  }\n\n  get tokenList(): TokenInfo[] {\n    return this._tokenList;\n  }\n  get tokenMap(): Map<string, TokenInfo> {\n    return this._tokenMap;\n  }\n  get blackTokenMap(): Map<string, TokenInfo> {\n    return this._blackTokenMap;\n  }\n  get mintGroup(): { official: Set<string>; jup: Set<string> } {\n    return this._mintGroup;\n  }\n  get whiteListMap(): Set<string> {\n    return this._whiteMap;\n  }\n\n  /** === util functions === */\n\n  public async getTokenInfo(mint: string | PublicKey): Promise<ApiV3Token> {\n    if (!mint) throw new Error(\"please input mint\");\n    const mintStr = mint.toString();\n    const info = this._tokenMap.get(mintStr);\n    if (info) return info;\n    if (mintStr.toLocaleUpperCase() === \"SOL\") return SOL_INFO;\n\n    const apiTokenInfo = (await this.scope.api.getTokenInfo([mintStr]))[0];\n    if (apiTokenInfo) {\n      this._mintGroup.extra.add(mintStr);\n      this._tokenMap.set(mintStr, { ...apiTokenInfo, priority: 2 });\n      return apiTokenInfo;\n    }\n\n    const onlineInfo = await this.scope.connection.getAccountInfo(new PublicKey(mintStr));\n    if (!onlineInfo) throw new Error(`mint address not found: ${mintStr}`);\n    const data = MintLayout.decode(onlineInfo.data);\n    const mintSymbol = mintStr.toString().substring(0, 6);\n    const fullInfo = {\n      chainId: 101,\n      address: mintStr,\n      programId: onlineInfo.owner.toBase58(),\n      logoURI: \"\",\n      symbol: mintSymbol,\n      name: mintSymbol,\n      decimals: data.decimals,\n      tags: [],\n      extensions: {},\n      priority: 0,\n      type: \"unknown\",\n    };\n    this._mintGroup.extra.add(mintStr);\n    this._tokenMap.set(mintStr, fullInfo);\n    return fullInfo;\n  }\n}\n","import { TOKEN_PROGRAM_ID, TOKEN_2022_PROGRAM_ID } from \"@solana/spl-token\";\nimport { PublicKey, TransactionInstruction, SystemProgram, AccountMeta } from \"@solana/web3.js\";\nimport BN from \"bn.js\";\n\nimport { ClmmInstrument, ONE, MIN_SQRT_PRICE_X64, MAX_SQRT_PRICE_X64, getPdaExBitmapAccount } from \"../clmm\";\nimport { InstructionType, jsonInfo2PoolKeys, MEMO_PROGRAM_ID } from \"@/common\";\nimport { struct, u64, u8 } from \"@/marshmallow\";\nimport { makeAMMSwapInstruction } from \"../liquidity/instruction\";\n\nimport { ApiV3PoolInfoItem, ApiV3PoolInfoConcentratedItem, PoolKeys, ClmmKeys, AmmV4Keys, AmmV5Keys } from \"@/api/type\";\nimport { ComputeAmountOutLayout, ReturnTypeMakeSwapInstruction } from \"./type\";\n\nexport function route1Instruction(\n  programId: PublicKey,\n  poolInfoA: ApiV3PoolInfoItem,\n  poolKeyA: PoolKeys,\n  poolKeyB: PoolKeys,\n\n  userSourceToken: PublicKey,\n  userRouteToken: PublicKey,\n  // userDestinationToken: PublicKey,\n  userPdaAccount: PublicKey,\n  ownerWallet: PublicKey,\n\n  inputMint: PublicKey,\n\n  amountIn: BN,\n  amountOut: BN,\n\n  tickArrayA?: PublicKey[],\n  // tickArrayB?: PublicKey[],\n): TransactionInstruction {\n  const dataLayout = struct([u8(\"instruction\"), u64(\"amountIn\"), u64(\"amountOut\")]);\n\n  const keys: { pubkey: PublicKey; isSigner: boolean; isWritable: boolean }[] = [\n    { pubkey: SystemProgram.programId, isSigner: false, isWritable: false },\n    { pubkey: TOKEN_PROGRAM_ID, isSigner: false, isWritable: false },\n    { pubkey: new PublicKey(poolKeyA.programId), isSigner: false, isWritable: false },\n    { pubkey: new PublicKey(poolKeyA.id), isSigner: false, isWritable: true },\n    { pubkey: new PublicKey(poolKeyB.id), isSigner: false, isWritable: true },\n\n    { pubkey: userSourceToken, isSigner: false, isWritable: true },\n    { pubkey: userRouteToken, isSigner: false, isWritable: true },\n    { pubkey: userPdaAccount, isSigner: false, isWritable: true },\n    { pubkey: ownerWallet, isSigner: true, isWritable: false },\n  ];\n\n  if (poolInfoA.type === \"Concentrated\") {\n    const poolKey = jsonInfo2PoolKeys(poolKeyA as ClmmKeys);\n    keys.push(\n      ...[\n        { pubkey: poolKey.config.id, isSigner: false, isWritable: false },\n        { pubkey: poolKey.id, isSigner: false, isWritable: true },\n        {\n          pubkey: poolKey.mintA.address.equals(inputMint) ? poolKey.vault.A : poolKey.vault.B,\n          isSigner: false,\n          isWritable: true,\n        },\n        {\n          pubkey: poolKey.mintA.address.equals(inputMint) ? poolKey.vault.B : poolKey.vault.A,\n          isSigner: false,\n          isWritable: true,\n        },\n        // { pubkey: poolKey.observationId, isSigner: false, isWritable: true }, // to do\n        { pubkey: poolKey.id, isSigner: false, isWritable: true },\n        ...tickArrayA!.map((i) => ({ pubkey: i, isSigner: false, isWritable: true })),\n      ],\n    );\n  } else if (poolInfoA.pooltype.includes(\"StablePool\")) {\n    const poolKey = jsonInfo2PoolKeys(poolKeyA as AmmV5Keys);\n    keys.push(\n      ...[\n        { pubkey: poolKey.authority, isSigner: false, isWritable: false },\n        { pubkey: poolKey.marketProgramId, isSigner: false, isWritable: false },\n        { pubkey: poolKey.id, isSigner: false, isWritable: true },\n        { pubkey: new PublicKey(\"CDSr3ssLcRB6XYPJwAfFt18MZvEZp4LjHcvzBVZ45duo\"), isSigner: false, isWritable: false },\n        { pubkey: poolKey.openOrders, isSigner: false, isWritable: true },\n        { pubkey: poolKey.vault.A, isSigner: false, isWritable: true },\n        { pubkey: poolKey.vault.B, isSigner: false, isWritable: true },\n        { pubkey: poolKey.marketId, isSigner: false, isWritable: true },\n        { pubkey: poolKey.marketBids, isSigner: false, isWritable: true },\n        { pubkey: poolKey.marketAsks, isSigner: false, isWritable: true },\n        { pubkey: poolKey.marketEventQueue, isSigner: false, isWritable: true },\n        { pubkey: poolKey.id, isSigner: false, isWritable: true },\n        { pubkey: poolKey.id, isSigner: false, isWritable: true },\n      ],\n    );\n  } else {\n    const poolKey = jsonInfo2PoolKeys(poolKeyA as AmmV4Keys);\n    keys.push(\n      ...[\n        { pubkey: poolKey.authority, isSigner: false, isWritable: false },\n        { pubkey: poolKey.marketProgramId, isSigner: false, isWritable: false },\n        { pubkey: poolKey.marketAuthority, isSigner: false, isWritable: false },\n        { pubkey: poolKey.openOrders, isSigner: false, isWritable: true },\n        { pubkey: poolKey.vault.A, isSigner: false, isWritable: true },\n        { pubkey: poolKey.vault.B, isSigner: false, isWritable: true },\n        { pubkey: poolKey.marketId, isSigner: false, isWritable: true },\n        { pubkey: poolKey.marketBids, isSigner: false, isWritable: true },\n        { pubkey: poolKey.marketAsks, isSigner: false, isWritable: true },\n        { pubkey: poolKey.marketEventQueue, isSigner: false, isWritable: true },\n        ...(poolKey.marketProgramId.toString() === \"srmqPvymJeFKQ4zGQed1GFppgkRHL9kaELCbyksJtPX\"\n          ? [\n              { pubkey: poolKey.marketBaseVault, isSigner: false, isWritable: true },\n              { pubkey: poolKey.marketQuoteVault, isSigner: false, isWritable: true },\n            ]\n          : [\n              { pubkey: poolKey.id, isSigner: false, isWritable: true },\n              { pubkey: poolKey.id, isSigner: false, isWritable: true },\n            ]),\n      ],\n    );\n  }\n\n  const data = Buffer.alloc(dataLayout.span);\n  dataLayout.encode(\n    {\n      instruction: 4,\n      amountIn,\n      amountOut,\n    },\n    data,\n  );\n\n  return new TransactionInstruction({\n    keys,\n    programId,\n    data,\n  });\n}\n\nexport function route2Instruction(\n  programId: PublicKey,\n  poolInfoB: ApiV3PoolInfoItem,\n  poolKeyA: PoolKeys,\n  poolKeyB: PoolKeys,\n\n  // userSourceToken: PublicKey,\n  userRouteToken: PublicKey,\n  userDestinationToken: PublicKey,\n  userPdaAccount: PublicKey,\n  ownerWallet: PublicKey,\n\n  routeMint: PublicKey,\n\n  // tickArrayA?: PublicKey[],\n  tickArrayB?: PublicKey[],\n): TransactionInstruction {\n  const dataLayout = struct([u8(\"instruction\")]);\n\n  const keys: { pubkey: PublicKey; isSigner: boolean; isWritable: boolean }[] = [\n    { pubkey: SystemProgram.programId, isSigner: false, isWritable: false },\n    { pubkey: TOKEN_PROGRAM_ID, isSigner: false, isWritable: false },\n    { pubkey: new PublicKey(String(poolKeyB.programId)), isSigner: false, isWritable: false },\n    { pubkey: new PublicKey(String(poolKeyB.id)), isSigner: false, isWritable: true },\n    { pubkey: new PublicKey(String(poolKeyA.id)), isSigner: false, isWritable: true },\n\n    { pubkey: userRouteToken, isSigner: false, isWritable: true },\n    { pubkey: userDestinationToken, isSigner: false, isWritable: true },\n    { pubkey: userPdaAccount, isSigner: false, isWritable: true },\n    { pubkey: ownerWallet, isSigner: true, isWritable: false },\n  ];\n\n  if (poolInfoB.type === \"Concentrated\") {\n    const poolKey = jsonInfo2PoolKeys(poolKeyB as ClmmKeys);\n    keys.push(\n      ...[\n        { pubkey: poolKey.config.id, isSigner: false, isWritable: false },\n        { pubkey: poolKey.id, isSigner: false, isWritable: true },\n        {\n          pubkey: poolKey.mintA.address.equals(routeMint) ? poolKey.vault.A : poolKey.vault.B,\n          isSigner: false,\n          isWritable: true,\n        },\n        {\n          pubkey: poolKey.mintA.address.equals(routeMint) ? poolKey.vault.B : poolKey.vault.A,\n          isSigner: false,\n          isWritable: true,\n        },\n        // { pubkey: poolKey.observationId, isSigner: false, isWritable: true }, // to do\n        { pubkey: poolKey.id, isSigner: false, isWritable: true },\n        ...tickArrayB!.map((i) => ({ pubkey: i, isSigner: false, isWritable: true })),\n      ],\n    );\n  } else if (poolInfoB.pooltype.includes(\"StablePool\")) {\n    const poolKey = jsonInfo2PoolKeys(poolKeyB as AmmV5Keys);\n    keys.push(\n      ...[\n        { pubkey: poolKey.authority, isSigner: false, isWritable: false },\n        { pubkey: poolKey.marketProgramId, isSigner: false, isWritable: false },\n        { pubkey: poolKey.id, isSigner: false, isWritable: true },\n        { pubkey: new PublicKey(\"CDSr3ssLcRB6XYPJwAfFt18MZvEZp4LjHcvzBVZ45duo\"), isSigner: false, isWritable: false },\n        { pubkey: poolKey.openOrders, isSigner: false, isWritable: true },\n        { pubkey: poolKey.vault.A, isSigner: false, isWritable: true },\n        { pubkey: poolKey.vault.B, isSigner: false, isWritable: true },\n        { pubkey: poolKey.marketId, isSigner: false, isWritable: true },\n        { pubkey: poolKey.marketBids, isSigner: false, isWritable: true },\n        { pubkey: poolKey.marketAsks, isSigner: false, isWritable: true },\n        { pubkey: poolKey.marketEventQueue, isSigner: false, isWritable: true },\n        { pubkey: poolKey.id, isSigner: false, isWritable: true },\n        { pubkey: poolKey.id, isSigner: false, isWritable: true },\n      ],\n    );\n  } else {\n    const poolKey = jsonInfo2PoolKeys(poolKeyB as AmmV4Keys);\n    keys.push(\n      ...[\n        { pubkey: poolKey.authority, isSigner: false, isWritable: false },\n        { pubkey: poolKey.marketProgramId, isSigner: false, isWritable: false },\n        { pubkey: poolKey.marketAuthority, isSigner: false, isWritable: false },\n        { pubkey: poolKey.openOrders, isSigner: false, isWritable: true },\n        { pubkey: poolKey.vault.A, isSigner: false, isWritable: true },\n        { pubkey: poolKey.vault.B, isSigner: false, isWritable: true },\n        { pubkey: poolKey.marketId, isSigner: false, isWritable: true },\n        { pubkey: poolKey.marketBids, isSigner: false, isWritable: true },\n        { pubkey: poolKey.marketAsks, isSigner: false, isWritable: true },\n        { pubkey: poolKey.marketEventQueue, isSigner: false, isWritable: true },\n        ...(poolKey.marketProgramId.toString() === \"srmqPvymJeFKQ4zGQed1GFppgkRHL9kaELCbyksJtPX\"\n          ? [\n              { pubkey: poolKey.marketBaseVault, isSigner: false, isWritable: true },\n              { pubkey: poolKey.marketQuoteVault, isSigner: false, isWritable: true },\n            ]\n          : [\n              { pubkey: poolKey.id, isSigner: false, isWritable: true },\n              { pubkey: poolKey.id, isSigner: false, isWritable: true },\n            ]),\n      ],\n    );\n  }\n\n  const data = Buffer.alloc(dataLayout.span);\n  dataLayout.encode(\n    {\n      instruction: 5,\n    },\n    data,\n  );\n\n  return new TransactionInstruction({\n    keys,\n    programId,\n    data,\n  });\n}\n\nfunction makeInnerInsKey(\n  itemPool: ApiV3PoolInfoItem,\n  itemPoolKey: PoolKeys,\n  inMint: string,\n  userInAccount: PublicKey,\n  userOutAccount: PublicKey,\n  remainingAccount: PublicKey[] | undefined,\n): AccountMeta[] {\n  if (itemPool.pooltype.includes(\"StablePool\")) {\n    const poolKey = jsonInfo2PoolKeys(itemPoolKey as AmmV5Keys);\n\n    return [\n      { pubkey: poolKey.programId, isSigner: false, isWritable: false },\n      { pubkey: userInAccount, isSigner: false, isWritable: true },\n      { pubkey: userOutAccount, isSigner: false, isWritable: true },\n\n      { pubkey: poolKey.id, isSigner: false, isWritable: true },\n      { pubkey: poolKey.authority, isSigner: false, isWritable: false },\n      { pubkey: poolKey.marketProgramId, isSigner: false, isWritable: false },\n      { pubkey: poolKey.id, isSigner: false, isWritable: true },\n      { pubkey: new PublicKey(\"CDSr3ssLcRB6XYPJwAfFt18MZvEZp4LjHcvzBVZ45duo\"), isSigner: false, isWritable: false },\n      { pubkey: poolKey.openOrders, isSigner: false, isWritable: true },\n      { pubkey: poolKey.vault.A, isSigner: false, isWritable: true },\n      { pubkey: poolKey.vault.B, isSigner: false, isWritable: true },\n      { pubkey: poolKey.marketId, isSigner: false, isWritable: true },\n      { pubkey: poolKey.marketBids, isSigner: false, isWritable: true },\n      { pubkey: poolKey.marketAsks, isSigner: false, isWritable: true },\n      { pubkey: poolKey.marketEventQueue, isSigner: false, isWritable: true },\n      { pubkey: poolKey.id, isSigner: false, isWritable: true },\n      { pubkey: poolKey.id, isSigner: false, isWritable: true },\n    ];\n  } else if (itemPool.type === \"Concentrated\") {\n    const pool = itemPool as ApiV3PoolInfoConcentratedItem;\n    const poolKey = jsonInfo2PoolKeys(itemPoolKey as ClmmKeys);\n    const baseIn = pool.mintA.address === inMint;\n    return [\n      { pubkey: new PublicKey(String(itemPool.programId)), isSigner: false, isWritable: false },\n      { pubkey: userInAccount, isSigner: false, isWritable: true },\n      { pubkey: userOutAccount, isSigner: false, isWritable: true },\n      { pubkey: poolKey.config.id, isSigner: false, isWritable: false },\n      { pubkey: poolKey.id, isSigner: false, isWritable: true },\n      { pubkey: baseIn ? poolKey.vault.A : poolKey.vault.B, isSigner: false, isWritable: true },\n      { pubkey: baseIn ? poolKey.vault.B : poolKey.vault.A, isSigner: false, isWritable: true },\n      // { pubkey: itemPool.observationId, isSigner: false, isWritable: true }, // to do\n      { pubkey: poolKey.id, isSigner: false, isWritable: true },\n      ...(poolKey.mintA.programId.equals(TOKEN_2022_PROGRAM_ID) || poolKey.mintB.programId.equals(TOKEN_2022_PROGRAM_ID)\n        ? [\n            { pubkey: TOKEN_2022_PROGRAM_ID, isSigner: false, isWritable: false },\n            { pubkey: MEMO_PROGRAM_ID, isSigner: false, isWritable: false },\n            { pubkey: baseIn ? poolKey.mintA.address : poolKey.mintB.address, isSigner: false, isWritable: false },\n            { pubkey: baseIn ? poolKey.mintB.address : poolKey.mintA.address, isSigner: false, isWritable: false },\n          ]\n        : []),\n      ...(remainingAccount ?? []).map((i) => ({ pubkey: i, isSigner: false, isWritable: true })),\n      {\n        pubkey: getPdaExBitmapAccount(new PublicKey(String(itemPool.programId)), new PublicKey(itemPool.id)).publicKey,\n        isSigner: false,\n        isWritable: true,\n      },\n    ];\n  } else {\n    const poolKey = jsonInfo2PoolKeys(itemPoolKey as AmmV4Keys);\n\n    return [\n      { pubkey: poolKey.programId, isSigner: false, isWritable: false },\n      { pubkey: userInAccount, isSigner: false, isWritable: true },\n      { pubkey: userOutAccount, isSigner: false, isWritable: true },\n\n      { pubkey: poolKey.id, isSigner: false, isWritable: true },\n      { pubkey: poolKey.authority, isSigner: false, isWritable: false },\n      { pubkey: poolKey.marketProgramId, isSigner: false, isWritable: false },\n      { pubkey: poolKey.marketAuthority, isSigner: false, isWritable: false },\n\n      { pubkey: poolKey.openOrders, isSigner: false, isWritable: true },\n      { pubkey: poolKey.vault.A, isSigner: false, isWritable: true },\n      { pubkey: poolKey.vault.B, isSigner: false, isWritable: true },\n      { pubkey: poolKey.marketId, isSigner: false, isWritable: true },\n      { pubkey: poolKey.marketBids, isSigner: false, isWritable: true },\n      { pubkey: poolKey.marketAsks, isSigner: false, isWritable: true },\n      { pubkey: poolKey.marketEventQueue, isSigner: false, isWritable: true },\n      ...(poolKey.marketProgramId.toString() === \"srmqPvymJeFKQ4zGQed1GFppgkRHL9kaELCbyksJtPX\"\n        ? [\n            { pubkey: poolKey.marketBaseVault, isSigner: false, isWritable: true },\n            { pubkey: poolKey.marketQuoteVault, isSigner: false, isWritable: true },\n          ]\n        : [\n            { pubkey: poolKey.id, isSigner: false, isWritable: true },\n            { pubkey: poolKey.id, isSigner: false, isWritable: true },\n          ]),\n    ];\n  }\n}\n\nexport function routeInstruction(\n  programId: PublicKey,\n  wallet: PublicKey,\n\n  userSourceToken: PublicKey,\n  userRouteToken: PublicKey,\n  userDestinationToken: PublicKey,\n\n  inputMint: string,\n  routeMint: string,\n\n  poolInfoA: ApiV3PoolInfoItem,\n  poolInfoB: ApiV3PoolInfoItem,\n\n  poolKeyA: PoolKeys,\n  poolKeyB: PoolKeys,\n\n  amountIn: BN,\n  amountOut: BN,\n\n  remainingAccounts: (PublicKey[] | undefined)[],\n): TransactionInstruction {\n  const dataLayout = struct([u8(\"instruction\"), u64(\"amountIn\"), u64(\"amountOut\")]);\n\n  const keys: { pubkey: PublicKey; isSigner: boolean; isWritable: boolean }[] = [\n    { pubkey: wallet, isSigner: true, isWritable: false },\n    { pubkey: TOKEN_PROGRAM_ID, isSigner: false, isWritable: false },\n  ];\n\n  keys.push(...makeInnerInsKey(poolInfoA, poolKeyA, inputMint, userSourceToken, userRouteToken, remainingAccounts[0]));\n\n  keys.push(\n    ...makeInnerInsKey(poolInfoB, poolKeyB, routeMint, userRouteToken, userDestinationToken, remainingAccounts[1]),\n  );\n\n  const data = Buffer.alloc(dataLayout.span);\n  dataLayout.encode(\n    {\n      instruction: 8,\n      amountIn,\n      amountOut,\n    },\n    data,\n  );\n\n  return new TransactionInstruction({\n    keys,\n    programId,\n    data,\n  });\n}\n\ntype MakeSwapInstructionParam = {\n  ownerInfo: {\n    wallet: PublicKey;\n    // tokenAccountA: PublicKey\n    // tokenAccountB: PublicKey\n\n    sourceToken: PublicKey;\n    routeToken?: PublicKey;\n    destinationToken: PublicKey;\n  };\n\n  inputMint: PublicKey;\n  routeProgram: PublicKey;\n\n  swapInfo: ComputeAmountOutLayout;\n};\n\nexport async function makeSwapInstruction({\n  routeProgram,\n  ownerInfo,\n  inputMint,\n  swapInfo,\n}: MakeSwapInstructionParam): Promise<ReturnTypeMakeSwapInstruction> {\n  if (swapInfo.routeType === \"amm\") {\n    if (swapInfo.poolInfo[0].type === \"Concentrated\") {\n      const _poolKey = jsonInfo2PoolKeys(swapInfo.poolKey[0] as ClmmKeys);\n      const sqrtPriceLimitX64 = inputMint.equals(_poolKey.mintA.address)\n        ? MIN_SQRT_PRICE_X64.add(ONE)\n        : MAX_SQRT_PRICE_X64.sub(ONE);\n\n      return await ClmmInstrument.makeSwapBaseInInstructions({\n        poolInfo: _poolKey as any,\n        poolKeys: _poolKey as any,\n        ownerInfo: {\n          wallet: ownerInfo.wallet,\n          tokenAccountA: _poolKey.mintA.address.equals(inputMint) ? ownerInfo.sourceToken : ownerInfo.destinationToken,\n          tokenAccountB: _poolKey.mintA.address.equals(inputMint) ? ownerInfo.destinationToken : ownerInfo.sourceToken,\n        },\n        inputMint,\n        amountIn: swapInfo.amountIn.amount.raw,\n        amountOutMin: swapInfo.minAmountOut.amount.raw.sub(swapInfo.minAmountOut.fee?.raw ?? new BN(0)),\n        sqrtPriceLimitX64,\n        remainingAccounts: swapInfo.remainingAccounts[0],\n      });\n    } else {\n      const _poolKey = swapInfo.poolKey[0] as AmmV4Keys | AmmV5Keys;\n\n      return {\n        signers: [],\n        instructions: [\n          makeAMMSwapInstruction({\n            poolKeys: _poolKey,\n            version: swapInfo.poolInfo[0].pooltype.includes(\"StablePool\") ? 5 : 4,\n            userKeys: {\n              tokenAccountIn: ownerInfo.sourceToken,\n              tokenAccountOut: ownerInfo.destinationToken,\n              owner: ownerInfo.wallet,\n            },\n            amountIn: swapInfo.amountIn.amount.raw,\n            amountOut: swapInfo.minAmountOut.amount.raw.sub(swapInfo.minAmountOut.fee?.raw ?? new BN(0)),\n            fixedSide: \"in\",\n          }),\n        ],\n        lookupTableAddress: _poolKey.lookupTableAccount ? [_poolKey.lookupTableAccount] : [],\n        instructionTypes: [\n          swapInfo.poolInfo[0].pooltype.includes(\"StablePool\")\n            ? InstructionType.AmmV5SwapBaseIn\n            : InstructionType.AmmV4SwapBaseIn,\n        ],\n        address: {},\n      };\n    }\n  } else if (swapInfo.routeType === \"route\") {\n    const poolInfo1 = swapInfo.poolInfo[0];\n    const poolInfo2 = swapInfo.poolInfo[1];\n    const poolKey1 = swapInfo.poolKey[0];\n    const poolKey2 = swapInfo.poolKey[1];\n\n    if (ownerInfo.routeToken === undefined) throw Error(\"owner route token account check error\");\n\n    return {\n      signers: [],\n      instructions: [\n        routeInstruction(\n          routeProgram,\n          ownerInfo.wallet,\n          ownerInfo.sourceToken,\n          ownerInfo.routeToken,\n          ownerInfo.destinationToken,\n\n          inputMint.toString(),\n          swapInfo.minMiddleAmountFee!.token.mint.toString(),\n\n          poolInfo1,\n          poolInfo2,\n          poolKey1,\n          poolKey2,\n\n          swapInfo.amountIn.amount.raw,\n          swapInfo.minAmountOut.amount.raw.sub(swapInfo.minAmountOut.fee?.raw ?? new BN(0)),\n\n          swapInfo.remainingAccounts,\n        ),\n      ],\n      instructionTypes: [InstructionType.RouteSwap],\n      lookupTableAddress: [poolKey1.lookupTableAccount, poolKey2.lookupTableAccount].filter(\n        (a) => a !== undefined,\n      ) as string[],\n      address: {},\n    };\n  } else {\n    throw Error(\"route type error\");\n  }\n}\n","import BN from \"bn.js\";\n\nexport const FEE_RATE_DENOMINATOR_VALUE = new BN(1_000_000);\n\nexport function ceilDiv(tokenAmount: BN, feeNumerator: BN, feeDenominator: BN): BN {\n  return tokenAmount.mul(feeNumerator).add(feeDenominator).sub(new BN(1)).div(feeDenominator);\n}\n\nexport function floorDiv(tokenAmount: BN, feeNumerator: BN, feeDenominator: BN): BN {\n  return tokenAmount.mul(feeNumerator).div(feeDenominator);\n}\n\nexport class CpmmFee {\n  static tradingFee(amount: BN, tradeFeeRate: BN): BN {\n    return ceilDiv(amount, tradeFeeRate, FEE_RATE_DENOMINATOR_VALUE);\n  }\n  static protocolFee(amount: BN, protocolFeeRate: BN): BN {\n    return floorDiv(amount, protocolFeeRate, FEE_RATE_DENOMINATOR_VALUE);\n  }\n  static fundFee(amount: BN, fundFeeRate: BN): BN {\n    return floorDiv(amount, fundFeeRate, FEE_RATE_DENOMINATOR_VALUE);\n  }\n}\n","import BN from \"bn.js\";\nimport { RoundDirection, SwapWithoutFeesResult, TradingTokenResult } from \"./calculator\";\n\nfunction checkedRem(dividend: BN, divisor: BN): BN {\n  if (divisor.isZero()) throw Error(\"divisor is zero\");\n\n  const result = dividend.mod(divisor);\n  return result;\n}\n\nfunction checkedCeilDiv(dividend: BN, rhs: BN): BN[] {\n  if (rhs.isZero()) throw Error(\"rhs is zero\");\n\n  let quotient = dividend.div(rhs);\n\n  if (quotient.isZero()) throw Error(\"quotient is zero\");\n\n  let remainder = checkedRem(dividend, rhs);\n\n  if (remainder.gt(ZERO)) {\n    quotient = quotient.add(new BN(1));\n\n    let rhs = dividend.div(quotient);\n    remainder = checkedRem(dividend, quotient);\n    if (remainder.gt(ZERO)) {\n      rhs = rhs.add(new BN(1));\n    }\n  }\n  return [quotient, rhs];\n}\n\nconst ZERO = new BN(0);\n\nexport class ConstantProductCurve {\n  static swapWithoutFees(sourceAmount: BN, swapSourceAmount: BN, swapDestinationAmount: BN): SwapWithoutFeesResult {\n    const invariant = swapSourceAmount.mul(swapDestinationAmount);\n\n    const newSwapSourceAmount = swapSourceAmount.add(sourceAmount);\n    const [newSwapDestinationAmount, _newSwapSourceAmount] = checkedCeilDiv(invariant, newSwapSourceAmount);\n\n    const sourceAmountSwapped = _newSwapSourceAmount.sub(swapSourceAmount);\n    const destinationAmountSwapped = swapDestinationAmount.sub(newSwapDestinationAmount);\n    if (destinationAmountSwapped.isZero()) throw Error(\"destinationAmountSwapped is zero\");\n\n    return {\n      sourceAmountSwapped,\n      destinationAmountSwapped,\n    };\n  }\n\n  static lpTokensToTradingTokens(\n    lpTokenAmount: BN,\n    lpTokenSupply: BN,\n    swapTokenAmount0: BN,\n    swapTokenAmount1: BN,\n    roundDirection: RoundDirection,\n  ): TradingTokenResult {\n    let tokenAmount0 = lpTokenAmount.mul(swapTokenAmount0).div(lpTokenSupply);\n    let tokenAmount1 = lpTokenAmount.mul(swapTokenAmount1).div(lpTokenSupply);\n\n    if (roundDirection === RoundDirection.Floor) {\n      return { tokenAmount0, tokenAmount1 };\n    } else if (roundDirection === RoundDirection.Ceiling) {\n      const tokenRemainder0 = checkedRem(lpTokenAmount.mul(swapTokenAmount0), lpTokenSupply);\n\n      if (tokenRemainder0.gt(ZERO) && tokenAmount0.gt(ZERO)) {\n        tokenAmount0 = tokenAmount0.add(new BN(1));\n      }\n\n      const token1Remainder = checkedRem(lpTokenAmount.mul(swapTokenAmount1), lpTokenSupply);\n\n      if (token1Remainder.gt(ZERO) && tokenAmount1.gt(ZERO)) {\n        tokenAmount1 = tokenAmount1.add(new BN(1));\n      }\n\n      return { tokenAmount0, tokenAmount1 };\n    }\n    throw Error(\"roundDirection value error\");\n  }\n}\n","import BN from \"bn.js\";\nimport { CpmmFee } from \"./fee\";\nimport { ConstantProductCurve } from \"./constantProduct\";\n\nexport enum RoundDirection {\n  Floor,\n  Ceiling,\n}\n\nexport type SwapWithoutFeesResult = { sourceAmountSwapped: BN; destinationAmountSwapped: BN };\n\nexport type TradingTokenResult = { tokenAmount0: BN; tokenAmount1: BN };\n\nexport type SwapResult = {\n  newSwapSourceAmount: BN;\n  newSwapDestinationAmount: BN;\n  sourceAmountSwapped: BN;\n  destinationAmountSwapped: BN;\n  tradeFee: BN;\n};\n\nexport class CurveCalculator {\n  static validate_supply(tokenAmount0: BN, tokenAmount1: BN): void {\n    if (tokenAmount0.isZero()) throw Error(\"tokenAmount0 is zero\");\n    if (tokenAmount1.isZero()) throw Error(\"tokenAmount1 is zero\");\n  }\n\n  static swap(sourceAmount: BN, swapSourceAmount: BN, swapDestinationAmount: BN, tradeFeeRate: BN): SwapResult {\n    const tradeFee = CpmmFee.tradingFee(sourceAmount, tradeFeeRate);\n\n    const sourceAmountLessFees = sourceAmount.sub(tradeFee);\n\n    const { sourceAmountSwapped, destinationAmountSwapped } = ConstantProductCurve.swapWithoutFees(\n      sourceAmountLessFees,\n      swapSourceAmount,\n      swapDestinationAmount,\n    );\n\n    const _sourceAmountSwapped = sourceAmountSwapped.add(tradeFee);\n    return {\n      newSwapSourceAmount: swapSourceAmount.add(_sourceAmountSwapped),\n      newSwapDestinationAmount: swapDestinationAmount.sub(destinationAmountSwapped),\n      sourceAmountSwapped: _sourceAmountSwapped,\n      destinationAmountSwapped,\n      tradeFee,\n    };\n  }\n}\n","import { PublicKey } from \"@solana/web3.js\";\nimport { SERUM_PROGRAM_ID_V3 } from \"@/common/programId\";\nimport { SerumVersion } from \"./type\";\n\n// serum program id string => serum version\nexport const SERUM_PROGRAMID_TO_VERSION: {\n  [key: string]: SerumVersion;\n} = {\n  [SERUM_PROGRAM_ID_V3.toBase58()]: 3,\n};\n\n// serum version => serum program id\nexport const SERUM_VERSION_TO_PROGRAMID: { [key in SerumVersion]?: PublicKey } & {\n  [K: number]: PublicKey;\n} = {\n  3: SERUM_PROGRAM_ID_V3,\n};\n","import { blob, GetStructureSchema, publicKey, struct, u64 } from \"@/marshmallow\";\n\n/* ================= state layouts ================= */\nexport const MARKET_STATE_LAYOUT_V3 = struct([\n  blob(5),\n\n  blob(8), // accountFlagsLayout('accountFlags'),\n\n  publicKey(\"ownAddress\"),\n\n  u64(\"vaultSignerNonce\"),\n\n  publicKey(\"baseMint\"),\n  publicKey(\"quoteMint\"),\n\n  publicKey(\"baseVault\"),\n  u64(\"baseDepositsTotal\"),\n  u64(\"baseFeesAccrued\"),\n\n  publicKey(\"quoteVault\"),\n  u64(\"quoteDepositsTotal\"),\n  u64(\"quoteFeesAccrued\"),\n\n  u64(\"quoteDustThreshold\"),\n\n  publicKey(\"requestQueue\"),\n  publicKey(\"eventQueue\"),\n\n  publicKey(\"bids\"),\n  publicKey(\"asks\"),\n\n  u64(\"baseLotSize\"),\n  u64(\"quoteLotSize\"),\n\n  u64(\"feeRateBps\"),\n\n  u64(\"referrerRebatesAccrued\"),\n\n  blob(7),\n]);\n\nexport type MarketStateLayoutV3 = typeof MARKET_STATE_LAYOUT_V3;\nexport type MarketStateLayout = MarketStateLayoutV3;\n\nexport type MarketStateV3 = GetStructureSchema<MarketStateLayoutV3>;\nexport type MarketState = MarketStateV3;\n\n/* ================= index ================= */\n// version => market state layout\nexport const MARKET_VERSION_TO_STATE_LAYOUT: {\n  [version: number]: MarketStateLayout;\n} = {\n  3: MARKET_STATE_LAYOUT_V3,\n};\n","import { PublicKey } from \"@solana/web3.js\";\n\nimport { createLogger } from \"@/common/logger\";\n\nimport { SERUM_PROGRAMID_TO_VERSION, SERUM_VERSION_TO_PROGRAMID } from \"./id\";\nimport { MARKET_VERSION_TO_STATE_LAYOUT, MarketStateLayout } from \"./layout\";\n\nconst logger = createLogger(\"Serum\");\n\nexport class Market {\n  /* ================= get version and program id ================= */\n  static getProgramId(version: number): PublicKey {\n    const programId = SERUM_VERSION_TO_PROGRAMID[version];\n    if (!programId) logger.logWithError(\"invalid version\", \"version\", version);\n\n    return programId;\n  }\n\n  static getVersion(programId: PublicKey): number {\n    const programIdString = programId.toBase58();\n\n    const version = SERUM_PROGRAMID_TO_VERSION[programIdString];\n    if (!version) logger.logWithError(\"invalid program id\", \"programId\", programIdString);\n\n    return version;\n  }\n\n  /* ================= get layout ================= */\n  static getStateLayout(version: number): MarketStateLayout {\n    const STATE_LAYOUT = MARKET_VERSION_TO_STATE_LAYOUT[version];\n    if (!STATE_LAYOUT) logger.logWithError(!!STATE_LAYOUT, \"invalid version\", \"version\", version);\n\n    return STATE_LAYOUT;\n  }\n\n  static getLayouts(version: number): { state: MarketStateLayout } {\n    return { state: this.getStateLayout(version) };\n  }\n\n  /* ================= get key ================= */\n  static getAssociatedAuthority({ programId, marketId }: { programId: PublicKey; marketId: PublicKey }): {\n    publicKey: PublicKey;\n    nonce: number;\n  } {\n    const seeds = [marketId.toBuffer()];\n\n    let nonce = 0;\n    let publicKey: PublicKey;\n\n    while (nonce < 100) {\n      try {\n        const seedsWithNonce = seeds.concat(Buffer.from([nonce]), Buffer.alloc(7));\n        publicKey = PublicKey.createProgramAddressSync(seedsWithNonce, programId);\n      } catch (err) {\n        if (err instanceof TypeError) {\n          throw err;\n        }\n        nonce++;\n        continue;\n      }\n      return { publicKey, nonce };\n    }\n\n    logger.logWithError(\"unable to find a viable program address nonce\", \"params\", {\n      programId,\n      marketId,\n    });\n\n    return { publicKey: PublicKey.default, nonce };\n  }\n}\n","import { PublicKey, Signer, Transaction, TransactionInstruction, VersionedTransaction } from \"@solana/web3.js\";\nimport { Mint, TransferFeeConfig } from \"@solana/spl-token\";\nimport { MultiTxExecuteParam, TxBuilder } from \"../common/txTool/txTool\";\nimport { TokenAmount } from \"../module/amount\";\nimport BN from \"bn.js\";\n\nexport type SignAllTransactions =\n  | (<T extends Transaction | VersionedTransaction>(transaction: T[]) => Promise<T[]>)\n  | undefined;\n\nexport interface MakeTransaction<T = Record<string, any>> {\n  builder: TxBuilder;\n  signers: Signer[];\n  transaction: Transaction;\n  instructionTypes: string[];\n  execute: () => Promise<{ txId: string; signedTx: Transaction }>;\n  extInfo: T;\n}\n\nexport interface MakeV0Transaction<T = Record<string, any>> {\n  builder: TxBuilder;\n  signers: Signer[];\n  transaction: VersionedTransaction;\n  instructionTypes: string[];\n  execute: () => Promise<string>;\n  extInfo: T;\n}\n\nexport interface MakeMultiTransaction {\n  builder: TxBuilder;\n  signers: Signer[][];\n  transactions: Transaction[];\n  instructionTypes: string[];\n  execute: (params?: MultiTxExecuteParam) => Promise<{\n    txIds: string[];\n    signedTxs: Transaction[];\n  }>;\n  extInfo: Record<string, any>;\n}\n\nexport interface InstructionReturn {\n  instruction: TransactionInstruction;\n  instructionType: string;\n}\n\nexport interface ComputeBudgetConfig {\n  units?: number;\n  microLamports?: number;\n}\n\nexport interface LoadParams {\n  forceUpdate?: boolean;\n}\n\nexport interface TransferAmountFee {\n  amount: TokenAmount;\n  fee: TokenAmount | undefined;\n  expirationTime: number | undefined;\n}\nexport interface GetTransferAmountFee {\n  amount: BN;\n  fee: BN | undefined;\n  expirationTime: number | undefined;\n}\n\nexport type ReturnTypeFetchMultipleMintInfo = Mint & { feeConfig: TransferFeeConfig | undefined };\nexport interface ReturnTypeFetchMultipleMintInfos {\n  [mint: string]: ReturnTypeFetchMultipleMintInfo;\n}\n\ntype Primitive = boolean | number | string | null | undefined | PublicKey;\n\n/**\n *\n * @example\n * ```typescript\n * interface A {\n *   keyA: string;\n *   keyB: string;\n *   map: {\n *     hello: string;\n *     i: number;\n *   };\n *   list: (string | number)[];\n *   keyC: number;\n * }\n *\n * type WrappedA = ReplaceType<A, string, boolean> // {\n *   keyA: boolean;\n *   keyB: boolean;\n *   map: {\n *     hello: boolean;\n *     i: number;\n *   };\n *   list: (number | boolean)[];\n *   keyC: number;\n * }\n * ```\n */\nexport type ReplaceType<Old, From, To> = {\n  [T in keyof Old]: Old[T] extends From // to avoid case: Old[T] is an Object,\n    ? Exclude<Old[T], From> | To // when match,  directly replace\n    : Old[T] extends Primitive // judge whether need recursively replace\n    ? From extends Old[T] // it's an Object\n      ? Exclude<Old[T], From> | To // directly replace\n      : Old[T] // stay same\n    : ReplaceType<Old[T], From, To>; // recursively replace\n};\n\nexport type MayArray<T> = T | Array<T>;\n\nexport type MayDeepArray<T> = T | Array<MayDeepArray<T>>;\n\nexport type MayFunction<T, PS extends any[] = []> = T | ((...Params: PS) => T);\n\nexport type ArrayItem<T extends ReadonlyArray<any>> = T extends Array<infer P> ? P : never;\n\nexport type ExactPartial<T, U> = {\n  [P in Extract<keyof T, U>]?: T[P];\n} & {\n  [P in Exclude<keyof T, U>]: T[P];\n};\n\nexport type ExactRequired<T, U> = {\n  [P in Extract<keyof T, U>]-?: T[P];\n} & {\n  [P in Exclude<keyof T, U>]: T[P];\n};\n\n/**\n * extract only string and number\n */\nexport type SKeyof<O> = Extract<keyof O, string>;\n\nexport type GetValue<T, K> = K extends keyof T ? T[K] : undefined;\n/**\n * @example\n * type A = { a: number; b: string; c?: string }\n * type B = { a: string; c: string; d?: boolean }\n *\n * type D = SOR<A, B> // { a: number | string; b: string | undefined; c: string | undefined; d: boolean | undefined } // ! if use SOR, you lost union type guard feature, try NOT to use this trick\n */\nexport type SOR<T, U> = { [K in keyof T | keyof U]: GetValue<T, K> | GetValue<U, K> };\n\nexport type Fallback<T, FallbackT> = T extends undefined ? FallbackT : T;\n\n/**\n * @example\n * type A = { a: number; b: string; c?: string }\n * type B = { a: string; c: string; d?: boolean }\n *\n * type D = Cover<A, B> // { a: string; b: string; c: string; d?: boolean}\n */\nexport type Cover<O, T> = { [K in SKeyof<O> | SKeyof<T>]: Fallback<GetValue<T, K>, GetValue<O, K>> };\n\nexport type UnionCover<O, T> = T extends T ? Cover<O, T> : never;\n\ntype MergeArr<Arr> = (Arr extends (infer T)[] ? T : never)[];\n\n/**\n * typescript type helper function\n * @example\n * type A = { hello: string; version: 3 }[]\n * type B = { hello: string; version: 5 }[]\n * type OK = MergeArr<A | B> // ({ hello: string; version: 3 } | { hello: string; version: 5 })[]\n * type Wrong = A | B // { hello: string; version: 3 }[] | { hello: string; version: 5 }[] // <= this type can't have auto type intelligense of array.map\n */\nexport const unionArr = <T>(arr: T): MergeArr<T> => arr as unknown as MergeArr<T>;\n"],"mappings":"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","names":["raydium_exports","__export","AMM_CONFIG_SEED","AmmConfigLayout","BIT_PRECISION","Clmm","ClmmInstrument","ConstantProductCurve","CpmmConfigInfoLayout","CpmmFee","CpmmPoolInfoLayout","CurveCalculator","DataElement","EXTENSION_TICKARRAY_BITMAP_SIZE","FARM_LOCK_MINT","FARM_LOCK_VAULT","FARM_PROGRAM_TO_VERSION","FARM_VERSION_TO_LEDGER_LAYOUT","FARM_VERSION_TO_STATE_LAYOUT","FEE_RATE_DENOMINATOR","FEE_RATE_DENOMINATOR_VALUE","FETCH_TICKARRAY_COUNT","Fee","LIQUIDITY_FEES_DENOMINATOR","LIQUIDITY_FEES_NUMERATOR","LIQUIDITY_VERSION_TO_SERUM_VERSION","LIQUIDITY_VERSION_TO_STATE_LAYOUT","LOG_B_2_X32","LOG_B_P_ERR_MARGIN_LOWER_X64","LOG_B_P_ERR_MARGIN_UPPER_X64","LiquidityMath","MARKET_STATE_LAYOUT_V2","MARKET_STATE_LAYOUT_V3","MARKET_VERSION_TO_STATE_LAYOUT","MAX_SQRT_PRICE_X64","MAX_TICK","MIN_SQRT_PRICE_X64","MIN_TICK","MODEL_DATA_PUBKEY","Market","MathUtil","MaxU64","MaxUint128","NEGATIVE_ONE","ONE","OPERATION_SEED","ObservationInfoLayout","ObservationLayout","OperationLayout","POOL_REWARD_VAULT_SEED","POOL_SEED","POOL_TICK_ARRAY_BITMAP_SEED","POOL_VAULT_SEED","POSITION_SEED","PoolInfoLayout","PoolUtils","PositionInfoLayout","PositionRewardInfoLayout","PositionUtils","ProtocolPositionLayout","Q128","Q64","Raydium","RewardInfo","RoundDirection","SERUM_PROGRAMID_TO_VERSION","SERUM_VERSION_TO_PROGRAMID","SOL_INFO","SPL_MINT_LAYOUT","SqrtPriceMath","StableLayout","SwapMath","TICK_ARRAY_BITMAP_SIZE","TICK_ARRAY_SEED","TICK_ARRAY_SIZE","TICK_SPACINGS","TOKEN_WSOL","TickArrayBitmap","TickArrayBitmapExtensionLayout","TickArrayBitmapExtensionUtils","TickArrayLayout","TickLayout","TickMath","TickQuery","TickUtils","U64Resolution","U64_IGNORE_RANGE","Voter","VoterDepositEntry","VoterLockup","VoterRegistrar","VoterVotingMintConfig","ZERO","addLiquidityLayout","associatedLedgerAccountLayout","calFarmRewardAmount","ceilDiv","claimLayout","closeAccountInstruction","createAssociatedLedgerAccountInstruction","createPoolFeeLayout","createPoolV4InstructionV2","createPoolV4Layout","createWSolAccountInstructions","dwLayout","farmAddRewardLayout","farmLedgerLayoutV3_1","farmLedgerLayoutV3_2","farmLedgerLayoutV5_1","farmLedgerLayoutV5_2","farmLedgerLayoutV6_1","farmRewardInfoToConfig","farmRewardLayout","farmRewardRestartLayout","farmRewardTimeInfoLayout","farmStateV3Layout","farmStateV5Layout","farmStateV6Layout","fetchMultipleFarmInfoAndUpdate","fetchMultipleInfo","fixedSwapInLayout","fixedSwapOutLayout","floorDiv","formatLayout","generatePubKey","getAssociatedAuthority","getAssociatedConfigId","getAssociatedLedgerAccount","getAssociatedLedgerPoolAccount","getAssociatedOpenOrders","getAssociatedPoolKeys","getCpmmPdaAmmConfigId","getCpmmPdaPoolId","getCreatePoolKeys","getDepositEntryIndex","getDxByDyBaseIn","getDyByDxBaseIn","getFarmLedgerLayout","getFarmStateLayout","getLiquidityAssociatedAuthority","getLiquidityAssociatedId","getLiquidityFromAmounts","getPdaAmmConfigId","getPdaExBitmapAccount","getPdaLpMint","getPdaMetadataKey","getPdaObservationId","getPdaOperationAccount","getPdaPersonalPositionAddress","getPdaPoolAuthority","getPdaPoolId","getPdaPoolRewardVaulId","getPdaPoolVaultId","getPdaProtocolPositionAddress","getPdaTickArrayAddress","getPdaVault","getRegistrarAddress","getStablePrice","getTokenOwnerRecordAddress","getVoterAddress","getVoterWeightRecordAddress","getVotingMintAuthority","getVotingTokenMint","governanceCreateTokenOwnerRecord","i16ToBytes","i32ToBytes","initPoolLayout","initTokenAccountInstruction","initializeMarket","isValidFarmVersion","isZero","judgeFarmType","leadingZeros","leastSignificantBit","liquidityStateV4Layout","liquidityStateV5Layout","makeAMMSwapInstruction","makeAddLiquidityInstruction","makeAddNewRewardInstruction","makeClaimInstruction","makeClaimInstructionV4","makeCreateCpmmPoolInInstruction","makeCreateFarmInstruction","makeCreateMarketInstruction","makeCreatorWithdrawFarmRewardInstruction","makeDepositCpmmInInstruction","makeDepositInstructionV3","makeDepositInstructionV5","makeDepositInstructionV6","makeDepositTokenInstruction","makeDepositWithdrawInstruction","makeInitPoolInstructionV4","makePurchaseInstruction","makeRestartRewardInstruction","makeSimulatePoolInfoInstruction","makeSwapCpmmBaseInInInstruction","makeSwapCpmmBaseOutInInstruction","makeSwapFixedInInstruction","makeSwapFixedOutInstruction","makeSwapInstruction","makeTransferInstruction","makeWithdrawCpmmInInstruction","makeWithdrawInstructionV3","makeWithdrawInstructionV5","makeWithdrawInstructionV6","makeWithdrawTokenInstruction","mockCreatePoolInfo","mockV3CreatePoolInfo","modelDataInfoLayout","mostSignificantBit","parseTokenAccountResp","parseTokenInfo","poolTypeV6","purchaseLayout","realFarmStateV3Layout","realFarmStateV5Layout","realFarmV6Layout","removeLiquidityInstruction","removeLiquidityLayout","route1Instruction","route2Instruction","routeInstruction","simulatePoolInfoInstruction","solToWSolToken","splAccountLayout","toToken","toTokenAmount","toTokenInfo","trailingZeros","u16ToBytes","u32ToBytes","unionArr","updateFarmPoolInfo","validateFarmRewards","voterStakeRegistryCreateDepositEntry","voterStakeRegistryCreateVoter","voterStakeRegistryDeposit","voterStakeRegistryUpdateVoterWeightRecord","voterStakeRegistryWithdraw","wSolToSolToken","withdrawRewardLayout","__toCommonJS","import_lodash","import_axios","import_lodash","import_dayjs","import_utc","dayjs","utc","Logger","params","logLevel","dayjs","level","props","msg","arg","moduleLoggers","moduleLevels","createLogger","moduleName","logger","import_web3","import_bn","import_big","import_bn","import_bn","EXP_LIMIT","MAX_DIGITS","NUMERALS","LN10","PI","DEFAULTS","inexact","quadrant","external","decimalError","invalidArgument","precisionLimitExceeded","cryptoUnavailable","tag","mathfloor","mathpow","isBinary","isHex","isOctal","isDecimal","BASE","LOG_BASE","MAX_SAFE_INTEGER","LN10_PRECISION","PI_PRECISION","P","x","finalise","min","max","k","Ctor","y","i","j","xdL","ydL","xd","yd","xs","ys","pr","rm","cosine","toLessThanHalfPi","e","m","n","r","rep","s","sd","t","t3","t3plusx","digitsToString","divide","w","d","len","one","tinyPow","taylorSeries","cosh2_x","d8","sinh2_x","d5","d16","d20","halfPi","getPi","wpr","xsd","px","x2","base","isBase10","denominator","inf","num","arg","guard","naturalLogarithm","getLn10","checkRoundingDigits","xe","xLTy","getBase10Exponent","q","naturalExponential","carry","z","getPrecision","sine","rL","toStringBinary","dp","checkInt32","str","finiteToString","maxD","d0","d1","d2","n0","n1","yn","intPow","ws","indexOfLastWord","getZeroString","repeating","di","rd","convertBase","baseIn","baseOut","arr","arrL","strL","cos2x","multiplyInteger","temp","compare","a","b","aL","bL","subtract","cmp","logBase","more","prod","prodL","qd","rem","remL","rem0","xi","xL","yd0","yL","yz","sign","isTruncated","digits","roundUp","xdi","out","isExp","nonFiniteToString","zs","truncate","isOdd","maxOrMin","args","ltgt","pow","sum","c","c0","numerator","x1","parseDecimal","parseOther","divisor","isFloat","p","Decimal","sin2_x","isHyperbolic","u","isNeg","pi","abs","acos","acosh","add","asin","asinh","atan","atanh","atan2","cbrt","ceil","clamp","config","obj","v","useDefaults","ps","cos","cosh","clone","isDecimalInstance","div","exp","floor","hypot","ln","log","log10","log2","mod","mul","random","round","sin","sinh","sqrt","sub","tan","tanh","trunc","decimal_default","import_web3","import_spl_token","import_web3","accountMeta","pubkey","isSigner","isWritable","commonSystemAccountMeta","validateAndParsePublicKey","orgPubKey","transformSol","publicKey","tryParsePublicKey","SOLMint","WSOLMint","v","MEMO_PROGRAM_ID","MEMO_PROGRAM_ID2","RENT_PROGRAM_ID","CLOCK_PROGRAM_ID","METADATA_PROGRAM_ID","INSTRUCTION_PROGRAM_ID","SYSTEM_PROGRAM_ID","RAYMint","PAIMint","SRMMint","USDCMint","USDTMint","mSOLMint","stSOLMint","USDHMint","NRVMint","ANAMint","ETHMint","solToWSol","mint","import_web3","import_spl_token","SOL_INFO","TOKEN_WSOL","_Token","mint","decimals","symbol","name","skipMint","isToken2022","SOLMint","TOKEN_WSOL","validateAndParsePublicKey","other","Token","import_big","import_bn","import_decimal","import_toformat","toFormat","_toFarmat","formatter_default","logger","createLogger","Big","formatter_default","_Big","Decimal","_Decimal","toSignificantRounding","toFixedRounding","Fraction","numerator","denominator","BN","parseBigNumberish","other","otherParsed","significantDigits","format","rounding","quotient","decimalPlaces","logger","createLogger","Price","Fraction","params","baseToken","quoteToken","numerator","denominator","tenExponential","other","fraction","significantDigits","format","rounding","decimalPlaces","_Currency","decimals","symbol","name","other","Currency","SOL_INFO","import_bn","_100_PERCENT","Fraction","BN","Percent","significantDigits","format","rounding","decimalPlaces","BN_ZERO","BN","BN_ONE","BN_TWO","BN_THREE","BN_FIVE","BN_TEN","BN_100","BN_1000","BN_10000","MAX_SAFE","parseBigNumberish","value","logger","createLogger","tenExponential","shift","divCeil","a","b","dm","logger","createLogger","Big","formatter_default","_Big","splitNumber","num","decimals","integral","fractional","splited","TokenAmount","Fraction","token","amount","isRaw","name","parsedAmount","BN","multiplier","BN_TEN","parseBigNumberish","integralAmount","fractionalAmount","other","significantDigits","format","rounding","decimalPlaces","notInnerObject","v","Token","TokenAmount","Fraction","BN","Price","Percent","o","jsonInfo2PoolKeys","jsonInfo","tryParsePublicKey","k","import_web3","import_axios","InstructionType","import_web3","import_spl_token","logger","createLogger","MAX_BASE64_SIZE","addComputeBudget","config","ins","insTypes","InstructionType","getRecentBlockHash","connection","_a","_b","forecastTransactionSize","instructions","signers","transaction","simulateMultipleInstruction","keyword","batchRequest","feePayer","transactions","instruction","results","simulateTransaction","i","error","logs","result","filteredLog","log","parseSimulateLogToJson","parseSimulateValue","key","findProgramAddress","seeds","programId","publicKey","nonce","getLatestBlockhash","encodedTransactions","signData","encodedTransaction","batch","keys","args","reqData","itemReqIndex","ii","checkLegacyTxSize","payer","checkV0TxSize","lookupTableAddressAccount","recentBlockhash","messageV0","toBuffer","arr","printSimulate","transactions","allBase64","transaction","serialized","base64","import_web3","import_web3","import_spl_token","logger","createLogger","getMultipleAccountsInfo","connection","publicKeys","config","batchRequest","commitment","chunkedKeys","chunkArray","results","batch","keys","args","key","_batch","i","unsafeRes","accountInfo","data","executable","lamports","owner","rentEpoch","error","getMultipleAccountsInfoWithCustomFlags","publicKeysWithCustomFlag","multipleAccountsInfo","o","idx","getMultipleLookupTableInfo","connection","address","dataInfos","getMultipleAccountsInfo","outDict","info","key","lookupAccount","LOOKUP_TABLE_CACHE","TxBuilder","params","_a","json","axios","avg","config","instructions","instructionTypes","addComputeBudget","propConfig","defaultIns","endInstructions","signers","endInstructionTypes","lookupTableAddress","address","txVersion","extInfo","transaction","propBlockHash","skipPreflight","recentBlockHash","getRecentBlockHash","printSimulate","s","txs","extraPreBuildData","filterExtraBuildData","data","allTransactions","allSigners","allInstructionTypes","executeParams","sequentially","onTxUpdate","tx","idx","partialSignedTxs","signedTxs","i","processedTxs","checkSendTx","txId","signatureResult","targetTxIdx","d","txIds","props","lookupTableCache","forerunCreate","lookupTableAddressAccount","LOOKUP_TABLE_CACHE","allLTA","needCacheLTA","item","newCacheLTA","getMultipleLookupTableInfo","key","value","messageV0","lastValidBlockHeight","blockhash","buildProps","computeBudgetConfig","computeBudgetData","signerKey","acc","cur","instructionQueue","_itemIns","_itemInsWithCompute","_signer","ii","checkLegacyTxSize","_signers","blockHash","checkV0TxSize","Owner","owner","chunkArray","arr","chunkSize","cache","tmp","isNumber","val","isDateBefore","timestampA","timestampB","options","realTimestampB","isNumber","isDateAfter","import_web3","FARM_PROGRAM_ID_V3","FARM_PROGRAM_ID_V5","FARM_PROGRAM_ID_V6","UTIL1216","OPEN_BOOK_PROGRAM","SERUM_PROGRAM_ID_V3","AMM_V4","AMM_STABLE","CLMM_PROGRAM_ID","Router","IDO_PROGRAM_ID_V1","IDO_PROGRAM_ID_V2","IDO_PROGRAM_ID_V3","IDO_PROGRAM_ID_V4","CREATE_CPMM_POOL_PROGRAM","CREATE_CPMM_POOL_AUTH","CREATE_CPMM_POOL_FEE_ACC","DEV_CREATE_CPMM_POOL_PROGRAM","DEV_CREATE_CPMM_POOL_AUTH","DEV_CREATE_CPMM_POOL_FEE_ACC","IDO_ALL_PROGRAM","import_web3","import_spl_token","getATAAddress","owner","mint","programId","findProgramAddress","import_bn","POINT","getTransferAmountFeeV2","amount","_feeConfig","epochInfo","addFee","feeConfig","nowFeeConfig","maxFee","BN","expirationTime","POINT","nowMaxFee","_TAmount","BNDivCeil","TAmount","_fee","fee","minExpirationTime","expirationTime1","expirationTime2","bn1","bn2","div","mod","API_URLS","DEV_API_URLS","SESSION_KEY","STORAGE_KEY","getSessionKey","key","updateReqHistory","logCount","removeLastLog","resData","resolve","data","success","resStr","logger","createLogger","poolKeysCache","Api","cluster","timeout","logRequests","logCount","urlConfigs","axios","API_URLS","config","method","baseURL","url","logger","error","response","data","status","updateReqHistory","poolId","endpointUrl","slotList","a","b","type","mint","m","props","sort","order","page","pageSize","ids","idList","cacheList","readyList","poolKeysCache","poolKey","propMint1","propMint2","mint1","mint2","solToWSol","baseMint","quoteMint","EMPTY_OWNER","EMPTY_CONNECTION","import_spl_token","import_web3","joinMsg","args","arg","ModuleBase","scope","moduleName","createLogger","feePayer","TxBuilder","message","import_spl_token","import_web3","import_bn","import_web3","import_spl_token","import_bn","import_web3","import_bn","import_buffer_layout","Layout","_Layout","Structure","_Structure","UInt","_UInt","u8","_u8","u16","_u16","u32","_u32","nu64","_nu64","s32","_s32","seq","_seq","blob","_blob","bits","_bits","BNLayout","Layout","span","signed","property","blob","b","offset","num","BN","src","WideBits","bits","u32","lowerDecoded","upperDecoded","u8","UInt","u64","u128","i8","i64","i128","WrappedLayout","layout","decoder","encoder","publicKey","key","bool","property","WrappedLayout","u8","decodeBool","encodeBool","value","Structure","b","offset","struct","fields","property","decodePrefixes","seq","elementLayout","count","property","parsedCount","superCount","target","countProperty","value","splAccountLayout","struct","publicKey","u64","u32","u8","isBytes","a","bytes","b","lengths","exists","instance","checkFinished","output","out","bytes","min","createView","arr","rotr","word","shift","isLE","utf8ToBytes","str","toBytes","data","bytes","Hash","toStr","wrapConstructor","hashCons","hashC","msg","toBytes","tmp","setBigUint64","view","byteOffset","value","isLE","_32n","_u32_max","wh","wl","h","l","Chi","a","b","c","Maj","HashMD","Hash","blockLen","outputLen","padOffset","createView","data","exists","buffer","toBytes","len","pos","take","dataView","out","output","i","oview","outLen","state","res","to","length","finished","destroyed","SHA256_K","SHA256_IV","SHA256_W","SHA256","HashMD","A","B","C","D","E","F","G","H","view","offset","i","W15","W2","s0","rotr","s1","sigma1","T1","Chi","T2","Maj","sha256","wrapConstructor","SHA256","logger","createLogger","parseTokenAccountResp","owner","solAccountResp","tokenAccountResp","tokenAccounts","tokenAccountRawInfos","pubkey","account","accountInfo","splAccountLayout","mint","amount","getATAAddress","BN","generatePubKey","fromPublicKey","programId","seed","createWithSeed","buffer","publicKeyBytes","sha256","initTokenAccountInstruction","params","mint","tokenAccount","owner","programId","closeAccountInstruction","payer","multiSigners","createWSolAccountInstructions","connection","amount","commitment","skipCloseAccount","balanceNeeded","splAccountLayout","lamports","parseBigNumberish","BN","newAccount","generatePubKey","TOKEN_WSOL","InstructionType","makeTransferInstruction","source","destination","tokenProgram","Account","ModuleBase","params","tokenAccounts","tokenAccountRawInfos","cbk","listener","mint","programId","getATAAddress","config","customConfig","solAccountResp","ownerTokenAccountResp","ownerToken2022AccountResp","parseTokenAccountResp","associatedOnly","accountMint","b","ata","tokenAccount","publicKey","_a","_b","_c","createInfo","owner","notUseTokenAccount","skipCloseAccount","checkCreateATAOwner","tokenProgram","accounts","i","a","newTxInstructions","_createATAIns","ataInfo","InstructionType","WSOLMint","txInstruction","createWSolAccountInstructions","makeTransferInstruction","closeAccountInstruction","newTokenAccount","generatePubKey","balanceNeeded","createAccountIns","initTokenAccountInstruction","autoUnwrapWSOLToSOL","tokenAccountAddress","accountTokenMint","ataAddress","instruction","side","amount","payer","bypassAssociatedCheck","instructions","props","useSOLBalance","handleTokenAccount","txBuilder","_tokenAccount","import_spl_token","import_web3","import_web3","associatedLedgerAccountLayout","struct","u8","withdrawRewardLayout","farmStateRewardInfoV6Layout","u64","u128","publicKey","seq","realFarmStateV3Layout","realFarmStateV5Layout","blob","realFarmV6Layout","farmStateV3Layout","target","p","receiver","decodeParams","originalResult","farmStateV5Layout","farmStateV6Layout","item","_a","poolTypeV6","i","farmRewardTimeInfoLayout","farmRewardLayout","farmRewardRestartLayout","farmAddRewardLayout","farmLedgerLayoutV3_1","farmLedgerLayoutV3_2","farmLedgerLayoutV5_1","farmLedgerLayoutV5_2","farmLedgerLayoutV6_1","dwLayout","VoterVotingMintConfig","i8","VoterRegistrar","i64","VoterLockup","VoterDepositEntry","bool","Voter","logger","createLogger","FARM_LOCK_MINT","FARM_LOCK_VAULT","FARM_VERSION_TO_STATE_LAYOUT","farmStateV3Layout","farmStateV5Layout","farmStateV6Layout","FARM_VERSION_TO_LEDGER_LAYOUT","farmLedgerLayoutV3_2","farmLedgerLayoutV5_2","farmLedgerLayoutV6_1","isValidFarmVersion","version","validateFarmRewards","params","_a","rewardInfos","rewardTokenAccountsPublicKeys","infoMsg","validator","poolTypeV6","FARM_PROGRAM_TO_VERSION","FARM_PROGRAM_ID_V3","FARM_PROGRAM_ID_V5","FARM_PROGRAM_ID_V6","import_web3","import_spl_token","import_bn","getRegistrarAddress","programId","realm","communityTokenMint","findProgramAddress","getVotingTokenMint","poolId","getVotingMintAuthority","getVoterAddress","registrar","authority","getVoterWeightRecordAddress","getTokenOwnerRecordAddress","governingTokenMint","governingTokenOwner","import_bn","logger","createLogger","getAssociatedLedgerPoolAccount","programId","poolId","mint","type","publicKey","findProgramAddress","getAssociatedLedgerAccount","owner","version","getAssociatedAuthority","farmRewardInfoToConfig","data","BN","parseBigNumberish","poolTypeV6","calFarmRewardAmount","getFarmLedgerLayout","ledgerLayout","FARM_VERSION_TO_LEDGER_LAYOUT","getFarmStateLayout","stateLayout","FARM_VERSION_TO_STATE_LAYOUT","updateFarmPoolInfo","poolInfo","lpVault","slot","chainTime","spread","itemRewardInfo","reward","updateTime","leftReward","fetchMultipleFarmInfoAndUpdate","connection","farmPools","config","hasNotV6Pool","hasV6Pool","tenBN","publicKeys","pool","jsonInfo2PoolKeys","poolsInfo","accountsInfo","getMultipleAccountsInfoWithCustomFlags","pubkey","key","accountInfo","_poolId","splAccountLayout","legerLayout","state","ledger","multiplier","pendingRewards","rewardInfo","index","rewardDebt","judgeFarmType","info","currentTime","rewardInfos","rewardOpenTime","isDateBefore","rewardEndTime","isDateAfter","perSlotRewards","perSlotReward","getDepositEntryIndex","registrar","voter","voterMint","registrarAccountData","votingMintConfigIndex","VoterRegistrar","i","voterAccountData","depositEntryIndex","Voter","logger","createLogger","anchorDataBuf","createAssociatedLedgerAccountInstruction","params","version","id","ledger","programId","owner","instruction","data","associatedLedgerAccountLayout","keys","accountMeta","InstructionType","makeCreateFarmInstruction","_a","farmRewardLayout","BN","commonSystemAccountMeta","SOLMint","item","makeCreatorWithdrawFarmRewardInstruction","withdrawRewardLayout","voterStakeRegistryDeposit","registrar","voter","voterVault","depositToken","depositAuthority","userStakerInfoV2","pool","votingMint","votingMintAuthority","stakeProgramId","depositEntryIndex","amount","dataLayout","struct","u8","u64","INSTRUCTION_PROGRAM_ID","aData","voterStakeRegistryUpdateVoterWeightRecord","voterWeightRecord","voterStakeRegistryWithdraw","voterAuthority","tokenOwnerRecord","vault","destination","governanceCreateTokenOwnerRecord","realm","governingTokenOwner","governingTokenMint","payer","tokenOwnerRecordAddress","voterStakeRegistryCreateVoter","voterBump","voterWeightRecordBump","RENT_PROGRAM_ID","voterStakeRegistryCreateDepositEntry","depositMint","kind","startTs","periods","allowClawback","u32","bool","makeDepositTokenInstruction","connection","governanceProgramId","voteWeightAddinProgramId","communityTokenMint","poolId","tokenProgram","getRegistrarAddress","ownerPda","getAssociatedLedgerAccount","ownerAccountInfo","ownerInfo","farmLedgerLayoutV3_2","mintAmount","getVotingTokenMint","getVotingMintAuthority","getVoterAddress","getATAAddress","getVoterWeightRecordAddress","getTokenOwnerRecordAddress","instructions","createTokenOwnerRecodeIns","depositEntryInit","getDepositEntryIndex","makeWithdrawTokenInstruction","makeRestartRewardInstruction","rewardVault","userRewardTokenPub","farmKeys","rewardInfo","farmRewardRestartLayout","parseBigNumberish","makeAddNewRewardInstruction","farmAddRewardLayout","poolTypeV6","makeDepositWithdrawInstruction","farmInfo","lpAccount","rewardAccounts","deposit","ledgerAddress","dwLayout","index","makeWithdrawInstructionV6","makeWithdrawInstructionV5","userAuxiliaryLedgers","auxiliaryLedger","makeWithdrawInstructionV3","makeDepositInstructionV3","makeDepositInstructionV5","makeDepositInstructionV6","Farm","ModuleBase","payer","rewardInfo","SOLMint","txInstructions","createWSolAccountInstructions","calFarmRewardAmount","propPoolInfo","rewardInfos","programId","FARM_PROGRAM_ID_V6","txVersion","poolInfo","FARM_LOCK_MINT","FARM_LOCK_VAULT","txBuilder","payerPubKey","farmKeyPair","generatePubKey","lamports","farmStateV6Layout","authority","nonce","getAssociatedAuthority","lpVault","getAssociatedLedgerPoolAccount","rewardInfoConfig","rewardInfoKey","poolTypeV6","farmRewardInfoToConfig","rewardPubKey","newInstruction","rewardMint","TOKEN_WSOL","lockUserAccount","instruction","instructionType","makeCreateFarmInstruction","farmInfo","newRewardInfo","_a","version","FARM_PROGRAM_TO_VERSION","farmInfoKeys","jsonInfo2PoolKeys","farmKeys","rewardInfoIndex","item","rewardVault","userRewardTokenPub","makeRestartRewardInstruction","InstructionType","newRewardInfos","reward","itemReward","ins","params","makeAddNewRewardInstruction","amount","feePayer","useSOLBalance","associatedOnly","checkCreateATAOwner","userAuxiliaryLedgers","computeBudgetConfig","isValidFarmVersion","farmProgramId","farmId","ledger","getAssociatedLedgerAccount","ownerMintToAccount","ata","getATAAddress","lpMint","ownerLpTokenAccount","rewardAccounts","rewardUseSOLBalance","WSOLMint","ownerRewardAccount","_ownerRewardAccount","instructionParams","ledgerInfo","ledgerData","getFarmLedgerLayout","createAssociatedLedgerAccountInstruction","errorMsg","validateFarmRewards","insParams","parseBigNumberish","key","makeDepositInstructionV6","makeDepositInstructionV5","makeDepositInstructionV3","insType","deposited","lpMintUseSOLBalance","makeWithdrawInstructionV6","makeWithdrawInstructionV5","makeWithdrawInstructionV3","withdrawMint","rewardInfoIdx","userRewardToken","txInstruction","decimal_default","selectUserRewardToken","makeCreatorWithdrawFarmRewardInstruction","farmInfoList","farmKeyMap","f","acc","cur","farmLpMint","id","_ownerLpAccount","BN_ZERO","withdrawInstruction","import_web3","import_spl_token","SPL_MINT_LAYOUT","struct","u32","publicKey","u64","u8","import_web3","import_spl_token","parseTokenInfo","connection","mint","accountData","toTokenInfo","decimals","programId","logoURI","priority","pubStr","toToken","props","Token","toTokenAmount","amount","isRaw","name","TokenAmount","solToWSolToken","token","SOL_INFO","TOKEN_WSOL","wSolToSolToken","import_spl_token","import_web3","fixedSwapInLayout","struct","u8","u64","fixedSwapOutLayout","createPoolV4Layout","initPoolLayout","liquidityStateV4Layout","u128","publicKey","seq","liquidityStateV5Layout","addLiquidityLayout","removeLiquidityLayout","LIQUIDITY_VERSION_TO_STATE_LAYOUT","createPoolFeeLayout","import_web3","MODEL_DATA_PUBKEY","ELEMENT_SIZE","DataElement","struct","u64","modelDataInfoLayout","seq","estimateRangeByXyReal","_xReal","_yReal","estimateRangeByX","_x","estimateRangeByY","_y","getMininumRangeByXyReal","layoutData","xReal","yReal","min","max","minRangeIdx","maxRangeIdx","mid","target","cur","left","right","getRatio","find","x","x1","y1","x2","y2","xDenominator","xNumerator1","xNumerator2","xNumerator","realToTable","realValue","ratio","tableToReal","tableValue","getMinimumRangeByX","getMinimumRangeByY","y","getDataByX","dx","priceUp","xWithDx","minIdx","maxIdx","p1","p2","p","getDataByY","dy","yWithDy","getMidPrice","ret","getDyByDxBaseIn","dxReal","lessTrade","getDxByDyBaseIn","dyReal","formatLayout","buffer","layoutInfo","item","getStablePrice","coinReal","pcReal","baseCoin","price","StableLayout","connection","acc","logger","createLogger","makeAddLiquidityInstruction","params","poolInfo","poolKeys","userKeys","baseAmountIn","quoteAmountIn","fixedSide","data","addLiquidityLayout","parseBigNumberish","BN_ZERO","BN_ONE","keys","accountMeta","MODEL_DATA_PUBKEY","removeLiquidityInstruction","poolKeyProps","amountIn","jsonInfo2PoolKeys","version","removeLiquidityLayout","createPoolV4InstructionV2","programId","ammId","ammAuthority","ammOpenOrders","lpMint","coinMint","pcMint","coinVault","pcVault","withdrawQueue","ammTargetOrders","poolTempLp","marketProgramId","marketId","userWallet","userCoinVault","userPcVault","userLpVault","nonce","openTime","coinAmount","pcAmount","ammConfigId","feeDestinationId","dataLayout","struct","u8","u64","RENT_PROGRAM_ID","InstructionType","simulatePoolInfoInstruction","simulatePoolLayout","makeSwapFixedInInstruction","propPoolKeys","minAmountOut","fixedSwapInLayout","makeSwapFixedOutInstruction","maxAmountIn","amountOut","fixedSwapOutLayout","makeAMMSwapInstruction","props","makeInitPoolInstructionV4","startTime","initPoolLayout","makeSimulatePoolInfoInstruction","LAYOUT","import_spl_token","import_web3","import_bn","import_bn","u16ToBytes","num","arr","i16ToBytes","u32ToBytes","i32ToBytes","leadingZeros","bitNum","data","i","j","trailingZeros","isZero","mostSignificantBit","leastSignificantBit","AMM_CONFIG_SEED","POOL_SEED","POOL_VAULT_SEED","POOL_REWARD_VAULT_SEED","POSITION_SEED","TICK_ARRAY_SEED","OPERATION_SEED","POOL_TICK_ARRAY_BITMAP_SEED","getPdaAmmConfigId","programId","index","findProgramAddress","u16ToBytes","getPdaPoolId","ammConfigId","mintA","mintB","getPdaPoolVaultId","poolId","vaultMint","getPdaPoolRewardVaulId","rewardMint","getPdaTickArrayAddress","startIndex","i32ToBytes","getPdaProtocolPositionAddress","tickLower","tickUpper","getPdaPersonalPositionAddress","nftMint","getPdaMetadataKey","mint","METADATA_PROGRAM_ID","getPdaOperationAccount","getPdaExBitmapAccount","import_bn","ZERO","BN","ONE","NEGATIVE_ONE","Q64","Q128","MaxU64","U64Resolution","MaxUint128","MIN_TICK","MAX_TICK","MIN_SQRT_PRICE_X64","MAX_SQRT_PRICE_X64","BIT_PRECISION","LOG_B_2_X32","LOG_B_P_ERR_MARGIN_LOWER_X64","LOG_B_P_ERR_MARGIN_UPPER_X64","FEE_RATE_DENOMINATOR","Fee","TICK_SPACINGS","mockCreatePoolInfo","mockV3CreatePoolInfo","U64_IGNORE_RANGE","FETCH_TICKARRAY_COUNT","TickQuery","connection","programId","poolId","tickCurrent","tickSpacing","tickArrayBitmapArray","exTickArrayBitmap","tickArraysToFetch","currentTickArrayStartIndex","TickUtils","startIndexArray","i","tickArrayAddress","getPdaTickArrayAddress","fetchedTickArrays","getMultipleAccountsInfo","TickArrayLayout","tickArrayCache","_info","tickIndex","zeroForOne","nextTick","tickArrayStartTickIndex","cachedTickArray","_nextTick","_tickArrayAddress","_tickArrayStartTickIndex","tickArrayBitmap","exBitmapInfo","currentOffset","result","tickArray","nextInitializedTick","TICK_ARRAY_SIZE","tickInArray","startIndex","tickPositionInArray","ticksInArray","MAX_TICK","minStartIndex","MIN_TICK","import_bn","import_web3","import_bn","EXTENSION_TICKARRAY_BITMAP_SIZE","TickArrayBitmap","tickSpacing","TICK_ARRAY_SIZE","TICK_ARRAY_BITMAP_SIZE","tickarrayStartIndex","ticksInOneBitmap","m","minValue","bitMap","lastTickArrayStartIndex","zeroForOne","TickQuery","tickBoundary","nextTickArrayStartIndex","multiplier","compressed","bitPos","offsetBitMap","nextBit","mostSignificantBit","nextArrayStartIndex","leastSignificantBit","TickArrayBitmapExtensionUtils","tickIndex","offset","tickArrayBitmapExtension","positiveTickBoundary","negativeTickBoundary","MAX_TICK","MIN_TICK","tickArrayStartIndex","tickarrayBitmap","tickArrayOffsetInBitmap","TickUtils","bitmapMinTickBoundary","bitmapMaxTickBoundary","isZero","leadingZeros","trailingZeros","import_bn","PositionUtils","poolState","tickLowerState","tickUpperState","feeGrowthBelowX64A","BN","feeGrowthBelowX64B","feeGrowthAboveX64A","feeGrowthAboveX64B","feeGrowthInsideX64A","MathUtil","feeGrowthInsideBX64","ammPool","positionState","feeGrowthdeltaA","Q64","tokenFeeAmountA","feeGrowthdelta1","tokenFeeAmountB","rewards","rewardGrowthsInside","i","rewardGrowthInside","currRewardInfo","rewardGrowthDelta","amountOwedDelta","rewardAmountOwed","tickCurrentIndex","rewardInfos","rewardGrowthsBelow","rewardGrowthsAbove","poolInfo","ownerPosition","liquidity","slippage","add","epochInfo","_a","_b","_c","_d","sqrtPriceX64","SqrtPriceMath","decimal_default","sqrtPriceX64A","sqrtPriceX64B","coefficientRe","amounts","LiquidityMath","amountA","amountB","getTransferAmountFeeV2","amountSlippageA","amountSlippageB","minExpirationTime","import_spl_token","PoolUtils","poolInfo","tickArrayCache","inputTokenMint","inputAmount","sqrtPriceLimitX64","zeroForOne","allNeededAccounts","isExist","firstTickArrayStartIndex","nextAccountMeta","outputAmount","reaminAccounts","executionPrice","feeAmount","SwapMath","NEGATIVE_ONE","outputTokenMint","preTick","address","getPdaTickArrayAddress","isInitialized","startIndex","TickArrayBitmapExtensionUtils","TickQuery","TickUtils","nextStartIndex","currentOffset","result","lastTickArrayStartIndex","startIsInit","TickArrayBitmap","isInit","tickIndex","MIN_TICK","MAX_TICK","connection","apiPoolInfo","chainTime","poolLiquidity","rewardInfos","_a","_b","_c","nRewardInfo","i","_itemReward","apiRewardProgram","itemReward","MathUtil","ZERO","latestUpdateTime","BN","timeDelta","rewardGrowthDeltaX64","rewardGrowthGlobalX64","rewardEmissionedDelta","Q64","rewardTotalEmissioned","tickSpacing","tickarrayStartIndexs","maxTickBoundary","minTickBoundary","tickarrayStartIndex","TICK_ARRAY_BITMAP_SIZE","exBitmapAddress","batchRequest","fetchedBitmapAccount","getMultipleAccountsInfoWithCustomFlags","returnTypeFetchExBitmaps","item","TickArrayBitmapExtensionLayout","poolKeys","tickArraysToPoolId","tickArrays","itemPoolInfo","currentTickArrayStartIndex","startIndexArray","itemIndex","tickArrayAddress","fetchedTickArrays","itemAccountInfo","poolId","accountLayoutData","TickArrayLayout","pools","ownerInfo","updateOwnerRewardAndFee","programIds","index","accountInfo","allMint","allPositionKey","itemMint","itemProgramId","getPdaPersonalPositionAddress","positionAccountInfos","getMultipleAccountsInfo","keyToTickArrayAddress","position","PositionInfoLayout","itemPoolId","poolInfoA","pool","priceLower","priceUpper","amountA","amountB","LiquidityMath","leverage","tickArrayLowerAddress","tickArrayUpperAddress","tickArrayKeys","tickArrayDatas","tickArrayLayout","tickArrayData","key","state","positionAccount","itemPA","keyLower","keyUpper","tickArrayLower","tickArrayUpper","tickLowerState","tickUpperState","tokenFeeAmountA","tokenFeeAmountB","PositionUtils","baseMint","epochInfo","amountIn","slippage","priceLimit","decimal_default","isBaseIn","baseFeeConfig","outFeeConfig","MIN_SQRT_PRICE_X64","MAX_SQRT_PRICE_X64","SqrtPriceMath","realAmountIn","getTransferAmountFeeV2","_expectedAmountOut","remainingAccounts","_executionPriceX64","amountOut","_executionPrice","_minAmountOut","minAmountOut","poolPrice","_numerator","_denominator","priceImpact","Percent","minExpirationTime","_tokenOut","baseIn","inputMint","outMint","baseToken","outToken","Token","_realAmountIn","_amountOut","expirationTime","currentPrice","fee","TokenAmount","_currentPrice","Price","_fee","aprType","positionTickLowerIndex","positionTickUpperIndex","aprInfo","_minPrice","sub","userRange","tradeRange","p","mintPrice","liquidity","aprTypeDay","mintPriceA","solToWSol","mintPriceB","mintDecimalsA","mintDecimalsB","sqrtPriceX64","sqrtPriceX64A","sqrtPriceX64B","poolLiquidityA","poolLiquidityB","userLiquidityA","userLiquidityB","poolTvl","userTvl","feeApr","SECONDS_PER_YEAR","rewardsApr","iDecimal","iPrice","a","b","inputA","tickLower","tickUpper","amount","add","amountHasFee","coefficient","addFeeAmount","_amount","liquidity0","liquidity1","_d","coefficientRe","amounts","amountSlippageA","amountSlippageB","owner","data","rpcPool","PoolInfoLayout","pda","getPdaExBitmapAccount","exBitData","getLiquidityFromAmounts","_tickLower","_tickUpper","_amountA","_amountB","amountFeeA","amountFeeB","MathUtil","a","b","denominator","numerator","result","ZERO","ONE","num","decimalPlaces","decimal_default","BN","n0","n1","Q128","mulRightShift","val","mulBy","signedRightShift","signedLeftShift","shiftBy","bitWidth","twosN0","twoN0","SqrtPriceMath","sqrtPriceX64","decimalsA","decimalsB","price","liquidity","amountIn","zeroForOne","amountOut","amount","add","liquidityLeftShift","U64Resolution","numerator1","amountMulSqrtPrice","deltaY","amountDivLiquidity","tick","MIN_TICK","MAX_TICK","tickAbs","ratio","MaxUint128","MAX_SQRT_PRICE_X64","MIN_SQRT_PRICE_X64","msb","adjustedMsb","log2pIntegerX32","bit","precision","log2pFractionX64","r","BIT_PRECISION","rMoreThanTwo","log2pFractionX32","logbpX64","LOG_B_2_X32","tickLow","LOG_B_P_ERR_MARGIN_LOWER_X64","tickHigh","LOG_B_P_ERR_MARGIN_UPPER_X64","TickMath","tickSpacing","mintDecimalsA","mintDecimalsB","LiquidityMath","x","y","sqrtPriceX64A","sqrtPriceX64B","roundUp","numerator2","Q64","amountA","MaxU64","amountB","sqrtPriceCurrentX64","liquidity0","liquidity1","amountMax","amountSlippage","coefficient","amount0Slippage","amount1Slippage","poolInfo","tickLower","tickUpper","slippage","epochInfo","amountAddFee","_a","_b","_c","_d","coefficientRe","amounts","getTransferAmountFeeV2","amountSlippageA","amountSlippageB","minExpirationTime","SwapMath","programId","poolId","tickArrayCache","tickArrayBitmap","tickarrayBitmapExtension","fee","currentTick","currentSqrtPriceX64","amountSpecified","lastSavedTickArrayStartIndex","sqrtPriceLimitX64","baseInput","state","TickQuery","tickAarrayStartIndex","tickArrayCurrent","loopCount","t","step","tickState","TickUtils","nextInitTick","tickArrayAddress","nextInitTickArrayIndex","PoolUtils","expectedNextTickArrayAddress","getPdaTickArrayAddress","targetPrice","liquidityNet","NEGATIVE_ONE","_T","isExist","sqrtPriceX64Current","sqrtPriceX64Target","amountRemaining","feeRate","swapStep","amountRemainingSubtractFee","FEE_RATE_DENOMINATOR","reachTargetPrice","TICK_ARRAY_SIZE","TICK_ARRAY_BITMAP_SIZE","TickUtils","programId","poolId","tickIndex","tickSpacing","startIndex","tickArrayAddress","getPdaTickArrayAddress","startTickIndex","offsetInArray","ticksInArray","TickQuery","tick","multiplier","compressed","bitmap","bitPos","lastTickArrayStartIndex","zeroForOne","bns","b","BN","i","tickArrayBitmap","exTickArrayBitmap","tickArrayStartIndex","expectedCount","tickArrayOffset","result","allInitializedTickArrayIndex","address","tickArray","currentTickArrayBitStartIndex","tickArrayBitmaps","arrayIndex","searchIndex","tickCount","MIN_TICK","MAX_TICK","tickArrayCurrent","currentTickIndex","t","poolInfo","baseIn","tickSqrtPriceX64","SqrtPriceMath","tickPrice","decimal_default","price","_price","TickMath","AmmConfigLayout","struct","blob","u8","u16","publicKey","u32","seq","u64","ObservationLayout","u128","ObservationInfoLayout","bool","RewardInfo","PoolInfoLayout","s32","PositionRewardInfoLayout","PositionInfoLayout","ProtocolPositionLayout","TickLayout","i128","TickArrayLayout","TICK_ARRAY_SIZE","OperationLayout","TickArrayBitmapExtensionLayout","EXTENSION_TICKARRAY_BITMAP_SIZE","logger","createLogger","anchorDataBuf","ClmmInstrument","programId","poolId","poolCreator","ammConfigId","observationId","mintA","mintVaultA","mintProgramIdA","mintB","mintVaultB","mintProgramIdB","exTickArrayBitmap","sqrtPriceX64","startTime","dataLayout","struct","u128","u64","keys","RENT_PROGRAM_ID","data","aData","props","connection","owner","initialPriceX64","forerunCreate","generatePubKey","mintAAddress","mintBAddress","ins","ObservationInfoLayout","getPdaPoolId","mintAVault","getPdaPoolVaultId","mintBVault","getPdaExBitmapAccount","InstructionType","payer","positionNftOwner","positionNftMint","positionNftAccount","metadataAccount","protocolPosition","tickArrayLower","tickArrayUpper","personalPosition","ownerTokenAccountA","ownerTokenAccountB","tokenVaultA","tokenVaultB","tokenMintA","tokenMintB","tickLowerIndex","tickUpperIndex","tickArrayLowerStartIndex","tickArrayUpperStartIndex","liquidity","amountMaxA","amountMaxB","withMetadata","s32","bool","u8","remainingAccounts","METADATA_PROGRAM_ID","poolInfo","poolKeys","ownerInfo","tickLower","tickUpper","getEphemeralSigners","signers","id","nftMintAccount","_k","TickUtils","getPdaTickArrayAddress","getATAAddress","getPdaMetadataKey","getPdaPersonalPositionAddress","getPdaProtocolPositionAddress","base","baseAmount","otherAmountMax","PoolUtils","BN","ownerPosition","mintMintA","mintMintB","rewardAccounts","amountMinA","amountMinB","i","MEMO_PROGRAM_ID","poolProgramId","inputTokenAccount","outputTokenAccount","inputVault","outputVault","inputMint","outputMint","tickArray","amount","otherAmountThreshold","sqrtPriceLimitX64","isBaseInput","amountIn","amountOutMin","isInputMintA","operationId","ownerTokenAccount","rewardProgramId","rewardMint","rewardVault","openTime","endTime","emissionsPerSecondX64","parseBigNumberish","rewardInfo","poolRewardVault","getPdaPoolRewardVaulId","getPdaOperationAccount","rewardIndex","index","amountOut","amountInMax","import_web3","import_web3","import_bn","LIQUIDITY_FEES_NUMERATOR","BN","LIQUIDITY_FEES_DENOMINATOR","LIQUIDITY_VERSION_TO_SERUM_VERSION","logger","createLogger","getSerumAssociatedAuthority","programId","marketId","seeds","nonce","publicKey","seedsWithNonce","err","logger","import_bn","getAssociatedConfigId","programId","publicKey","findProgramAddress","getLiquidityAssociatedId","name","marketId","getAssociatedOpenOrders","getLiquidityAssociatedAuthority","getAssociatedPoolKeys","version","marketVersion","baseMint","quoteMint","baseDecimals","quoteDecimals","marketProgramId","id","lpMint","authority","nonce","baseVault","quoteVault","lpVault","openOrders","targetOrders","withdrawQueue","marketAuthority","getSerumAssociatedAuthority","stableLayout","fetchMultipleInfo","connection","poolKeysList","config","StableLayout","instructions","pool","makeSimulatePoolInfoInstruction","simulateMultipleInstruction","i","log","json","parseSimulateLogToJson","status","BN","parseSimulateValue","lpDecimals","baseReserve","quoteReserve","lpSupply","startTime","import_bn","LiquidityModule","ModuleBase","params","StableLayout","poolInfo","amount","slippage","baseIn","inputAmount","BN","decimal_default","_anotherToken","toToken","baseReserve","quoteReserve","lpAmount","input","amountRaw","BN_ZERO","divCeil","liquidity","slippageAdjustedAmount","Percent","_anotherAmount","TokenAmount","_maxAnotherAmount","poolId","amountInA","amountInB","fixedSide","config","txVersion","computeBudgetConfig","account","bypassAssociatedCheck","checkCreateATAOwner","tokenA","tokenB","tokenAccountA","tokenAccountB","lpTokenAccount","tokens","_tokenAccounts","rawAmounts","sideA","_fixedSide","baseToken","quoteToken","baseTokenAccount","quoteTokenAccount","baseAmountRaw","quoteAmountRaw","poolKeys","txBuilder","_baseTokenAccount","baseInstruction","_quoteTokenAccount","quoteInstruction","_lpTokenAccount","lpInstruction","makeAddLiquidityInstruction","InstructionType","amountIn","baseMint","quoteMint","lpMint","removeLiquidityInstruction","clmmPoolInfo","removeLpAmount","createPositionInfo","farmInfo","userFarmLpAmount","base","payer","tokenProgram","getEphemeralSigners","mintToAccount","item","getATAAddress","mintBaseUseSOLBalance","Token","mintQuoteUseSOLBalance","ownerTokenAccountBaseInstruction","ownerTokenAccountQuoteInstruction","rewardTokenAccounts","rewardIsWsol","farmRewardAccount","ownerTokenAccountFarmInstruction","farmKeys","insParams","version","FARM_PROGRAM_TO_VERSION","newInstruction","makeWithdrawInstructionV6","makeWithdrawInstructionV5","makeWithdrawInstructionV3","insType","removeIns","clmmPoolKeys","createPositionIns","ClmmInstrument","programId","marketInfo","baseMintInfo","quoteMintInfo","baseAmount","quoteAmount","startTime","ownerInfo","associatedOnly","feeDestinationId","_a","mintAUseSOLBalance","mintBUseSOLBalance","ownerTokenAccountBase","ownerTokenAccountQuote","getAssociatedPoolKeys","createPoolKeys","instruction","instructionType","createPoolV4InstructionV2","configId","getAssociatedConfigId","createPoolFeeLayout","mintIn","mintOut","reserves","reserveIn","reserveOut","isVersion4","AMM_V4","currentPrice","p","getStablePrice","amountInRaw","amountOutRaw","feeRaw","BNDivCeil","LIQUIDITY_FEES_NUMERATOR","LIQUIDITY_FEES_DENOMINATOR","amountInWithFee","denominator","getDyByDxBaseIn","getDxByDyBaseIn","minAmountOutRaw","amountOut","minAmountOut","executionPrice","priceImpact","inputMint","tokenIn","tokenOut","tokenAccountIn","tokenAccountOut","_tokenAccountIn","accountInIns","_tokenAccountOut","accountOutIns","makeAMMSwapInstruction","import_web3","import_bn","Clmm","ModuleBase","params","poolId","props","_a","programId","owner","mint1","mint2","ammConfig","initialPrice","startTime","computeBudgetConfig","forerunCreate","txVersion","txBuilder","mintA","mintB","initPrice","BN","decimal_default","initialPriceX64","SqrtPriceMath","insInfo","ClmmInstrument","mockV3CreatePoolInfo","poolInfo","propPoolKeys","ownerInfo","tickLower","tickUpper","base","baseAmount","otherAmountMax","associatedOnly","checkCreateATAOwner","withMetadata","getEphemeralSigners","ownerTokenAccountA","ownerTokenAccountB","mintAUseSOLBalance","WSOLMint","mintBUseSOLBalance","amountA","amountB","_ownerTokenAccountA","_tokenAccountAInstruction","_ownerTokenAccountB","_tokenAccountBInstruction","poolKeys","amountMaxA","amountMaxB","liquidity","makeOpenPositionInstructions","ownerPosition","ins","amountMinA","amountMinB","accountAInstructions","accountBInstructions","rewardAccounts","itemReward","rewardUseSOLBalance","ownerRewardAccount","_ownerRewardAccount","ownerRewardAccountInstructions","decreaseInsInfo","InstructionType","extInfo","closeInsInfo","rewardInfo","rewardMintUseSOLBalance","_baseRewardAmount","ownerRewardAccountIns","MathUtil","rewardInfos","address","ownerRewardIns","rewardMint","i","rewardMints","inputMint","amountIn","amountOutMin","priceLimit","remainingAccounts","sqrtPriceLimitX64","MIN_SQRT_PRICE_X64","MAX_SQRT_PRICE_X64","account","instructionParams","allPoolInfo","allPositions","ownerMintToAccount","item","getATAAddress","itemInfo","ii","itemPosition","insData","accountInfo","getPdaOperationAccount","OperationLayout","allPositionKey","acc","getPdaPersonalPositionAddress","allPosition","positionRes","position","PositionInfoLayout","rpc","PoolInfoLayout","currentPrice","import_web3","import_spl_token","AUTH_SEED","AMM_CONFIG_SEED","POOL_SEED","POOL_LP_MINT_SEED","POOL_VAULT_SEED","OBSERVATION_SEED","getPdaPoolAuthority","programId","findProgramAddress","getCpmmPdaAmmConfigId","index","u16ToBytes","getCpmmPdaPoolId","ammConfigId","mintA","mintB","getPdaLpMint","poolId","getPdaVault","mint","getPdaObservationId","num","arr","getCreatePoolKeys","configId","authority","lpMint","vaultA","vaultB","observationId","import_web3","import_spl_token","logger","createLogger","anchorDataBuf","makeCreateCpmmPoolInInstruction","programId","creator","configId","authority","poolId","mintA","mintB","lpMint","userVaultA","userVaultB","userLpAccount","vaultA","vaultB","createPoolFeeAccount","mintProgramA","mintProgramB","observationId","amountMaxA","amountMaxB","openTime","dataLayout","struct","u64","keys","SYSTEM_PROGRAM_ID","RENT_PROGRAM_ID","data","makeDepositCpmmInInstruction","owner","lpAmount","makeWithdrawCpmmInInstruction","amountMinA","amountMinB","MEMO_PROGRAM_ID2","makeSwapCpmmBaseInInInstruction","payer","userInputAccount","userOutputAccount","inputVault","outputVault","inputTokenProgram","outputTokenProgram","inputMint","outputMint","amountIn","amounOutMin","makeSwapCpmmBaseOutInInstruction","amountInMax","amountOut","import_bn","CpmmConfigInfoLayout","struct","blob","u8","bool","u16","u64","publicKey","seq","CpmmPoolInfoLayout","CpmmModule","ModuleBase","params","poolId","fetchConfigInfo","accountData","poolInfo","CpmmPoolInfoLayout","poolVaultAState","poolVaultBState","configInfo","configState","CpmmConfigInfoLayout","BN","programId","poolFeeAccount","startTime","ownerInfo","associatedOnly","checkCreateATAOwner","txVersion","computeBudgetConfig","_a","_b","_c","payer","isFront","mintA","mintB","mintAAmount","mintBAmount","mintAUseSOLBalance","mintBUseSOLBalance","mintAPubkey","mintBPubkey","txBuilder","userVaultA","userVaultAInstruction","userVaultB","userVaultBInstruction","poolKeys","getCreatePoolKeys","makeCreateCpmmPoolInInstruction","getATAAddress","InstructionType","inputAmount","baseIn","slippage","computeResult","config","account","bypassAssociatedCheck","rpcPoolData","liquidity","inputAmountFee","_anotherAmount","decimal_default","anotherAmount","tokenAccountA","_tokenAccountAInstruction","tokenAccountB","_tokenAccountBInstruction","lpTokenAccount","_lpTokenAccount","lpInstruction","makeDepositCpmmInInstruction","lpAmount","_slippage","Percent","amountMintA","amountMintB","epochInfo","mintAAmountFee","mintBAmountFee","getTransferAmountFeeV2","WSOLMint","_ownerTokenAccountA","accountAInstructions","_ownerTokenAccountB","accountBInstructions","makeWithdrawCpmmInInstruction","swapResult","isSell","programIdA","programIdB","mintATokenAcc","mintBTokenAcc","_mintATokenAcc","mintATokenAccInstruction","_mintBTokenAcc","mintBTokenAccInstruction","vaultA","vaultB","makeSwapCpmmBaseInInInstruction","getPdaObservationId","makeSwapCpmmBaseOutInInstruction","amount","_d","_e","_f","_g","_h","coefficient","_inputAmountWithoutFee","baseReserve","quoteReserve","input","anotherAmountFee","BN_ZERO","lpToAmount","slippageAdjustedAmount","lp","poolAmountA","poolAmountB","supply","amountA","amountB","TradeV2","ModuleBase","params","addLiquidityPools","poolInfosCache","a","b","_addLiquidityPools","ammIdToPoolInfo","aInfo","bInfo","BN_ZERO","tokenAccounts","acc","WSOLMint","props","amount","tokenProgram","txBuilder","ins","createWSolAccountInstructions","amountBN","parseBigNumberish","i","closeAccountInstruction","makeTransferInstruction","import_spl_token","import_web3","import_bn","_Utils1216","ModuleBase","programId","ammId","findProgramAddress","poolId","owner","version","BN","connection","poolIds","wallet","chainTime","allPoolPda","id","allOwnerPda","itemVersion","pdaInfo","getMultipleAccountsInfo","info","index","i","itemPoolId","itemOwnerId","itemPoolInfoS","itemOwnerInfoS","itemPoolInfo","itemOwnerInfo","openTime","endTime","hasCanClaimToken","inCanClaimTime","canClaim","itemPoolToken","poolInfo","ownerInfo","txBuilder","ownerVaultList","itemToken","account","instructionParams","Token","transaction","signers","poolInfos","tempNewVault","tempVault","instructions","forecastTransactionSize","s","dataLayout","struct","keys","mintVault","data","aData","Utils1216","blob","u8","u64","publicKey","seq","import_web3","import_spl_token","import_bn","import_web3","import_spl_token","accountFlagsLayout","property","ACCOUNT_FLAGS_LAYOUT","WideBits","MARKET_STATE_LAYOUT_V2","struct","blob","publicKey","u64","initializeMarket","programId","marketInfo","dataLayout","struct","u8","u32","u64","u16","keys","data","makeCreateMarketInstruction","connection","wallet","tx1","accountLamports","tx2","MARKET_STATE_LAYOUT_V2","InstructionType","MarketV2","ModuleBase","baseInfo","quoteInfo","lotSize","tickSize","dexProgramId","txVersion","computeBudgetConfig","wallet","market","generatePubKey","requestQueue","eventQueue","bids","asks","baseVault","quoteVault","feeRateBps","quoteDustThreshold","BN","getVaultOwnerAndNonce","vaultSignerNonce","vaultOwner","baseLotSize","quoteLotSize","BN_ZERO","allTxArr","makeCreateMarketInstruction","txBuilder","extraTxBuildData","txData","extraTxBuilder","build","import_web3","import_web3","import_spl_token","purchaseLayout","struct","u8","nu64","claimLayout","makePurchaseInstruction","programId","amount","instructionKeys","keys","RENT_PROGRAM_ID","CLOCK_PROGRAM_ID","name","pubkey","data","purchaseLayout","makeClaimInstruction","claimLayout","makeClaimInstructionV4","params","poolConfig","userKeys","side","tokenAccount","vault","import_bn","PROGRAM_TO_VERSION","IDO_ALL_PROGRAM","MarketV2","ModuleBase","ownerInfo","idoKeys","associatedOnly","checkCreateATAOwner","txVersion","txBuilder","version","poolConfigKey","jsonInfo2PoolKeys","hasUnClaimedProject","hasUnClaimedBuy","BN","userProjectUseSolBalance","WSOLMint","userProjectTokenAccount","userProjectInstructionParams","buyMintUseSolBalance","userBuyTokenAccount","instructionParams","makeClaimInstruction","keys","makeClaimInstructionV4","import_web3","import_spl_token","TokenModule","ModuleBase","params","forceUpdate","type","mintList","blacklist","whiteList","jup","SOL_INFO","token","_a","data","mint","mintStr","info","apiTokenInfo","onlineInfo","mintSymbol","fullInfo","Raydium","config","connection","cluster","owner","api","defaultChainTime","defaultChainTimeOffset","apiCacheTime","Owner","createLogger","Farm","Account","LiquidityModule","TokenModule","TradeV2","Clmm","CpmmModule","Utils1216","MarketV2","now","_a","custom","apiRequestTimeout","logCount","logRequests","urlConfigs","Api","raydium","EMPTY_OWNER","EMPTY_CONNECTION","signAllTransactions","time","data","forceUpdate","raydiumList","dataObject","type","prevFetched","jupList","skipCheck","isAllDisabled","import_spl_token","import_web3","import_bn","route1Instruction","programId","poolInfoA","poolKeyA","poolKeyB","userSourceToken","userRouteToken","userPdaAccount","ownerWallet","inputMint","amountIn","amountOut","tickArrayA","dataLayout","struct","u8","u64","keys","poolKey","jsonInfo2PoolKeys","i","data","route2Instruction","poolInfoB","userDestinationToken","routeMint","tickArrayB","makeInnerInsKey","itemPool","itemPoolKey","inMint","userInAccount","userOutAccount","remainingAccount","pool","baseIn","MEMO_PROGRAM_ID","getPdaExBitmapAccount","routeInstruction","wallet","remainingAccounts","makeSwapInstruction","routeProgram","ownerInfo","swapInfo","_a","_b","_c","_d","_e","_f","_poolKey","sqrtPriceLimitX64","MIN_SQRT_PRICE_X64","ONE","MAX_SQRT_PRICE_X64","ClmmInstrument","BN","makeAMMSwapInstruction","InstructionType","poolInfo1","poolInfo2","poolKey1","poolKey2","a","import_bn","FEE_RATE_DENOMINATOR_VALUE","BN","ceilDiv","tokenAmount","feeNumerator","feeDenominator","floorDiv","CpmmFee","amount","tradeFeeRate","protocolFeeRate","fundFeeRate","import_bn","checkedRem","dividend","divisor","checkedCeilDiv","rhs","quotient","remainder","ZERO","BN","ConstantProductCurve","sourceAmount","swapSourceAmount","swapDestinationAmount","invariant","newSwapSourceAmount","newSwapDestinationAmount","_newSwapSourceAmount","sourceAmountSwapped","destinationAmountSwapped","lpTokenAmount","lpTokenSupply","swapTokenAmount0","swapTokenAmount1","roundDirection","tokenAmount0","tokenAmount1","RoundDirection","CurveCalculator","tokenAmount0","tokenAmount1","sourceAmount","swapSourceAmount","swapDestinationAmount","tradeFeeRate","tradeFee","CpmmFee","sourceAmountLessFees","sourceAmountSwapped","destinationAmountSwapped","ConstantProductCurve","_sourceAmountSwapped","SERUM_PROGRAMID_TO_VERSION","SERUM_PROGRAM_ID_V3","SERUM_VERSION_TO_PROGRAMID","MARKET_STATE_LAYOUT_V3","struct","blob","publicKey","u64","MARKET_VERSION_TO_STATE_LAYOUT","import_web3","logger","createLogger","Market","version","programId","SERUM_VERSION_TO_PROGRAMID","programIdString","SERUM_PROGRAMID_TO_VERSION","STATE_LAYOUT","MARKET_VERSION_TO_STATE_LAYOUT","marketId","seeds","nonce","publicKey","seedsWithNonce","err","unionArr","arr"]}