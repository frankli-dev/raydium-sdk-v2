{"version":3,"sources":["../../src/api/utils.ts"],"sourcesContent":["export const SESSION_KEY = \"ray_tab_hash\";\nexport const STORAGE_KEY = \"ray_req_hash\";\n\nexport const getSessionKey = (): string => {\n  if (typeof window === undefined) return \"\";\n  let key = sessionStorage.getItem(SESSION_KEY);\n\n  // new a session key\n  if (!key) {\n    key = `ray-${Date.now()}`;\n    sessionStorage.setItem(SESSION_KEY, key);\n  }\n  return key;\n};\n\nexport interface ResHistory {\n  status: number;\n  url: string;\n  params?: any;\n  data: any;\n  logCount?: number;\n  time: number;\n  session: string;\n  removeLastLog?: boolean;\n}\n\nexport const updateReqHistory = async ({\n  logCount = 1000,\n  removeLastLog,\n  ...resData\n}: Omit<ResHistory, \"time\" | \"session\">): Promise<void> => {\n  if (typeof window === undefined) return new Promise((resolve) => resolve());\n  const data: ResHistory[] = JSON.parse(localStorage.getItem(STORAGE_KEY) || \"[]\").slice(0, logCount - 1);\n\n  // means retry last save error\n  if (removeLastLog) data.pop();\n\n  // if data > 1kb\n  if (new Blob([JSON.stringify(resData.data)]).size > 1024)\n    resData.data = JSON.stringify(resData.data).substring(0, 200) + \"...\";\n  data.unshift({ ...resData, time: Date.now(), session: getSessionKey() });\n\n  try {\n    localStorage.setItem(STORAGE_KEY, JSON.stringify(data));\n  } catch {\n    // if retry failed, empty request data\n    if (removeLastLog) {\n      let success = false;\n      const resStr = JSON.stringify(resData.data).substring(0, 100);\n      data[0].data = resStr + (resStr.length > 100 ? \"...\" : \"\");\n      while (!success) {\n        data.pop();\n        const resStr = JSON.stringify(resData.data).substring(0, 100);\n        data[0].data = resStr + (resStr.length > 100 ? \"...\" : \"\");\n        try {\n          localStorage.setItem(STORAGE_KEY, JSON.stringify(data));\n          success = true;\n        } catch {\n          success = false;\n        }\n      }\n      return new Promise((resolve) => resolve());\n    }\n    return updateReqHistory({\n      ...resData,\n      logCount,\n      removeLastLog: true,\n    });\n  }\n};\n"],"mappings":"AAAO,IAAMA,EAAc,eACdC,EAAc,eAEdC,EAAgB,IAAc,CACzC,GAAI,OAAO,SAAW,OAAW,MAAO,GACxC,IAAIC,EAAM,eAAe,QAAQH,CAAW,EAG5C,OAAKG,IACHA,EAAM,OAAO,KAAK,IAAI,IACtB,eAAe,QAAQH,EAAaG,CAAG,GAElCA,CACT,EAaaC,EAAmB,MAAO,CACrC,SAAAC,EAAW,IACX,cAAAC,KACGC,CACL,IAA2D,CACzD,GAAI,OAAO,SAAW,OAAW,OAAO,IAAI,QAASC,GAAYA,EAAQ,CAAC,EAC1E,IAAMC,EAAqB,KAAK,MAAM,aAAa,QAAQR,CAAW,GAAK,IAAI,EAAE,MAAM,EAAGI,EAAW,CAAC,EAGlGC,GAAeG,EAAK,IAAI,EAGxB,IAAI,KAAK,CAAC,KAAK,UAAUF,EAAQ,IAAI,CAAC,CAAC,EAAE,KAAO,OAClDA,EAAQ,KAAO,KAAK,UAAUA,EAAQ,IAAI,EAAE,UAAU,EAAG,GAAG,EAAI,OAClEE,EAAK,QAAQ,CAAE,GAAGF,EAAS,KAAM,KAAK,IAAI,EAAG,QAASL,EAAc,CAAE,CAAC,EAEvE,GAAI,CACF,aAAa,QAAQD,EAAa,KAAK,UAAUQ,CAAI,CAAC,CACxD,MAAE,CAEA,GAAIH,EAAe,CACjB,IAAII,EAAU,GACRC,EAAS,KAAK,UAAUJ,EAAQ,IAAI,EAAE,UAAU,EAAG,GAAG,EAE5D,IADAE,EAAK,GAAG,KAAOE,GAAUA,EAAO,OAAS,IAAM,MAAQ,IAChD,CAACD,GAAS,CACfD,EAAK,IAAI,EACT,IAAME,EAAS,KAAK,UAAUJ,EAAQ,IAAI,EAAE,UAAU,EAAG,GAAG,EAC5DE,EAAK,GAAG,KAAOE,GAAUA,EAAO,OAAS,IAAM,MAAQ,IACvD,GAAI,CACF,aAAa,QAAQV,EAAa,KAAK,UAAUQ,CAAI,CAAC,EACtDC,EAAU,EACZ,MAAE,CACAA,EAAU,EACZ,CACF,CACA,OAAO,IAAI,QAASF,GAAYA,EAAQ,CAAC,CAC3C,CACA,OAAOJ,EAAiB,CACtB,GAAGG,EACH,SAAAF,EACA,cAAe,EACjB,CAAC,CACH,CACF","names":["SESSION_KEY","STORAGE_KEY","getSessionKey","key","updateReqHistory","logCount","removeLastLog","resData","resolve","data","success","resStr"]}